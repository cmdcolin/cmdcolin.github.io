{"pageProps":{"post":{"title":"Handling component state with React (or, remember that props can change)","date":"2022-10-10","slug":"2022-10-10-reactstate","html":"<p>If you make a React component that has, say, a prop for a item id, and an async\naction in a <code>useEffect</code> to fetch data for that item from an API, then you may\nprobably also have a <code>useState</code> to set data after you get results back from\nyour API (or an error occurs). But, the interesting thing to me is</p>\n<p><strong>you have to remember to reset that state, including error state, when your\nprops change</strong></p>\n<p>It seems obvious, but I just wanted to write some working examples here</p>\n<h2 id=\"part-1-fetching-info-from-the-pokemon-api-with-component-state-for-pokemon-info-or-returned-error\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-1-fetching-info-from-the-pokemon-api-with-component-state-for-pokemon-info-or-returned-error\"><a href=\"#part-1-fetching-info-from-the-pokemon-api-with-component-state-for-pokemon-info-or-returned-error\" style=\"margin-right: 10px\">#</a></a>Part 1: Fetching info from the Pokemon API, with component state for pokemon info or returned error</h2>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003\">https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003</a></p>\n<div class=\"highlight highlight-text-xml\"><pre>import { useState, useEffect } from 'react'\n\ninterface PokemonType {\n  type: {\n    name: string\n  }\n}\ninterface PokemonInfo {\n  name: string\n  types: PokemonType\n}\n\n// util fetch function to throw if !response.ok, I use this util often\nasync function myfetch(url: string, opts?: RequestInit) {\n  const response = await fetch(url, opts)\n  if (!response.ok) {\n    throw new Error(\n      `Error fetching ${url}: HTTP ${response.status} ${await response.text()}`,\n    )\n  }\n  return response.json()\n}\n\nfunction ErrorMessage({ error }: { error: unknown }) {\n  return &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">style</span>={{ background: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>red<span class=\"pl-pds\">'</span></span> }}>{`${error}`}&#x3C;/<span class=\"pl-ent\">div</span>>\n}\n\nfunction PokemonCard({ pokemonName }: { pokemonName: string }) {\n  const [error, setError] = useState&#x3C;<span class=\"pl-ent\">unknown</span>>()\n  const [pokemonInfo, setPokemonInfo] = useState&#x3C;<span class=\"pl-ent\">PokemonInfo</span>>()\n  useEffect(() => {\n    let cancelled = false\n    ;(async () => {\n      try {\n        // important: reset the error and item state of the component!\n        setError(undefined)\n        setPokemonInfo(undefined)\n\n        const data = await myfetch(\n          `https://pokeapi.co/api/v2/pokemon/${pokemonName}`,\n        )\n        if (!cancelled) {\n          setPokemonInfo(data)\n        }\n      } catch (e) {\n        console.error(e)\n        if (!cancelled) {\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [pokemonName])\n\n  return (\n    &#x3C;<span class=\"pl-ent\">div</span>>\n      {error ? (\n        &#x3C;<span class=\"pl-ent\">ErrorMessage</span> <span class=\"pl-e\">error</span>={error} />\n      ) : pokemonInfo ? (\n        &#x3C;<span class=\"pl-ent\">div</span>>\n          {pokemonInfo.name} is of type{' '}\n          {pokemonInfo.types.map(t => t.type.name).join(', ')}\n        &#x3C;/<span class=\"pl-ent\">div</span>>\n      ) : (\n        &#x3C;<span class=\"pl-ent\">div</span>>Loading...&#x3C;/<span class=\"pl-ent\">div</span>>\n      )}\n    &#x3C;/<span class=\"pl-ent\">div</span>>\n  )\n}\n\nexport default function App() {\n  const [value, setValue] = useState('oddish')\n  return (\n    &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">className</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span>>\n      &#x3C;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">htmlFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pokemon_name<span class=\"pl-pds\">\"</span></span>>Pokemon name&#x3C;/<span class=\"pl-ent\">label</span>>\n      &#x3C;<span class=\"pl-ent\">input</span>\n        <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pokemon_name<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">value</span>={value}\n        <span class=\"pl-e\">onChange</span>={e => setValue(e.target.value)}\n      />\n      &#x3C;<span class=\"pl-ent\">PokemonCard</span> <span class=\"pl-e\">pokemonName</span>={value} />\n    &#x3C;/<span class=\"pl-ent\">div</span>>\n  )\n}\n</pre></div>\n<h2 id=\"part-2-a-custom-hook\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-2-a-custom-hook\"><a href=\"#part-2-a-custom-hook\" style=\"margin-right: 10px\">#</a></a>Part 2: A custom hook?</h2>\n<p>Can we make a hook to make this easier? I don't often make custom hooks, but\nyou can try to \"encapsulate\" some of the multiple-related hooks (the useStates\nfor error, pokemonInfo, and useEffect) into a single hook. This does not\ndrastically affect our approach, but the handling is not contained. We can call\n<code>usePokemonInfo(pokemonName)</code> and error handling and fetching is handled for us</p>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234\">https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234</a></p>\n<div class=\"highlight highlight-text-xml\"><pre>import { useState, useEffect } from 'react'\n\ninterface PokemonType {\n  type: {\n    name: string\n  }\n}\ninterface PokemonInfo {\n  name: string\n  types: PokemonType\n}\n\n// util fetch function to throw if !response.ok, I use this util often\nasync function myfetch(url: string, opts?: RequestInit) {\n  const response = await fetch(url, opts)\n  if (!response.ok) {\n    throw new Error(\n      `Error fetching ${url}: HTTP ${response.status} ${await response.text()}`,\n    )\n  }\n  return response.json()\n}\n\nfunction usePokemonInfo(pokemonName: string) {\n  const [error, setError] = useState&#x3C;<span class=\"pl-ent\">unknown</span>>()\n  const [pokemonInfo, setPokemonInfo] = useState&#x3C;<span class=\"pl-ent\">PokemonInfo</span>>()\n  useEffect(() => {\n    let cancelled = false\n    ;(async () => {\n      try {\n        setPokemonInfo(undefined) // &#x3C;<span class=\"pl-ent\">--</span> important to reset the state of the app\n        setError(undefined) // &#x3C;-- important to reset the state of the app\n        const data = await myfetch(\n          `https://pokeapi.co/api/v2/pokemon/${pokemonName}`,\n        )\n        if (!cancelled) {\n          setPokemonInfo(data)\n        }\n      } catch (e) {\n        console.error(e)\n        if (!cancelled) {\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [pokemonName])\n\n  return [error, pokemonInfo]\n}\n\nfunction ErrorMessage({ error }: { error: unknown }) {\n  return &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">style</span>={{ background: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>red<span class=\"pl-pds\">'</span></span> }}>{`${error}`}&#x3C;/<span class=\"pl-ent\">div</span>>\n}\n\nfunction PokemonCard({ pokemonName }: { pokemonName: string }) {\n  const [error, pokemonInfo] = usePokemonInfo(pokemonName)\n\n  return (\n    &#x3C;<span class=\"pl-ent\">div</span>>\n      {error ? (\n        &#x3C;<span class=\"pl-ent\">ErrorMessage</span> <span class=\"pl-e\">error</span>={error} />\n      ) : pokemonInfo ? (\n        &#x3C;<span class=\"pl-ent\">div</span>>\n          {pokemonInfo.name} is of type{' '}\n          {pokemonInfo.types.map(t => t.type.name).join(', ')}\n        &#x3C;/<span class=\"pl-ent\">div</span>>\n      ) : (\n        &#x3C;<span class=\"pl-ent\">div</span>>Loading...&#x3C;/<span class=\"pl-ent\">div</span>>\n      )}\n    &#x3C;/<span class=\"pl-ent\">div</span>>\n  )\n}\n\nexport default function App() {\n  const [value, setValue] = useState('oddish')\n  return (\n    &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">className</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>App<span class=\"pl-pds\">\"</span></span>>\n      &#x3C;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">htmlFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pokemon_name<span class=\"pl-pds\">\"</span></span>>Pokemon name&#x3C;/<span class=\"pl-ent\">label</span>>\n      &#x3C;<span class=\"pl-ent\">input</span>\n        <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pokemon_name<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>\n        <span class=\"pl-e\">value</span>={value}\n        <span class=\"pl-e\">onChange</span>={e => setValue(e.target.value)}\n      />\n      &#x3C;<span class=\"pl-ent\">PokemonCard</span> <span class=\"pl-e\">pokemonName</span>={value} />\n    &#x3C;/<span class=\"pl-ent\">div</span>>\n  )\n}\n</pre></div>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>I think it's sometimes common to forget error handling in async JS code\n(useEffect async or many other contexts, etc), and it's not linted well wither,\nleaving errors uncaught. If you don't manually handle the error in the\nuseEffect, your user will literally never see that an error occured. But, the\nflipside to this, is you also have to reset your \"error state\", those are the\nkey lines where I call setError(undefined) and setPokemonInfo(undefined) before\nI fetch a new pokemon from my API.</p>\n<h2 id=\"footnote-0\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-0\"><a href=\"#footnote-0\" style=\"margin-right: 10px\">#</a></a>Footnote 0:</h2>\n<p>I think sometimes, this manner of fetching data inside a component can lead to\nwhat some web-perf-experts refer to as waterfall. Can you get your state from\nyour parent? That might result in fewer individual requests made, but is also\nquite a different architecture.</p>"}},"__N_SSG":true}