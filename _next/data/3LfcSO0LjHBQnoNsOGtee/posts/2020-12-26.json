{"pageProps":{"post":{"title":"Making a serverless website for photo and video upload pt. 2","date":"2020-12-26","slug":"2020-12-26","mdxSource":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(e,t,o)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,a=(e,t)=>{for(var o in t||(t={}))i.call(t,o)&&l(e,o,t[o]);if(n)for(var o of n(t))r.call(t,o)&&l(e,o,t[o]);return e},p=(e,t)=>m(e,u(t));var d=(e,t)=>{var o={};for(var s in e)i.call(e,s)&&t.indexOf(s)<0&&(o[s]=e[s]);if(e!=null&&n)for(var s of n(e))t.indexOf(s)<0&&r.call(e,s)&&(o[s]=e[s]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var s=o,{components:e}=s,t=d(s,[\"components\"]);return mdx(MDXLayout,p(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`This post follows\non\\xA0`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://cmdcolin.github.io/2020-12-24.html\"}),\"https://cmdcolin.github.io/2020-12-24.html\")),mdx(\"p\",null,`It is possible I zoomed ahead too fast to make this a continuous\ntutorial, but overall I just wanted to post an update`),mdx(\"p\",null,\"In pt. 1 I learned how to use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"aws-sam\"),` CLI tool. This was a great\ninsight for me about automating deployments. I can now simply run `,mdx(\"inlineCode\",{parentName:\"p\"},\"sam deploy\"),\" and it will create new dynamodb tables, lambda functions, etc.\"),mdx(\"p\",null,`After writing pt 1. I converted the existing vue-js app that was in the\naws tutorial and converted it to react. Then I extended the app to allow`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Posting comments on photos\"),mdx(\"li\",{parentName:\"ul\"},\"Uploading multiple files\"),mdx(\"li\",{parentName:\"ul\"},`Uploading videos\netc.`)),mdx(\"p\",null,`It will be hard to summarize all the changes since now the app has taken\noff a little bit but it looks like this:`),mdx(\"p\",null,\"Repo structure\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),` ./frontend # created using npx create-react-app frontend --template\n typescript\n ./frontend/src/App.tsx # main frontend app code in react\n ./lambdas/\n ./lambdas/postFile # post a file to the lambda, this uploads a row to\n dynamodb and returns a pre-signed URL for uploading (note that if the\n client failed it's upload, that row in the lambda DB might be in a bad\n state...)\n ./lambdas/getFiles # get all files that were ever posted\n ./lambdas/postComment # post a comment on a picture with POST\n request\n ./lambdas/getComments?file=filename.jpg # get comments on a\n picture/video with GET request\n`)),mdx(\"p\",null,`Here is a detailed code for uploading the file. We upload one file at a\ntime, but the client code post to the lambda endpoint individually for\neach file`),mdx(\"p\",null,`This generates a pre-signed URL to allow the client-side JS (not the\nlambda itself) to directly upload to S3, and also posts a row in the S3\nto the filename that will. It is very similar code in\nto\\xA0`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://cmdcolin.github.io/2020-12-24.html\"}),\"https://cmdcolin.github.io/2020-12-24.html\")),mdx(\"p\",null,\"./lambdas/postFile/app.js\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),`'use strict'\n\nconst AWS = require('aws-sdk')\nconst multipart = require('./multipart')\nAWS.config.update({ region: process.env.AWS_REGION })\nconst s3 = new AWS.S3()\n\n// Change this value to adjust the signed URL's expiration\nconst URL_EXPIRATION_SECONDS = 300\n\n// Main Lambda entry point\nexports.handler = async event => {\n  return await getUploadURL(event)\n}\n\nconst { AWS_REGION: region } = process.env\n\nconst dynamodb = new AWS.DynamoDB({ apiVersion: '2012-08-10', region })\n\nasync function uploadPic({\n  timestamp,\n  filename,\n  message,\n  user,\n  date,\n  contentType,\n}) {\n  const params = {\n    Item: {\n      timestamp: {\n        N: \\`\\${timestamp}\\`,\n      },\n      filename: {\n        S: filename,\n      },\n      message: {\n        S: message,\n      },\n      user: {\n        S: user,\n      },\n      date: {\n        S: date,\n      },\n      contentType: {\n        S: contentType,\n      },\n    },\n    TableName: 'files',\n  }\n  return dynamodb.putItem(params).promise()\n}\n\nconst getUploadURL = async function (event) {\n  try {\n    const data = multipart.parse(event)\n    const { filename, contentType, user, message, date } = data\n    const timestamp = +Date.now()\n    const Key = \\`\\${timestamp}-\\${filename}\\` // Get signed URL from S3\n\n    const s3Params = {\n      Bucket: process.env.UploadBucket,\n      Key,\n      Expires: URL_EXPIRATION_SECONDS,\n      ContentType: contentType, // This ACL makes the uploaded object publicly readable. You must also uncomment // the extra permission for the Lambda function in the SAM template.\n\n      ACL: 'public-read',\n    }\n\n    const uploadURL = await s3.getSignedUrlPromise('putObject', s3Params)\n\n    await uploadPic({\n      timestamp,\n      filename: Key,\n      message,\n      user,\n      date,\n      contentType,\n    })\n\n    return JSON.stringify({\n      uploadURL,\n      Key,\n    })\n  } catch (e) {\n    const response = {\n      statusCode: 500,\n      body: JSON.stringify({ message: \\`\\${e}\\` }),\n    }\n    return response\n  }\n}\n`)),mdx(\"p\",null,\"./lambdas/getFiles/app.js\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),`// eslint-disable-next-line import/no-unresolved\nconst AWS = require('aws-sdk')\n\nconst { AWS_REGION: region } = process.env\n\nconst docClient = new AWS.DynamoDB.DocumentClient()\n\nconst getItems = function () {\n  const params = {\n    TableName: 'files',\n  }\n\n  return docClient.scan(params).promise()\n}\n\nexports.handler = async event => {\n  try {\n    const result = await getItems()\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    }\n  } catch (e) {\n    return {\n      statusCode: 400,\n      body: JSON.stringify({ message: \\`\\${e}\\` }),\n    }\n  }\n}\n`)),mdx(\"p\",null,\"./frontend/src/App.tsx (excerpt)\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-tsx\"}),`async function myfetch(params: string, opts?: any) {\n  const response = await fetch(params, opts)\n  if (!response.ok) {\n    throw new Error(\\`HTTP \\${response.status}\n \\${response.statusText}\\`)\n  }\n  return response.json()\n}\n\nfunction UploadDialog({\n  open,\n  onClose,\n}: {\n  open: boolean\n  onClose: () => void\n}) {\n  const [images, setImages] = useState<FileList>()\n  const [error, setError] = useState<Error>()\n  const [loading, setLoading] = useState(false)\n  const [total, setTotal] = useState(0)\n  const [completed, setCompleted] = useState(0)\n  const [user, setUser] = useState('')\n  const [message, setMessage] = useState('')\n  const classes = useStyles()\n\n  const handleClose = () => {\n    setError(undefined)\n    setLoading(false)\n    setImages(undefined)\n    setCompleted(0)\n    setTotal(0)\n    setMessage('')\n    onClose()\n  }\n\n  return (\n    <Dialog onClose={handleClose} open={open}>\n      \\xA0 \\xA0 \\xA0<DialogTitle>upload a file (supports picture or video)</DialogTitle>\\xA0\n      \\xA0 \\xA0<DialogContent>\n        \\xA0 \\xA0 \\xA0 \\xA0<label htmlFor=\"user\">name (optional) </label>\n        \\xA0 \\xA0 \\xA0 \\xA0<input\n          type=\"text\"\n          value={user}\n          onChange={event => setUser(event.target.value)}\n          id=\"user\"\n        />\n        \\xA0 \\xA0 \\xA0 \\xA0<br />\\xA0 \\xA0 \\xA0 \\xA0<label htmlFor=\"user\">message (optional) </label>\n        \\xA0 \\xA0 \\xA0 \\xA0\n        <input\n          type=\"text\"\n          value={message}\n          onChange={event => setMessage(event.target.value)}\n          id=\"message\"\n        />\n        \\xA0 \\xA0 \\xA0 \\xA0<br />\n        \\xA0 \\xA0 \\xA0 \\xA0\n        <input\n          multiple\n          type=\"file\"\n          onChange={e => {\n            let files = e.target.files\n            if (files && files.length) {\n              setImages(files)\n            }\n          }}\n        />\n        \\xA0 \\xA0 \\xA0 \\xA0{error ? (\n          <div className={classes.error}>{\\`\\${error}\\`}</div>\n        ) : loading ? (\n          \\`Uploading...\\${completed}/\\${total}\\`\n        ) : completed ? (\n          <h2>Uploaded </h2>\n        ) : null}\\xA0 \\xA0 \\xA0 \\xA0\n        <DialogActions>\n          \\xA0 \\xA0 \\xA0 \\xA0 \\xA0\n          <Button\n            style={{ textTransform: 'none' }}\n            onClick={async () => {\n              try {\n                if (images) {\n                  setLoading(true)\n                  setError(undefined)\n                  setCompleted(0)\n                  setTotal(images.length)\n                  await Promise.all(\n                    Array.from(images).map(async image => {\n                      const data = new FormData()\n                      data.append('message', message)\n                      data.append('user', user)\n                      data.append('date', new Date().toLocaleString())\n                      data.append('filename', image.name)\n                      data.append('contentType', image.type)\n                      const res = await myfetch(API_ENDPOINT + '/postFile', {\n                        method: 'POST',\n                        body: data,\n                      })\n\n                      await myfetch(res.uploadURL, {\n                        method: 'PUT',\n                        body: image,\n                      })\n\n                      setCompleted(completed => completed + 1)\n                    }),\n                  )\n                  setTimeout(() => {\n                    handleClose()\n                  }, 500)\n                }\n              } catch (e) {\n                setError(e)\n              }\n            }}\n            color=\"primary\"\n          >\n            \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0upload \\xA0 \\xA0 \\xA0 \\xA0 \\xA0\n          </Button>\n          \\xA0 \\xA0 \\xA0 \\xA0 \\xA0<Button\n            onClick={handleClose}\n            color=\"primary\"\n            style={{ textTransform: 'none' }}\n          >\n            \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0cancel \\xA0 \\xA0 \\xA0 \\xA0 \\xA0\n          </Button>\\xA0 \\xA0 \\xA0 \\xA0\n        </DialogActions>\n        \\xA0 \\xA0 \\xA0\n      </DialogContent>\\xA0 \\xA0\n    </Dialog>\n  )\n}\n`)),mdx(\"p\",null,\"template.yaml for AWS\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),` AWSTemplateFormatVersion: 2010-09-09\n Transform: AWS::Serverless-2016-10-31\n Description: S3 Uploader\n\n Resources:\n \\xA0filesDynamoDBTable:\n \\xA0 \\xA0Type: AWS::DynamoDB::Table\n \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0AttributeDefinitions:\n \\xA0 \\xA0 \\xA0 \\xA0- AttributeName: \"timestamp\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0AttributeType: \"N\"\n \\xA0 \\xA0 \\xA0KeySchema:\n \\xA0 \\xA0 \\xA0 \\xA0- AttributeName: \"timestamp\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0KeyType: \"HASH\"\n \\xA0 \\xA0 \\xA0ProvisionedThroughput:\n \\xA0 \\xA0 \\xA0 \\xA0ReadCapacityUnits: \"5\"\n \\xA0 \\xA0 \\xA0 \\xA0WriteCapacityUnits: \"5\"\n \\xA0 \\xA0 \\xA0TableName: \"files\"\n\n \\xA0# HTTP API\n \\xA0MyApi:\n \\xA0 \\xA0Type: AWS::Serverless::HttpApi\n \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0# CORS configuration - this is open for development only and\n should be restricted in prod.\n \\xA0 \\xA0 \\xA0# See\n <https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html>\n \\xA0 \\xA0 \\xA0CorsConfiguration:\n \\xA0 \\xA0 \\xA0 \\xA0AllowMethods:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- GET\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- POST\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- DELETE\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- OPTIONS\n \\xA0 \\xA0 \\xA0 \\xA0AllowHeaders:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- \"*\"\n \\xA0 \\xA0 \\xA0 \\xA0AllowOrigins:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- \"*\"\n\n \\xA0UploadRequestFunction:\n \\xA0 \\xA0Type: AWS::Serverless::Function\n \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0CodeUri: lambdas/postFile/\n \\xA0 \\xA0 \\xA0Handler: app.handler\n \\xA0 \\xA0 \\xA0Runtime: nodejs12.x\n \\xA0 \\xA0 \\xA0Timeout: 3\n \\xA0 \\xA0 \\xA0MemorySize: 128\n \\xA0 \\xA0 \\xA0Environment:\n \\xA0 \\xA0 \\xA0 \\xA0Variables:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0UploadBucket: !Ref S3UploadBucket\n \\xA0 \\xA0 \\xA0Policies:\n \\xA0 \\xA0 \\xA0 \\xA0- AmazonDynamoDBFullAccess\n \\xA0 \\xA0 \\xA0 \\xA0- S3WritePolicy:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0BucketName: !Ref S3UploadBucket\n \\xA0 \\xA0 \\xA0 \\xA0- Statement:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- Effect: Allow\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Resource: !Sub \"arn:aws:s3:::\\${S3UploadBucket}/\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Action:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- s3:putObjectAcl\n \\xA0 \\xA0 \\xA0Events:\n \\xA0 \\xA0 \\xA0 \\xA0UploadAssetAPI:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Type: HttpApi\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Path: /postFile\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Method: post\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0ApiId: !Ref MyApi\n\n\n \\xA0FileReadFunction:\n \\xA0 \\xA0Type: AWS::Serverless::Function\n \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0CodeUri: lambdas/getFiles/\n \\xA0 \\xA0 \\xA0Handler: app.handler\n \\xA0 \\xA0 \\xA0Runtime: nodejs12.x\n \\xA0 \\xA0 \\xA0Timeout: 3\n \\xA0 \\xA0 \\xA0MemorySize: 128\n \\xA0 \\xA0 \\xA0Policies:\n \\xA0 \\xA0 \\xA0 \\xA0- AmazonDynamoDBFullAccess\n \\xA0 \\xA0 \\xA0Events:\n \\xA0 \\xA0 \\xA0 \\xA0UploadAssetAPI:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Type: HttpApi\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Path: /getFiles\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0Method: get\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0ApiId: !Ref MyApi\n\n \\xA0## S3 bucket\n \\xA0S3UploadBucket:\n \\xA0 \\xA0Type: AWS::S3::Bucket\n \\xA0 \\xA0Properties:\n \\xA0 \\xA0 \\xA0CorsConfiguration:\n \\xA0 \\xA0 \\xA0 \\xA0CorsRules:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- AllowedHeaders:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- \"*\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0AllowedMethods:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- GET\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- PUT\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- HEAD\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0AllowedOrigins:\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- \"*\"\n\n\n ## Take a note of the outputs for deploying the workflow templates\n in this sample application\n Outputs:\n \\xA0APIendpoint:\n \\xA0 \\xA0Description: \"HTTP API endpoint URL\"\n \\xA0 \\xA0Value: !Sub\n \"https://\\${MyApi}.execute-api.\\${AWS::Region}.amazonaws.com\"\n \\xA0S3UploadBucketName:\n \\xA0 \\xA0Description: \"S3 bucket for application uploads\"\n \\xA0 \\xA0Value: !Ref \"S3UploadBucket\"\n\n`)),mdx(\"p\",null,`To display all the pictures I use a switch from video or img tag based\non contentType.startsWith('video'). I also use the\\xA0\"figcaption\" HTML tag\nto have a little caption on the pics/videos`),mdx(\"p\",null,\"./frontend/src/App.tsx\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),` function Media({\n \\xA0file,\n \\xA0style,\n \\xA0onClick,\n \\xA0children,\n }: {\n \\xA0file: File;\n \\xA0onClick?: Function;\n \\xA0style?: React.CSSProperties;\n \\xA0children?: React.ReactNode;\n }) {\n \\xA0const { filename, contentType } = file;\n \\xA0const src = \\`\\${BUCKET}/\\${filename}\\`;\n \\xA0return (\n \\xA0 \\xA0<figure style={{ display: \"inline-block\" }}>\n \\xA0 \\xA0 \\xA0<picture>\n \\xA0 \\xA0 \\xA0 \\xA0{contentType.startsWith(\"video\") ? (\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0<video style={style} src={src} controls onClick={onClick as\n any} />\n \\xA0 \\xA0 \\xA0 \\xA0) : (\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0<img style={style} src={src} onClick={onClick as any} />\n \\xA0 \\xA0 \\xA0 \\xA0)}\n \\xA0 \\xA0 \\xA0</picture>\n \\xA0 \\xA0 \\xA0<figcaption>{children}</figcaption>\n \\xA0 \\xA0</figure>\n \\xA0);\n }\n`)),mdx(\"p\",null,`Now the really fun part: if you get an image of a picture frame\nlike\\xA0`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T\"}),\"https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T\")),mdx(\"p\",null,\"You can make it a border for any image or video using border-image CSS\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),` \\xA0 \\xA0 style = {\n \\xA0 \\xA0 \\xA0 \\xA0 border: \"30px solid\",\n \\xA0 \\xA0 \\xA0 \\xA0 borderImage: \\`url(borders/\\${border}) 30 round\\`\n \\xA0 \\xA0 }\n`)),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"/media/638602799897329664_0.png\",alt:null}))),mdx(\"p\",null,\"Summary\"),mdx(\"p\",null,`The template.yaml automatically deploys the lambdas for postFile/getFile\nand the files table in dynamoDB`),mdx(\"p\",null,\"The React app uses postFile for each file in an \",mdx(\"inlineCode\",{parentName:\"p\"},'<input type=\"file\"/>'),`,\nthe code uses React hooks and functional components but is hopefully not\ntoo complex`),mdx(\"p\",null,`I also added commenting on photos. The code is not shown here but you\ncan look in the source code for details`),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"/media/638602799897329664_1.png\",alt:null}))),mdx(\"p\",null,`Overall this has been a good experience learning to develop this app and\nlearning to automate the cloud deployment is really good for ensuring\nreliability and fast iteration.`),mdx(\"p\",null,`Also quick note on serverless CLI vs aws-sam. I had tried a serverless\nCLI tutorial from another user but it didn't click with me, while the\naws-sam tutorial from\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1\"}),\"https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1\"),`\\xA0was\na great kick start for me. I am sure the serverless CLI is great too and\nit ensures a bit less vendor lock in, but then is also a little bit\nremoved from the native aws config schemas. Probably fine though`),mdx(\"p\",null,\"Source code\\xA0\",mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/cmdcolin/aws_photo_gallery/\"}),\"https://github.com/cmdcolin/aws_photo_gallery/\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}