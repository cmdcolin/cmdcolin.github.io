{"pageProps":{"post":{"title":"Making a serverless website for photo upload pt. 1","date":"2020-12-24","slug":"2020-12-24","html":"<p>I set out to make a serverless website for photo uploads. Our dearly\ndeparted dixie dog needed a place to have photo uploads.</p>\n<p>I didn't want to get charged dollars per month for a running ec2\ninstance, so I wanted something that was lightweight e.g. serverless,\nand easy</p>\n<p>I decided to follow this tutorial</p>\n<p><a href=\"https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/\">https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/</a></p>\n<p>I really liked the command line deployment (aws-sam) because fiddling\naround with the AWS web based control panel is ridiculously complicated</p>\n<p>For example I also tried following this tutorial which uses the web\nbased UI (<a href=\"https://www.youtube.com/watch?v=mw_-0iCVpUc\">https://www.youtube.com/watch?v=mw_-0iCVpUc</a>) and it just did\nnot work for me....I couldn't stay focused (blame ADHD or just my CLI\nobsession?) and certain things like \"Execution role\" that they say to\nmodify are not there in the web UI anymore, so I just gave up (I did try\nthough!)</p>\n<p>To install aws-sam I used homebrew</p>\n<pre class=\"shiki\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">brew tap aws/tap</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">brew install aws-sam-cli</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">brew install aws-sam-cli </span><span style=\"color: #767C9DB0\"># I had to run the install command twice ref https://github.com/aws/aws-sam-cli/issues/2320#issuecomment-721414971</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">git clone https://github.com/aws-samples/amazon-s3-presigned-urls-aws-sam</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">cd amazon-s3-presigned-urls-aws-sam</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">sam deploy --guided</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0\"># proceeds with a guided installation, I used all defaults except I</span></span>\n<span class=\"line\"><span style=\"color: #767C9DB0\"># made \"UploadRequestFunction may not have authorization definedIs</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">Is this okay</span><span style=\"color: #91B4D5\">?</span><span style=\"color: #A6ACCD\"> [y/N]: y</span><span style=\"color: #A6ACCD\">\"</span></span></code></pre>\n<p><img src=\"/media/638408397901987840_0.png\" alt=\"\"></p>\n<p>They then in the tutorial describe trying to use postman to test</p>\n<p>I test with <code>curl</code> instead</p>\n<pre class=\"shiki\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">curl </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://fjgbqj5436.execute-api.us-east-2.amazonaws.com/uploads</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">uploadURL</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">Key</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">112162.jpg</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>The premise of this is you make a request, and then the response from\nthe API is a pre-signed URL that then allows you to upload directly to\nS3. You can use <code>curl &#x3C;url> --upload-file yourfile.jpg</code>. This\nautomatically does a PUT request to the s3 bucket (yes, this is talking\ndirectly to s3 now, not the lambda! the lambda is just for generating\nthe \"pre-signed URL\" to let you upload). Careful to copy it exactly as\nis</p>\n<pre class=\"shiki\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">curl </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\"> --upload-file test.jpg</span></span></code></pre>\n<p>There is no response, but I can then check the s3 console and see the\nfile upload is successful (all files are renamed)</p>\n<p><img src=\"/media/638408397901987840_1.png\" alt=\"\"></p>\n<p>Figure shows that the file upload is successful :)</p>\n<p>Then we can edit the file frontend/index.html from the repo we cloned to\ncontain the lambda with the /uploads/ suffix</p>\n<p>Then we manually upload this file to another s3 bucket or test it\nlocally</p>\n<pre class=\"shiki\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">aws s3 cp index.html s3://mybucket/</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0\"># then ...visit that in the browser</span></span></code></pre>\n<p>At this point the files are getting uploaded but not publicly\naccessible. To make them publicly accessible we uncomment the\nACL: 'public-read' in the getSignedURL/app.js folder in the github repo</p>\n<p><img src=\"/media/638408397901987840_3.png\" alt=\"\"></p>\n<p>Figure showing the public-read uncommented</p>\n<p><img src=\"/media/638408397901987840_4.png\" alt=\"\"></p>\n<p>Figure showing the lines that need uncommenting in template.yaml in the\nroot of the github repo that allows putObject in s3 with the public-read\nACL</p>\n<p>Re-run <code>sam deploy --guided</code>, same thing as at the start</p>\n<p>Now the objects are publicly accessible!</p>"}},"__N_SSG":true}