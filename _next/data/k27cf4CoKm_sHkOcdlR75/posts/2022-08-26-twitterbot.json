{"pageProps":{"post":{"title":"Making a twitter bot in the year 2022 with node.js","date":"2022-08-26","slug":"2022-08-26-twitterbot","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Recently, we made the logistic map fractal visualizer app, but, how do we keep\\nUSER ENGAGEMENT METRICS up? Gotta make a twitter bot to post fractals, that's\\nhow!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I found it somewhat tricky to get this working, because there is a lot of odd\\nlingo out there. There are libraries that may help you, but this post goes\\nthrough making an OAuth client in node.js to post to the twitter API with\\nfairly unabstracted code. OAuth still confuses me, but if you follow these\\nsteps, you can make a bot!\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Get your keys. I forget the exact procedure for this but go to\\nhttps://developer.twitter.com and sign up, register an \\\"app\\\" with them, and\\npoke around for awhile.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After sometime, you should get a screen that looks like this\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://github.com/cmdcolin/twitter_fractal_bot/blob/master/img/devpanel.png?raw=true\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 2\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make a repo with a couple dependencies\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"mkdir mybot\\ncd mybot\\nyarn init\\nyarn add node-fetch formdata-node oauth dotenv typescript\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Update package.json with a couple scripts to build these typescript files\\n(alternatively use ts-node or similar to run the raw ts files)\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n  \\\"dependencies\\\": {\\n    \\\"dotenv\\\": \\\"^16.0.1\\\",\\n    \\\"formdata-node\\\": \\\"^4.4.1\\\",\\n    \\\"node-fetch\\\": \\\"^3.2.10\\\",\\n    \\\"oauth\\\": \\\"^0.10.0\\\",\\n    \\\"typescript\\\": \\\"^4.7.4\\\"\\n  },\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"@types/node\\\": \\\"^18.7.9\\\",\\n    \\\"@types/oauth\\\": \\\"^0.9.1\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"tsc\\\",\\n    \\\"prepost\\\": \\\"yarn build\\\",\\n    \\\"post\\\": \\\"node dist/bot.js\\\"\\n  }\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And tsconfig.json file\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n  \\\"include\\\": [\\\"src\\\"],\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"esnext\\\",\\n    \\\"outDir\\\": \\\"dist\\\",\\n    \\\"types\\\": [\\\"node\\\"],\\n    \\\"lib\\\": [\\\"dom\\\", \\\"esnext\\\"],\\n    \\\"moduleResolution\\\": \\\"node\\\",\\n    \\\"declaration\\\": true,\\n    \\\"sourceMap\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"noImplicitReturns\\\": true,\\n    \\\"noFallthroughCasesInSwitch\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"allowJs\\\": true\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This compiles the \", _jsx(_components.code, {\n        children: \"src\"\n      }), \" folder and outputs js files to the \", _jsx(_components.code, {\n        children: \"dist\"\n      }), \" directory,\\nand we can run the \", _jsx(_components.code, {\n        children: \"dist/bot.js\"\n      }), \" file with node to post the file\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 4\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a .env file with your keys that you found in the above screenshot\\ncorresponding to the box1 (which gives you API_KEY/API_SECRET, sometimes also\\nreferred to as consumer keys in other documents) and box2 (which gives you\\nACCESS_TOKEN and ACCESS_TOKEN_SECRET) from\\nthe above screenshot\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"API_KEY=\\\"xxxxxxxxxxxxxxxxxxxxxxxxx\\\"\\nAPI_SECRET=\\\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\\"\\nACCESS_TOKEN=\\\"aaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\"\\nACCESS_TOKEN_SECRET=\\\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 5\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make the bot!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript\",\n        children: \"import fs from \\\"fs\\\";\\nimport * as dotenv from \\\"dotenv\\\";\\nimport OAuth from \\\"oauth\\\";\\nimport fetch, { RequestInit } from \\\"node-fetch\\\";\\nimport { FormData, File } from \\\"formdata-node\\\";\\n\\ndotenv.config();\\n\\nfunction p(r: number) {\\n  return r.toPrecision(5);\\n}\\n\\nasync function mfetch(url: string, params: RequestInit) {\\n  const response = await fetch(url, params);\\n\\n  if (!response.ok) {\\n    const text = await response.text();\\n    throw new Error(`HTTP ${response.status} ${text}`);\\n  }\\n  return response.json() as Promise<Record<string, unknown>>;\\n}\\n\\nfunction getAuth(oauth: OAuth.OAuth, url: string) {\\n  return oauth.authHeader(\\n    url,\\n    process.env.ACCESS_TOKEN as string,\\n    process.env.ACCESS_TOKEN_SECRET as string,\\n    \\\"post\\\"\\n  );\\n}\\n\\n(async () => {\\n  try {\\n    const client = new OAuth.OAuth(\\n      \\\"https://api.twitter.com/oauth/request_token\\\",\\n      \\\"https://api.twitter.com/oauth/access_token\\\",\\n      process.env.API_KEY as string,\\n      process.env.API_SECRET as string,\\n      \\\"1.0A\\\",\\n      null,\\n      \\\"HMAC-SHA1\\\"\\n    );\\n\\n    const picEndpoint = \\\"https://upload.twitter.com/1.1/media/upload.json\\\";\\n    const tweetEndpoint = \\\"https://api.twitter.com/2/tweets\\\";\\n    const clientName = \\\"v3CreateTweetJS\\\";\\n\\n    const form = new FormData();\\n    form.set(\\n      \\\"media\\\",\\n      new File([fs.readFileSync(\\\"yourpicture.png\\\")], \\\"yourpicture.png\\\")\\n    );\\n\\n    // first post a picture\\n    const response1 = await mfetch(picEndpoint, {\\n      headers: {\\n        Authorization: getAuth(client, picEndpoint),\\n        \\\"user-agent\\\": clientName,\\n      },\\n      method: \\\"POST\\\",\\n      //@ts-ignore\\n      body: form,\\n    });\\n\\n    // then post a tweet, referring to the media_id_string from response1\\n    const response2 = await mfetch(tweetEndpoint, {\\n      headers: {\\n        Authorization: getAuth(client, tweetEndpoint),\\n        \\\"user-agent\\\": clientName,\\n        \\\"content-type\\\": \\\"application/json\\\",\\n        accept: \\\"application/json\\\",\\n      },\\n      body: JSON.stringify({\\n        media: { media_ids: [response1.media_id_string] },\\n        text: `min_x=${p(minX)},max_x=${p(maxX)},min_r=${p(minR)},max_r=${p(\\n          maxR\\n        )},diff_x=${p(maxX - minX)},diff_r=${p(maxR - minR)} ${url}`,\\n      }),\\n      method: \\\"post\\\",\\n    });\\n    console.log(response2);\\n  } catch (e) {\\n    console.error(e);\\n    process.exit(1);\\n  }\\n})();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 6\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that you have the bot, you can run it locally with \", _jsx(_components.code, {\n        children: \"yarn post\"\n      }), \" (runs the\\n\\\"post\\\" script in \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \") to test it out\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 7\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now to create a github action to run the bot. Add you github secret tokens\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Navigate to your repo's settings page, then go to Secrets->Actions and paste\\nthe keys one by one, see below screenshot\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://user-images.githubusercontent.com/6511937/187038172-80b35e34-03dd-4613-b6f6-9f8e25d2fc34.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Step 8\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a file with the path \", _jsx(_components.code, {\n        children: \".github/workflows/post.yml\"\n      }), \" in your repo to make the post\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use a cron/scheduled workflow in the github action, which the below\\nexample does\\n\", _jsx(_components.a, {\n        href: \"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\",\n        children: \"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The below github action posts every 5 hours on the hour (see\\n\", _jsx(_components.a, {\n        href: \"crontab.guru\",\n        children: \"https://crontab.guru/\"\n      }), \" for more info on cron syntax)\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"name: Post tweet\\non:\\n  schedule:\\n    - cron: \\\"0 */5 * * *\\\"\\n\\njobs:\\n  test:\\n    name: Post tweet\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n      - name: Use Node.js 14.x\\n        uses: actions/setup-node@v2\\n        with:\\n          node-version: '14'\\n      - name: Install deps (with cache)\\n        uses: bahmutov/npm-install@v1\\n      - name: Post tweet\\n        env:\\n          API_KEY: ${{ secrets.API_KEY }}\\n          API_SECRET: ${{ secrets.API_SECRET }}\\n          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\\n          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}\\n        run: yarn post\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See\\n\", _jsx(_components.a, {\n        href: \"https://github.com/cmdcolin/twitter_fractal_bot\",\n        children: \"https://github.com/cmdcolin/twitter_fractal_bot\"\n      }), \"\\nfor working example. I could have, in retrospect, used a library like \", _jsx(_components.code, {\n        children: \"twit\"\n      }), \"\\n(\", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/twit\",\n        children: \"https://www.npmjs.com/package/twit\"\n      }), \" but\\nthis code sample is not substantially more complicated than using the \", _jsx(_components.code, {\n        children: \"twit\"\n      }), \"\\nlibrary.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also adapt this to post only when you push to your repo, or release a\\nnew version from your repo!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}