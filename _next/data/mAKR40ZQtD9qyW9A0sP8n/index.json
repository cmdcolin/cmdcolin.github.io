{"pageProps":{"allPosts":[{"title":"Command line productivity stuff and misc","date":"2023-03-25","slug":"2023-03-25-commandlinestuff","html":"<p>In 2016, I wrote a list of things that I found to be useful or interesting\ninformation about the work I did at the time\n<a href=\"https://cmdcolin.github.io/posts/2016-04-06\">https://cmdcolin.github.io/posts/2016-04-06</a></p>\n<p>I thought it would be interesting to do the same now</p>\n<h2 id=\"aliases\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#aliases\"><a href=\"#aliases\" style=\"margin-right: 10px\">#</a></a>Aliases</h2>\n<p>I use many \"double tap\" aliases for lots of things. They are not very 'mnemonic'\nbut for my personal machine, but i like the action of double tapping a key</p>\n<ul>\n<li><code>qq</code> - runs <code>exit</code> to exit shell</li>\n<li><code>ss</code> - runs <code>yarn start</code></li>\n<li><code>yy</code> - runs <code>yarn lint</code></li>\n<li><code>bb</code> - one of my favorite non-obvious ones, it lists all git branches recently\nused in a fzf window\n<code>git branch --sort=-committerdate| fzf --height=20% |xargs git checkout</code></li>\n<li><code>ccc</code> - runs <code>yarn test --maxWorkers=50%</code> - my audio glitches out without the\nmaxWorkers</li>\n<li><code>ee</code> - runs <code>cargo run</code></li>\n<li><code>g</code> - <code>git status</code>. i type out git for many other commands but i check git\nstatus a lot</li>\n<li><code>gd</code> - <code>git diff</code></li>\n<li><code>gggg</code> - runs <code>git add . &#x26;&#x26; git commit --amend --no-edit</code> so I can keep adding\nto a commit</li>\n</ul>\n<p>Also recommend <a href=\"https://github.com/rupa/z\">https://github.com/rupa/z</a>, very quickly jump to commonly used\ndirectories. I alias z to p because i try to type with my right hand maxWorkerss</p>\n<h2 id=\"neovimeditor-stuff\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#neovimeditor-stuff\"><a href=\"#neovimeditor-stuff\" style=\"margin-right: 10px\">#</a></a>Neovim/editor stuff</h2>\n<p>I use neovim, I run lots of stuff off nightly, and my setup changes a lot just\nas I like to tweak things, but here are some currently nice things I like about\nmy workflow</p>\n<ul>\n<li>\n<p>Visual select block, use <code>gq</code> to wrap code comments in vim (or <code>gw</code> with lsp\nenabled, see reason why <code>gw</code> here\n<a href=\"https://vi.stackexchange.com/questions/39200/wrapping-comment-in-visual-mode-not-working-with-gq\">https://vi.stackexchange.com/questions/39200/wrapping-comment-in-visual-mode-not-working-with-gq</a>)</p>\n</li>\n<li>\n<p>Add <code>proseWrap: always</code> to your .prettierrc to wrap e.g. the lines in markdown\nfiles <a href=\"https://prettier.io/docs/en/options.html#prose-wrap\">https://prettier.io/docs/en/options.html#prose-wrap</a></p>\n</li>\n<li>\n<p>Setting up \"LSP support\" in vim can be hard, but rewarding...\n<a href=\"https://github.com/VonHeikemen/lsp-zero.nvim\">https://github.com/VonHeikemen/lsp-zero.nvim</a> makes it easier</p>\n</li>\n<li>\n<p>Setup format on save. There are many ways to do it, but try to find out some\nway that works for you! For me, I use formatter.nvim to run prettier on most\nweb dev filetypes. I use formatter.nvim and not a LSP-based format like\nnull-ls because I just haven't gotten it to work with null-ls, but I don't\nthink the formatter.nvim is a bad approach either -- formatter.nvim is a bit\n'simpler' compared to LSP based setups</p>\n</li>\n<li>\n<p>To search files in a current directory, I hit <code>,gg</code> (comma is my leader key)\nwhich triggers\n<code>map('n', '&#x3C;leader>gg', '&#x3C;cmd>Telescope git_files&#x3C;cr>', default_opts)</code>, to\nsearch by text, I use <code>,ff</code> (comma is my leader key) which triggers\n<code>map('n', '&#x3C;leader>ff', '&#x3C;cmd>Telescope live_grep&#x3C;cr>', default_opts)</code></p>\n</li>\n<li>\n<p>I do not use a 'sidebar file browser' like nerdtree or similar. As mentioned\nabove, I primarily navigate with <code>,gg</code> but I also use <code>vim-vinegar</code>, which\nlet's me hit <code>-</code> and that opens a file browser of the current directory, and I\ncan hop around and hit keys to rename (R), delete (D), create (%) new files in\nthe directory. I often go back to the zsh shell to do more sophisticated\noperations</p>\n</li>\n<li>\n<p>Snippets: to <code>console.log</code>, I created a snippet where I can type <code>cl</code>, then it\nwill popup an autocomplete window, which let's me choose to insert\n<code>console.log({|})</code> or <code>console.log(|)</code> where | indicates where the cursor goes\nafter hitting enter. The <code>console.log({})</code> is very handy because if you fill\nin <code>console.log({variable})</code> then the output will be <code>{variable:5}</code> so you get\nthe variable name and value easily (ref\n<a href=\"https://github.com/cmdcolin/dotfiles/blob/master/lua/snips.lua\">https://github.com/cmdcolin/dotfiles/blob/master/lua/snips.lua</a>)</p>\n</li>\n<li>\n<p>Weird keymap: I hit kk in normal mode it saves current file in neovim and 00\nexits. I like the double tap aliases, and I do not use hjkl for arrow keys.\nMaybe should learn...</p>\n</li>\n</ul>\n<h2 id=\"erogonomics\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#erogonomics\"><a href=\"#erogonomics\" style=\"margin-right: 10px\">#</a></a>Erogonomics</h2>\n<ul>\n<li>Watch out for pressuring too hard on armrests, can mess up your pinky\n<a href=\"https://cmdcolin.github.io/posts/2022-07-08-pinky\">https://cmdcolin.github.io/posts/2022-07-08-pinky</a></li>\n</ul>\n<h2 id=\"typescript\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#typescript\"><a href=\"#typescript\" style=\"margin-right: 10px\">#</a></a>Typescript</h2>\n<ul>\n<li>\n<p>Use <code>ts-expect-error</code> instead of <code>ts-ignore</code> -- probably a better intention\nmost of the time</p>\n</li>\n<li>\n<p>Use type inference as much as possible. This is just my personal opinion.</p>\n</li>\n</ul>\n<h2 id=\"web-dev\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#web-dev\"><a href=\"#web-dev\" style=\"margin-right: 10px\">#</a></a>Web dev</h2>\n<ul>\n<li>Try firefox profiler, it has built-in flamegraph style visualization. For\nChrome profiler, you can use an external tool <a href=\"https://speedscope.app/\">https://speedscope.app/</a> for\nsimilar</li>\n</ul>\n<h2 id=\"tmux\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tmux\"><a href=\"#tmux\" style=\"margin-right: 10px\">#</a></a>Tmux</h2>\n<ul>\n<li>\n<p><code>Ctrl+]</code> is my prefix in tmux. I use my right hand entirely to type it, then I\nsplit horizontally with <code>-</code> and vertically with <code>=</code>. My general coding\ngenerally has my screen split vertically with a horizontal on one or both\nsides</p>\n</li>\n<li>\n<p>Add the weather in your tmux footer I use\n<code>set -g status-left '#(curl \"wttr.in/Albuquerque?u&#x26;format=3\") ' </code></p>\n</li>\n<li>\n<p>Enable truecolors in tmux! On my machine, I needed the following in my\ntmux.conf:</p>\n</li>\n</ul>\n<pre><code>set -g default-terminal \"tmux-256color\"\nset -ag terminal-overrides \",xterm-256color:RGB\"\n</code></pre>\n<p>Without this, all the neovim color schemes I tried looked not just subtly off,\nbut significantly off, because it had only 256 colors without it (way less than\nthe millions with true color). Resources</p>\n<p><a href=\"https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6\">https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6</a>\n<a href=\"https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/\">https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/</a></p>\n<h2 id=\"music-related\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#music-related\"><a href=\"#music-related\" style=\"margin-right: 10px\">#</a></a>Music related</h2>\n<ul>\n<li><code>yda</code> - alias for getting a song from youtube\n<code>\"youtube-dl -f 'bestaudio[ext=m4a]' \"</code></li>\n<li><code>vaporwave</code> - a function to slow down the audio for a track with ffmpeg</li>\n</ul>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">vaporwave()</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">ffmpeg</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">$1</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-af</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">asetrate=44100*</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #5DE4C7\">2</span><span style=\"color: #91B4D5\">:-</span><span style=\"color: #5DE4C7\">0.66</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\">,aresample=44100</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">\"`</span><span style=\"color: #91B4D5\">basename</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">$1</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">.m4a</span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">.vaporwave.m4a</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>example usage:</p>\n<pre><code>vaporwave file.mp3 # default slowdown factor of 0.66, outputs file.vaporwave.mp3\nvaporwave file.mp3 0.5 # custom slowdown factor, outputs file.vaporwave.mp3\n</code></pre>\n<h2 id=\"audio-players\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#audio-players\"><a href=\"#audio-players\" style=\"margin-right: 10px\">#</a></a>Audio players</h2>\n<p>I worked on a couple projects to make custom music players to scratch my own\nitch. I made a Rust one, to try to replace foobar2000, hoping to go back to the\ndays of yore when I used a desktop player, and then a web based one when I\nrealized I just listen to alot of youtube anyways now</p>\n<ul>\n<li>Rust+GTK4 app <a href=\"https://github.com/cmdcolin/fml9000\">https://github.com/cmdcolin/fml9000</a></li>\n<li>Web based <a href=\"https://cmdcolin.github.io/ytshuffle/\">https://cmdcolin.github.io/ytshuffle/</a></li>\n</ul>\n<p>Currently attempting to get the web based version approved by youtube compliance\nbecause they give you quite a limited number of API requests, so unless I want\nother users of my app to supply their own key, it seems prudent to get it\napproved</p>\n<h2 id=\"footnote-1---background-to-the-command-line-for-me\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1---background-to-the-command-line-for-me\"><a href=\"#footnote-1---background-to-the-command-line-for-me\" style=\"margin-right: 10px\">#</a></a>Footnote 1 - Background to the command line for me</h2>\n<p>When I graduated college, I did a fair amount of command line, but also used\nIDEs, and wasn't really tied into GUI</p>\n<p>When I started my first job in 2013, I had to ssh into machines a lot where I\nran data analysis and maintained websites. I used vim without any plugins,\npretty raw experience, hand editing indents, etc. Example of a vimrc I used in\n2018, first commit to my dotfiles repo</p>\n<p><a href=\"https://github.com/cmdcolin/dotfiles/commit/54ec820891da67faddb82367d581dd39d1806d78#diff-7ab9074b6049f19f707c3afd253acaed88cef43694799887ba8c01c320bc421e\">https://github.com/cmdcolin/dotfiles/commit/54ec820891da67faddb82367d581dd39d1806d78#diff-7ab9074b6049f19f707c3afd253acaed88cef43694799887ba8c01c320bc421e</a></p>\n<p>My setup has evolved many times since then. Things change! Even now, I am not\nvery vim-literate and don't understand most other people's dotfiles, but it's a\ncontinuous learning process, and I also hope blogposts like this might help\npeople understand where I come from</p>"},{"title":"Things typescript didn't catch that should probably be lint rules","date":"2023-02-05","slug":"2023-02-05-typescript-gotchas","html":"<p>This is a short list of silly things that I wish Typescript would have caught\nfor me, but are silly logic errors</p>\n<h2 id=\"using-objectentries-accidentally-instead-of-objectfromentries\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-objectentries-accidentally-instead-of-objectfromentries\"><a href=\"#using-objectentries-accidentally-instead-of-objectfromentries\" style=\"margin-right: 10px\">#</a></a>Using <code>Object.entries</code> accidentally instead of <code>Object.fromEntries</code></h2>\n<p>Typescript will not complain if you use <code>Object.entries</code> instead of\n<code>Object.fromEntries</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">stuff</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #5DE4C7\">2</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #5DE4C7\">3</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// woops, meant to use Object.fromEntries</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">Object</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">entries</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">stuff</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">entry</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">entry</span><span style=\"color: #A6ACCD\">, {</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">id</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">entry</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}]))</span></span></code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/FAYw9gdgzgLgBLArgM2QXgNoEYA0AmHAZgF1gB5AIwCsBTEGAOhohgCcBLGqACiVQYC2AQwAO3ZmwCeaAHwYJrSTjgBvdgBMAXAskBfYgEoDQA\">playground</a></p>\n<p>Summary: should probably be a lint rule (a \"types required\" lint rule, a la\n@typescript-eslint) not to accept arrays for Object.entries</p>\n<p>Update 02-27-23: Proposing this rule here <a href=\"https://github.com/typescript-eslint/typescript-eslint/issues/6537\">https://github.com/typescript-eslint/typescript-eslint/issues/6537</a></p>\n<h2 id=\"passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally\"><a href=\"#passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally\" style=\"margin-right: 10px\">#</a></a>Passing garbage to the second argument of Array.prototype.map accidentally</h2>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">doStuff</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">arr</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">number</span><span style=\"color: #A6ACCD\">[], </span><span style=\"color: #E4F0FB\">extra</span><span style=\"color: #91B4D5\">?:</span><span style=\"color: #A6ACCD\"> { sayHiToMom</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">boolean</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">extra</span><span style=\"color: #A6ACCD\">?.</span><span style=\"color: #E4F0FB\">sayHiToMom</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Hi mom</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">arr</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">stuff</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #5DE4C7\">2</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #5DE4C7\">3</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// woops, meant to pass that as second argument to doStuff</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FBD0\">doStuff</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">stuff</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">a</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">a</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">*</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">2</span><span style=\"color: #A6ACCD\">, {</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">sayHiToMom</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}))</span></span></code></pre>\n<p><a href=\"https://www.typescriptlang.org/play?#code/FAMwrgdgxgLglgewgAgCYIMozCEAKAQwCciAuCMAWwCMBTIgbQF0AaZWgDxiIIH5SA3gGcCATwAScACoIAsgkqlqCBABtaBCAF8AlMgHBkyOPk7c+AOhETpchXoNGjUJELW0LqhAHM8AcklkSgU-HUNkLXCiWmwiFGIiYEjgFwghGGR0nBAAXgYARhYAJhYAZiZgdCxsvCzcC0oCAAdCHIA+AgAqEuExSRl5RW4wWl0dIA\">playground</a></p>\n<p>This one would be difficult for typescript to catch, the second arg is\n\"thisArg\", what the callback refers to as <code>this</code></p>\n<p>Summary: should probably be a lint rule to avoid this second arg, as it is\nobscure</p>\n<p>Update 02-27-23: This lint rule exists already :)\n<a href=\"https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-method-this-argument.md#disallow-using-the-this-argument-in-array-methods\">https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-method-this-argument.md#disallow-using-the-this-argument-in-array-methods</a></p>\n<h2 id=\"any-others\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#any-others\"><a href=\"#any-others\" style=\"margin-right: 10px\">#</a></a>Any others?</h2>\n<p>Any other ones that you find in your work? This is just from the past week for\nme :)</p>\n<p>I will need to learn how to make eslint rules!</p>"},{"title":"The devinterrupted'ening of /r/programming","date":"2022-12-27","slug":"2022-12-27-devinterrupted","html":"<p>Complaining about spammers is kind of a futile endeavor, and in this case, it\neven seems that there are people behind it which kinda makes me feel bad to\ncomplain about it, but I keep seeing this spam-type substance on my sacred\nforums.</p>\n<p>Many of these posts come from a blog called devinterrupted. They post things\nrelated to \"engineering management\" type topics. And, they often \"hit a chord\"\nand get highly upvoted and replied to. It's often the type of thing everyone can\nadd their two cents on, or offload some steam, or pontificate.</p>\n<p>This wouldn't all be so bad, but it is sometimes posted with formulaic titles,\ncreated by sock puppet accounts(?) and promoting a specific company (linearB). I\ngathered as many posts from them as I can, helpfully grouped into clickbait-y\ncategories.</p>\n<p>Update 2023-01-06: a Reddit user reached out to me who is quite knowledgeable\nabout astroturfing campaigns and confirmed my suspicions here that it's all sock\npuppet accounts</p>\n<h2 id=\"titleslinks-to-posts\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#titleslinks-to-posts\"><a href=\"#titleslinks-to-posts\" style=\"margin-right: 10px\">#</a></a>Titles/links to posts</h2>\n<h3 id=\"hot-takes-and-pulling-no-punches\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#hot-takes-and-pulling-no-punches\"><a href=\"#hot-takes-and-pulling-no-punches\" style=\"margin-right: 10px\">#</a></a>Hot takes and pulling no punches</h3>\n<ul>\n<li>\n<p>“There should never be coding exercises in technical interviews. It favors\npeople who have time to do them. Disfavors people with FT jobs and families.\nPlus, your job won’t have people over your shoulder watching you code.” My\nfavorite hot take from a panel on 'Treating Devs Like Human Beings.'\n<a href=\"https://www.reddit.com/r/programming/comments/zkj6pb/there_should_never_be_coding_exercises_in/\">https://www.reddit.com/r/programming/comments/zkj6pb/there_should_never_be_coding_exercises_in/</a>\n(14k comments, 8.7k, Dec 12 2022, one of the most upvoted articles of the year\non reddit /r/programming)</p>\n</li>\n<li>\n<p>“We all use products that are amazing when the company is like 5 devs, just\nbuilding what makes sense. They grow &#x26; through failures of leadership, they\nend up with bloated product teams that don't understand the work of\ndevelopers.\" Former GitHub VP pulling no punches in recent pod on state of\ntech (413 comments, 3.2k, Dec 20, 2022)\n<a href=\"https://www.reddit.com/r/programming/comments/zr9tsr/we_all_use_products_that_are_amazing_when_the/\">https://www.reddit.com/r/programming/comments/zr9tsr/we_all_use_products_that_are_amazing_when_the/</a></p>\n</li>\n</ul>\n<h3 id=\"tils\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tils\"><a href=\"#tils\" style=\"margin-right: 10px\">#</a></a>TIL's</h3>\n<ul>\n<li>\n<p>TIL That developers in larger companies spend 2.5 more hours a week/10 more\nhours a month in meetings than devs in smaller orgs. It's been dubbed the\n\"coordination tax.\"\n(<a href=\"https://www.reddit.com/r/programming/comments/zg6ec9/til_that_developers_in_larger_companies_spend_25/\">https://www.reddit.com/r/programming/comments/zg6ec9/til_that_developers_in_larger_companies_spend_25/</a>,\n517 comments, 4.5k, Dec 8, 2022)</p>\n</li>\n<li>\n<p>TIL 9 out of 10 devs said they would give up 24% of their lifetime earnings if\nthey got more meaning in their jobs. Also, 84% say they're disengaged at work\nand don't trust their company leaders.\n<a href=\"https://www.reddit.com/r/webdev/comments/u9ogin/til_9_out_of_10_devs_said_they_would_give_up_24/\">https://www.reddit.com/r/webdev/comments/u9ogin/til_9_out_of_10_devs_said_they_would_give_up_24/</a></p>\n</li>\n<li>\n<p>TIL about the \"Intent-Perception Gap\" in programming. Best exemplified when a\nCTO or manager casually suggests something to their developers they take it as\na new work commandment or direction for their team.\n<a href=\"https://www.reddit.com/r/programming/comments/u7dv5m/til_about_the_intentperception_gap_in_programming/\">https://www.reddit.com/r/programming/comments/u7dv5m/til_about_the_intentperception_gap_in_programming/</a></p>\n</li>\n<li>\n<p>TIL after auditing 2,000 dev teams, data scientists found that programmers are\nwaiting on average 4+ days for their review requests to be picked up by\nother ... (partial result from google, post super deleted\n<a href=\"https://www.reddit.com/r/gamedev/comments/xh649i/deleted_by_user/\">https://www.reddit.com/r/gamedev/comments/xh649i/deleted_by_user/</a>)</p>\n</li>\n</ul>\n<h3 id=\"cool-convos\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cool-convos\"><a href=\"#cool-convos\" style=\"margin-right: 10px\">#</a></a>Cool convos</h3>\n<ul>\n<li>\n<p>\"Dev burnout drastically decreases when you actually ship things regularly.\nBurnout is caused by crap like toil, rework and spending too much mental\nenergy on bottlenecks.\" Cool conversation with the head engineer of Slack on\nhow burnout is caused by all the things that keep devs from coding.\n(<a href=\"https://www.reddit.com/r/programming/comments/vold1e/dev_burnout_drastically_decreases_when_you/\">https://www.reddit.com/r/programming/comments/vold1e/dev_burnout_drastically_decreases_when_you/</a>\nalso\n<a href=\"https://www.reddit.com/r/programming/comments/zwjxsf/dev_burnout_drastically_decreases_when_your_team/\">https://www.reddit.com/r/programming/comments/zwjxsf/dev_burnout_drastically_decreases_when_your_team/</a>)</p>\n</li>\n<li>\n<p>\"Dev managers' most overlooked responsibility is to treat dev bandwidth as a\nvaluable, limited resource. It's the highest leverage for every\nsoftware-driven company and needs to be calculated as such.\" Cool convo with\nStripe's top engineer on how the dev org connects to the rest of the company\n<a href=\"https://www.reddit.com/r/webdev/comments/wwsrw5/dev_managers_most_overlooked_responsibility_is_to/\">https://www.reddit.com/r/webdev/comments/wwsrw5/dev_managers_most_overlooked_responsibility_is_to/</a></p>\n</li>\n<li>\n<p>\"Developers do nothing good after 45 hours of work.\" Fun conversation with\nhead developer of Netflix on the dumbest things engineering orgs do to kill\nproductivity - they really take a crap on retros. (Post deleted\n<a href=\"https://www.reddit.com/r/Python/comments/umhf4v/developers_do_nothing_good_after_45_hours_of_work/\">https://www.reddit.com/r/Python/comments/umhf4v/developers_do_nothing_good_after_45_hours_of_work/</a>)</p>\n</li>\n</ul>\n<h3 id=\"studies-and-interesting-cases\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#studies-and-interesting-cases\"><a href=\"#studies-and-interesting-cases\" style=\"margin-right: 10px\">#</a></a>Studies and interesting cases</h3>\n<ul>\n<li>\n<p>“The longer a developer assumes a code review will take, the longer they will\ntake to respond to it.” Interesting case for adding estimated review times to\npull requests (Post deleted after being called a sock puppet account\n<a href=\"https://www.reddit.com/r/programming/comments/z2bo70/comment/ixgfn2x/?utm_source=share&#x26;utm_medium=web2x&#x26;context=3\">https://www.reddit.com/r/programming/comments/z2bo70/comment/ixgfn2x/?utm_source=share&#x26;utm_medium=web2x&#x26;context=3</a>\n)</p>\n</li>\n<li>\n<p>Study: Developers spend over 2 days a week just waiting for other developers\nto review their code (Post deleted)\n<a href=\"https://www.reddit.com/r/java/comments/t5f6i7/study_developers_spend_over_2_days_a_week_just/\">https://www.reddit.com/r/java/comments/t5f6i7/study_developers_spend_over_2_days_a_week_just/</a></p>\n</li>\n<li>\n<p>\"The modern pull-request process has caused inefficiencies, particularly\nreview delays, as it isn't automated, so speed depends on the availability of\nthe right code reviewer.\" Interesting blog arguing for filtering pull requests\nbased on risk in order to promote \"continuous merge.\" (Post deleted, called\nout as a spammer account\n<a href=\"https://www.reddit.com/r/programming/comments/zdbtfr/the_modern_pullrequest_process_has_caused/\">https://www.reddit.com/r/programming/comments/zdbtfr/the_modern_pullrequest_process_has_caused/</a>)</p>\n</li>\n<li>\n<p>\"Too many companies treat dev burnout like a 24-hour flu where they can just\nsend a person home or tell them to take the day off.\" A trained\ntherapist-turned-engineer reveals how she diagnoses healthy dev teams from\nones doomed to fail.\n<a href=\"https://www.reddit.com/r/webdev/comments/wonkt6/too_many_companies_treat_dev_burnout_like_a/\">https://www.reddit.com/r/webdev/comments/wonkt6/too_many_companies_treat_dev_burnout_like_a/</a></p>\n</li>\n<li>\n<p>There was another highly upvoted post about \"cycle time\" posted to\n/r/programming probably that I cannot find now</p>\n</li>\n</ul>\n<h3 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h3>\n<p>The devinterrupted blog/podcast appears to be related to the linearB company,\nwho advocate a notion of \"cycle time\" (<a href=\"https://linearb.io/blog/cycle-time/\">https://linearb.io/blog/cycle-time/</a>) as a\ndeveloper metric engineering managers should look at, and they pontificate and\ninterview interesting people. It's not all bad. But, it's pretty much a ploy to\nget your clicks. They promote the \"gitStream\" product that linearB makes on all\nthe posts on devinterrupted. <a href=\"https://linearb.io/dev/gitstream/\">https://linearb.io/dev/gitstream/</a></p>\n<p>I'd recommend linearB stop posting these things, or pretending that they are not\nbehind these posts.</p>"},{"title":"The React tutorial I wish I had","date":"2022-11-20","slug":"2022-11-20-the-react-tutorial-i-wish-i-had","html":"<p>When I was learning React, I found it very challenging, and my eyes would glaze\nover any time I tried to learn (I wrote about my struggle here\n<a href=\"https://cmdcolin.github.io/posts/2020-07-04\">https://cmdcolin.github.io/posts/2020-07-04</a>)</p>\n<p>Here is a short tutorial that could help you get started. I wrote in my above\nblogpost that sitting down with a book was what finally helped me, but this\nblogpost aims to be a sort of TLDR for certain concepts.</p>\n<h3 id=\"the-simplest-react-component\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-simplest-react-component\"><a href=\"#the-simplest-react-component\" style=\"margin-right: 10px\">#</a></a>The simplest React component</h3>\n<p>Here is a \"React component\" that prints hello world in a div</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>I like to think of React components as \"functions that return HTML\". That is a\noversimplification, but it can be a helpful thinking tool to help you get\nstarted.</p>\n<h3 id=\"using-our-helloworld-component-in-another-component\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-our-helloworld-component-in-another-component\"><a href=\"#using-our-helloworld-component-in-another-component\" style=\"margin-right: 10px\">#</a></a>Using our <code>HelloWorld</code> component in another component</h3>\n<p>We said React can be thought of as \"functions that return HTML\" but we can also\ncombine these them together.</p>\n<p>For example, we can create a component named \"App\" that uses our \"HelloWorld\"\ncomponent</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">p</span><span style=\"color: #E4F0FB\">>This is my app&#x3C;/</span><span style=\"color: #5DE4C7\">p</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">HelloWorld</span><span style=\"color: #E4F0FB\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>It is common to have an \"App\" level component, that renders all the other\ncomponents in your page</p>\n<h3 id=\"how-do-these-components-get-rendered-to-html\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-do-these-components-get-rendered-to-html\"><a href=\"#how-do-these-components-get-rendered-to-html\" style=\"margin-right: 10px\">#</a></a>How do these components get rendered to HTML?</h3>\n<p>Typically, just once in your app, you use ReactDOM to render the \"App\" level\ncomponent to the page.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">ReactDOM</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react-dom</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">ReactDOM</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">render</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #E4F0FB\"> /></span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">document</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">getElementById</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">root</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">))</span></span></code></pre>\n<p>And in your index.html you have e.g.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;!</span><span style=\"color: #5DE4C7\">DOCTYPE</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #5FB3A1; font-style: italic\">html</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">html</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">body</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #5FB3A1; font-style: italic\">id</span><span style=\"color: #A6ACCD\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">root</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #D0679D\">/</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">&#x3C;/</span><span style=\"color: #5DE4C7\">body</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;/</span><span style=\"color: #5DE4C7\">html</span><span style=\"color: #E4F0FB\">></span></span></code></pre>\n<h3 id=\"accepting-parameters-to-your-components\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#accepting-parameters-to-your-components\"><a href=\"#accepting-parameters-to-your-components\" style=\"margin-right: 10px\">#</a></a>Accepting parameters to your components</h3>\n<p>React components can accept \"props\" which are like parameters to your component</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">Hello</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">props</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">props</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello {name}!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>We then pass props using HTML like attributes</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">Hello</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">name</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">Colin</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This will print \"Hello Colin!\"</p>\n<h3 id=\"rendering-lists-of-items\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#rendering-lists-of-items\"><a href=\"#rendering-lists-of-items\" style=\"margin-right: 10px\">#</a></a>Rendering lists of items</h3>\n<p>The <code>{name}</code> inside the div is like a little snippet of plain-JS code. It can be\nused to do more complicated things. For example you can render a list of items</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">List</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">list</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Apples</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Oranges</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Pears</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">ul</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {list</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">item </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">li</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">key</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{item}>{item}&#x3C;/</span><span style=\"color: #5DE4C7\">li</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">))</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">ul</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Inside the \"list\" each item has a key prop that is specified. See\n<a href=\"https://reactjs.org/docs/lists-and-keys.html\">https://reactjs.org/docs/lists-and-keys.html</a> for more discussion on this</p>\n<h3 id=\"how-do-i-use-react-in-my-own-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-do-i-use-react-in-my-own-app\"><a href=\"#how-do-i-use-react-in-my-own-app\" style=\"margin-right: 10px\">#</a></a>How do I use React in my own app?</h3>\n<p>Commonly, React is downloaded from npm using your package manager, but often\nrequires some extra steps to get JSX to compile which is often done by babel. I\nwill not cover a minimal React setup here, but I will recommend a couple setups\nthat make it easy for starting out.</p>\n<ul>\n<li>Use <code>create-react-app</code>. You run <code>npx create-react-app yourapp</code> on your command\nline, this creates a folder named <code>yourapp</code> on your computer, and then you\n<code>cd yourapp</code> to go into that directory and run <code>npm run start</code>. This starts a\n\"dev server\" that runs at <a href=\"http://localhost:3000\">http://localhost:3000</a>, and you can then change the\njs files, and the results are instantly updated in your web browser</li>\n<li>CodeSandbox: this is a 100% web based IDE that you can use to experiment with\nReact or other toolkits, visit <a href=\"https://codesandbox.io\">https://codesandbox.io</a> and run \"Create\" and\nthen click \"React app\", this is the React app that it creates\n<a href=\"https://codesandbox.io/s/cool-moon-7x96jk\">https://codesandbox.io/s/cool-moon-7x96jk</a></li>\n</ul>\n<p>If you are trying to incorporate React into a legacy or existing project, then I\nencourage you to experiment in these starter kit environments first. It can be\ndifficult to bolt on React to an existing environment in some ways and\nunderstanding the basics will help.</p>\n<h3 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h3>\n<p>I hope this helps you get started with React, let me know if you have any\nquestions.</p>\n<h3 id=\"footnote-1-class-based-components\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-class-based-components\"><a href=\"#footnote-1-class-based-components\" style=\"margin-right: 10px\">#</a></a>Footnote 1. Class based components</h3>\n<p>In the old days, React used \"class based components\", here is the Hello world\nexample as a class based component</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">class</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #ADD7FF\">render</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>The class based components had other \"lifecycle functions\" like\n\"componentDidMount\" and such that do not exist in function based components. In\nfunction components, React hooks are used instead.</p>\n<p>You will probably mostly see function components instead of class based\ncomponents these days</p>\n<h3 id=\"footnote-2-how-is-this-html-allowed-in-react\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-how-is-this-html-allowed-in-react\"><a href=\"#footnote-2-how-is-this-html-allowed-in-react\" style=\"margin-right: 10px\">#</a></a>Footnote 2. How is this HTML allowed in React?</h3>\n<p>The HTML-like syntax may look odd in JS code. It is called JSX. So code like\nthis:</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>would get converted to this by babel or other jsx transpiler:</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #767C9DB0; font-style: italic\">// null just means no props to the div element</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">React</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">createElement</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #D0679D\">null</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Hello world</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>It's not common to write React without jsx, but as seen above, it can be done :)</p>\n<h3 id=\"footnote-3-slightly-changed-in-react-18\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-slightly-changed-in-react-18\"><a href=\"#footnote-3-slightly-changed-in-react-18\" style=\"margin-right: 10px\">#</a></a>Footnote 3. Slightly changed in React 18</h3>\n<p>React 18 uses <code>createRoot</code> instead of <code>ReactDOM.render</code> and is a little bit more\nverbose, but I'm going for brevity here</p>\n<h3 id=\"footnote-4-things-that-sometimes-complicate-your-react-learning-experience\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-things-that-sometimes-complicate-your-react-learning-experience\"><a href=\"#footnote-4-things-that-sometimes-complicate-your-react-learning-experience\" style=\"margin-right: 10px\">#</a></a>Footnote 4. Things that sometimes complicate your React learning experience</h3>\n<p>The React learning experience, when it's good, is quite nice. But there can be\nmany roadblocks</p>\n<ul>\n<li>\n<p>You can be bogged down by many different sometimes conflicted learning\nresources - The new <a href=\"https://beta.reactjs.org\">https://beta.reactjs.org</a> are currently being implemented\nand hopefully will make the learning experience better.</p>\n</li>\n<li>\n<p>You can be bogged down by the difficulty in setting up your dev environment -\nthe need to get transpilers and compilers for the JSX syntax and such is not\neasy, and has led to an explosion of developer tooling that often needs to be\nrun on the command line to do any sort of programming for the web. This is a\nunfortunate consequence of the web becoming more complicated. Learning to be\ncomfortable with the command line is often an important stepping stone to\nbecoming comfortable with modern JS dev tooling.</p>\n</li>\n<li>\n<p>You can be bogged down by \"tangential\" concepts like state management</p>\n</li>\n<li>\n<p>React codebases often use newer features of javascript like destructuring,\nwhich can be confusing for newcomers (\"Why does this function have curly\nbraces in the place of the arguments?\")</p>\n</li>\n<li>\n<p>You can be confused by weird concepts like \"controlled\" components (and how\nReact hooks like useState integrate with these)</p>\n</li>\n<li>\n<p>You can be bogged down by Typescript or PropTypes - When I was learning React,\nI was confused by PropTypes in code. PropTypes are fully optional though, and\nare just used to check the types of props at runtime. TypeScript can be tricky\nalso, and does type checking at \"compile time\"</p>\n</li>\n</ul>"},{"title":"Handling component state with React...you gotta reset it sometimes","date":"2022-10-10","slug":"2022-10-10-reactstate","html":"<p>If you make a React component that has, say, a prop for a item id, and an async\naction in a <code>useEffect</code> to fetch data for that item from an API, then you\nprobably also have a <code>useState</code> to set data after you get results back from your\nAPI (or an error occurs). But, the interesting thing to me is</p>\n<p><strong>you have to remember to reset that state, including error state, when your\nprops change</strong></p>\n<p>It seems obvious, but I just wanted to write some working examples here</p>\n<h2 id=\"part-1-having-component-state-for-api-response-or-error\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-1-having-component-state-for-api-response-or-error\"><a href=\"#part-1-having-component-state-for-api-response-or-error\" style=\"margin-right: 10px\">#</a></a>Part 1: Having component state for API response or error</h2>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003\">https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003</a></p>\n<p>In the below example, we will handle fetching from the Pokemon API, and use a\n<code>useState</code> to handle the returned data or a returned error. The important thing\nto highlight is: when you go to refetch a new item from the API, you likely need\nto clear the state of what was previously there (unless you want to display\nstale results)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useState</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useEffect</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  type</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  types</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// util fetch function to throw if !response.ok, I use this util often</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">myfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #91B4D5\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">Error fetching </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\">: HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">ErrorMessage</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { error</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">style</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">background</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">red</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #E4F0FB\">}>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setError</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setPokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #767C9DB0; font-style: italic\">// important: reset the error and item state of the component!</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {error </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">ErrorMessage</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">error</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{error} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">className</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">htmlFor</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">>Pokemon name&#x3C;/</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">input</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">id</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">type</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">text</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">value</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">onChange</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{e </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #E4F0FBD0\">setValue</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">target</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h2 id=\"part-2-a-custom-hook\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-2-a-custom-hook\"><a href=\"#part-2-a-custom-hook\" style=\"margin-right: 10px\">#</a></a>Part 2: A custom hook?</h2>\n<p>Can we make a hook to make this easier? I don't often make custom hooks, but you\ncan try to \"encapsulate\" some of the multiple-related hooks (the useStates for\nerror, pokemonInfo, and useEffect) into a single hook. This does not drastically\naffect our approach, but in the below example, we can call\n<code>usePokemonInfo(pokemonName)</code> and error handling and fetching is handled for us</p>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234\">https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234</a></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useState</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useEffect</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  type</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  types</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\">[]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// util fetch function to throw if !response.ok, I use this util often</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">myfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #91B4D5\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">Error fetching </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\">: HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setError</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setItemInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setItemInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #767C9DB0; font-style: italic\">// &#x3C;-- important to reset the state of the app</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #767C9DB0; font-style: italic\">// &#x3C;-- important to reset the state of the app</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setItemInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">const</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">ErrorMessage</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { error</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">style</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">background</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">red</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #E4F0FB\">}>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {error </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">ErrorMessage</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">error</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{error} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">className</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">htmlFor</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">>Pokemon name&#x3C;/</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">input</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">id</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">type</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">text</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">value</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">onChange</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{e </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #E4F0FBD0\">setValue</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">target</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>I think it's sometimes common to forget error handling in async JS code\n(useEffect async or many other contexts, etc), and there aren't e.g. lint rules\nto really help, leaving errors uncaught or handled poorly. If you don't manually\nhandle the error in the <code>useEffect</code>, your user probably will not see that an\nerror occurred.</p>\n<p>In addition to this error handling rant, the other point of this article is you\nneed to reset your component state when props change, which in the code above,\nare the calls to setError(undefined) and setPokemonInfo(undefined) before I\nfetch a new Pokemon from the API.</p>\n<h2 id=\"footnote-0---web-perf-pontificating\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-0---web-perf-pontificating\"><a href=\"#footnote-0---web-perf-pontificating\" style=\"margin-right: 10px\">#</a></a>Footnote 0 - Web perf pontificating</h2>\n<p>I think sometimes, this manner of fetching data inside a component can lead to\nwhat some web-perf-experts refer to as waterfall. Can you get your state from\nyour parent? That might result in fewer individual requests made, but is also\nquite a different architecture.</p>\n<h2 id=\"footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\"><a href=\"#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\" style=\"margin-right: 10px\">#</a></a>Footnote 1 - ErrorBoundaries don't automatically save you from manually handling error</h2>\n<p>You can also consider using an ErrorBoundary, but this does not automatically\ncatch errors that happen in e.g. a useEffect. If you want your ErrorBoundary to\nhandle your useEffect related error, then you can use something like this. This\nassumes a <code>react-error-boundary</code> type ErrorBoundary.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">ErrorBoundary</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react-error-boundary</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">error</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">ErrorBoundary</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">FallbackComponent</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">({</span><span style=\"color: #E4F0FB\"> error </span><span style=\"color: #A6ACCD\">})</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>}></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">ErrorBoundary</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Another trick, instead of throwing in the body of the component is throwing in\nthe callback form of the useState-setter. Then you wouldn't necessarily need to\nhave a separate useState for the error state, but you would then need an\nErrorBoundary or something to help display a nice error.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #767C9DB0; font-style: italic\">// important: reset the error and item state of the component!</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">e</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        })</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span></code></pre>\n<h2 id=\"footnote-2-the-future-with-react-data-fetching\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-the-future-with-react-data-fetching\"><a href=\"#footnote-2-the-future-with-react-data-fetching\" style=\"margin-right: 10px\">#</a></a>Footnote 2: The future with React data fetching</h2>\n<p>See <a href=\"https://github.com/reactjs/rfcs/pull/229\">https://github.com/reactjs/rfcs/pull/229</a></p>\n<p>This was just announced so there is a lot to unpack there, I can update this\nblog post if I come up with an analogous example using this RFC</p>\n<h2 id=\"footnote-3-using-react-query-or-swr\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-using-react-query-or-swr\"><a href=\"#footnote-3-using-react-query-or-swr\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Using react-query or swr</h2>\n<p>There are helper libraries that try to help</p>\n<p>One helper library suggested was called <code>react-query</code>, so I made a demo using\n<code>@tanstack/react-query</code> v4.</p>\n<p><a href=\"https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx\">https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx</a></p>\n<p>Another is <code>swr</code>, here is a demo for that library</p>\n<p><a href=\"https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx\">https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx</a></p>\n<p>These libraries definitely <strong>do</strong> a lot of things, so take on some more baggage\nthan the simple hooks described above, but may be helpful to you also.</p>\n<h2 id=\"footnote-4-fetching-is-just-one-aspect-of-this-blogpost\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-fetching-is-just-one-aspect-of-this-blogpost\"><a href=\"#footnote-4-fetching-is-just-one-aspect-of-this-blogpost\" style=\"margin-right: 10px\">#</a></a>Footnote 4: Fetching is just one aspect of this blogpost</h2>\n<p>Really, the thing I wanted to make more clear in general was also how \"sticky\"\nuseState can be. I find other patterns in my codebase besides just fetching\nwhere I have to \"reset\" the useState hook to a neutral state, sometimes related\nto controlled components.</p>\n<h2 id=\"footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\"><a href=\"#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\" style=\"margin-right: 10px\">#</a></a>Footnote 5: You can also use the \"key\" prop as an alternative to manually resetting state</h2>\n<p>See <a href=\"https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx\">https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx</a></p>\n<p>I am not sure I recommend this as it basically forces the component to unmount,\nwhich may be ok in some cases but I don't know all the ramifications. A quote\nfrom <a href=\"https://kentcdodds.com/blog/understanding-reacts-key-prop\">https://kentcdodds.com/blog/understanding-reacts-key-prop</a> explains</p>\n<p>\"This allows you to return the exact same element type, but force React to\nunmount the previous instance, and mount a new one. This means that all state\nthat had existed in the component at the time is completely removed and the\ncomponent is \"reinitialized\" for all intents and purposes.\"</p>\n<p>See also\n<a href=\"https://react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes\">https://react.dev/learn/you-might-not-need-an-effect#resetting-all-state-when-a-prop-changes</a></p>\n<h2 id=\"footnote-6-the-use-hook\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6-the-use-hook\"><a href=\"#footnote-6-the-use-hook\" style=\"margin-right: 10px\">#</a></a>Footnote 6: The <code>use</code> hook</h2>\n<p>Might also be related <a href=\"https://blixtdev.com/all-about-reacts-new-use-hook/\">https://blixtdev.com/all-about-reacts-new-use-hook/</a></p>"},{"title":"Making an audio slideshow with ffmpeg","date":"2022-10-08","slug":"2022-10-08-ffmpeg-slideshow","html":"<p>Inspired by a new trend of posting \"playlists\" on youtube with visual\naccompaniment (<a href=\"https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s\">https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s</a>), I wanted to\ntry to make my own with a slideshow. I used ffmpeg as the heavy lifting tool</p>\n<h2 id=\"step-1---prepare-your-playlist\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-1---prepare-your-playlist\"><a href=\"#step-1---prepare-your-playlist\" style=\"margin-right: 10px\">#</a></a>Step 1 - prepare your playlist</h2>\n<p>I like foobar2000, because it can combine multiple files into a single output\nfile.</p>\n<p>Use right-click -> \"Convert ...\" in the foobar2000 playlist</p>\n<p><img src=\"/media/foobar1.png\" alt=\"\"></p>\n<p>Use \"Merge all tracks into one file\" in the \"Convert...\" dialog</p>\n<p><img src=\"/media/foobar2.png\" alt=\"\"></p>\n<p>Note: If you have a folder of mp3's only, you can directly concatenate them with\n<code>cat *.mp3 > out.mp3</code> or use ffmpeg to concatenate them for a pure command-line\nalternative.</p>\n<h2 id=\"step-2---prepare-the-slideshow\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-2---prepare-the-slideshow\"><a href=\"#step-2---prepare-the-slideshow\" style=\"margin-right: 10px\">#</a></a>Step 2 - prepare the slideshow</h2>\n<p>Use 10 seconds per picture. Note the glob pattern is in quotes</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">ffmpeg</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-framerate</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #ADD7FF\">/</span><span style=\"color: #5DE4C7\">10</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-pattern_type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">glob</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">*.jpg</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">pics.mp4</span></span></code></pre>\n<h2 id=\"step-3---combine-the-slideshow-and-playlist\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-3---combine-the-slideshow-and-playlist\"><a href=\"#step-3---combine-the-slideshow-and-playlist\" style=\"margin-right: 10px\">#</a></a>Step 3 - combine the slideshow and playlist</h2>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">ffmpeg</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-stream_loop</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-1</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">pics.mp4</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">playlist.wav</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-shortest</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-vcodec</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">copy</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">output.mp4</span></span></code></pre>\n<p>Using <code>-stream_loop -1</code> on pics.mp4 will loop the pics until playlist.wav ends,\nbut then limit itself to the length of the playlist.wav with <code>-shortest</code></p>\n<h2 id=\"step-4---upload-to-youtube\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-4---upload-to-youtube\"><a href=\"#step-4---upload-to-youtube\" style=\"margin-right: 10px\">#</a></a>Step 4 - upload to youtube</h2>\n<p>Done!</p>\n<h3 id=\"footnote-1-what-if-you-just-want-a-single-picture\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-what-if-you-just-want-a-single-picture\"><a href=\"#footnote-1-what-if-you-just-want-a-single-picture\" style=\"margin-right: 10px\">#</a></a>Footnote 1: What if you just want a single picture?</h3>\n<p>Common for posting an album to youtube, you post the album art and some audio,\nyou can try searching from stackoverflow for options related to this</p>\n<p>Example <a href=\"https://superuser.com/a/332867/415552\">https://superuser.com/a/332867/415552</a></p>\n<h3 id=\"footnote-2-distortion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-distortion\"><a href=\"#footnote-2-distortion\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Distortion</h3>\n<p>The pictures may get distorted to fit the video frame, I haven't experimented\nwith options that modify this behavior</p>"},{"title":"Creating a music player using Rust/GTK4 - fml9000","date":"2022-09-05","slug":"2022-09-05-rustmusicplayer","html":"<p>I have started endeavoring to learn Rust. I did the rustlings exercises but I\nknew the concepts would fade rapidly from my brain without some practice. I have\nnow started making a music player using Rust+GTK4.</p>\n<p>I chose GTK4 to have a linux native GUI music player. Particularly, I have a\nparticular <code>foobar2000</code> setup that I wanted to emulate. I have used <code>foobar2000</code>\nunder wine (windows emulator on linux) and it's not terrible, but it has\nbackground CPU consumption of about 15% idle and doesn't feel quite right\nsometimes. I have used a variety of other linux music players such as\n<code>quodlibet</code> (GUI/GTK based) and <code>cmus</code> (command line) but they didn't really\nfeel quite right.</p>\n<h3 id=\"choosing-a-tech-stack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-a-tech-stack\"><a href=\"#choosing-a-tech-stack\" style=\"margin-right: 10px\">#</a></a>Choosing a tech stack</h3>\n<p>I started by attempting with <code>Relm4</code>, which I may return to at some point, but\ntrying to juggle learning Relm4-style widgets, GTK, and rust all at once was a\nbit much. I stepped to using <code>gtk4-rs</code> directly.</p>\n<h3 id=\"create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\"><a href=\"#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\" style=\"margin-right: 10px\">#</a></a>Create a \"spreadsheet style\" data grid of tracks with <code>ColumnView</code></h3>\n<p>Then, I wanted to create a data grid showing to display e.g. a table with\nartist, track, album, etc. I chose to use the GTK\n<a href=\"https://docs.gtk.org/gtk4/class.ColumnView.html\"><code>ColumnView</code></a> to drive this. I\nstumbled around looking for example code, but there was none specifically for\nthe <code>ColumnView</code>. I also realized the <code>ListView</code> example from the <code>gtk4-rs</code>\nexamples with it's factory function had similar needs that the <code>ColumnView</code>.</p>\n<p>I found out that I basically needed to create a <code>ListStore</code>. I thought if I\ncould make my own <code>GObject</code> subclass, it would solve everything, but I had\ntrouble getting making this work (rust doesn't have the concept of extending a\nclass for one thing, you implement various traits instead). Finally, I randomly\nstumbled on this link using a <code>BoxedAnyObject</code> with a good example of storing\ndata in a ListStore\n<a href=\"https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html\">https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html</a></p>\n<p>The <code>BoxedAnyObject</code> is a <code>GObject</code>, so this was an good route to storing the\n<code>ListView</code> items. There was no example code for connecting the <code>ListStore</code> with\nthe <code>ColumnView</code>, so I stuggled for awhile before realizing that the <code>ListView</code>\nexample in the <code>gtk4-rs</code> codebase has similar concepts.</p>\n<p>See [1] for minimal usage of <code>ColumnView</code> that I contributed to the <code>gtk4-rs</code>\nrepo!</p>\n<h3 id=\"choosing-an-audio-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-an-audio-library\"><a href=\"#choosing-an-audio-library\" style=\"margin-right: 10px\">#</a></a>Choosing an audio library</h3>\n<p>To actually play audio, I looked at a couple options. There was even one option\ncalled GTK\n<a href=\"https://gtk-rs.org/gtk4-rs/git/docs/gtk4/struct.MediaFile.html\"><code>MediaFile</code></a>\nwhich should to be able to play e.g. mp3s, making my job of making a media\nplayer much simpler, but it produced an error\n<a href=\"https://www.google.com/search?q=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;oq=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;aqs=chrome..69i57.267j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8\">\"GTK could not find a media module. Check your installation.\"</a>\nwhich had very few references on the internet. I figured this could be difficult\nto solve or point to issues I could face later on making minimal executables for\nusers.</p>\n<p>So, next I tried out <code>symphonia</code> (<a href=\"https://github.com/pdeljanov/Symphonia/\">https://github.com/pdeljanov/Symphonia/</a>).\nSymphonia requires a lot more code to work (~1000 lines so far, copying from the\n<code>symphonia-play</code> example) but it has broad file format support, pure-rust audio\nstack, etc. I got confused about how to package it into an easy-to-use system\nthough, having to create a symphonia player on a separate thread, so I looked\nelsewhere...</p>\n<p>Next I turned to <code>rodio</code>. This works well, and automatically plays on a separate\nthread, but I found two issues 1) I have to initialize the rodio player in \"fn\nmain\" and not anywhere else, or it would just play a short blip of audio\n(<a href=\"https://github.com/RustAudio/rodio/issues/381\">https://github.com/RustAudio/rodio/issues/381</a>). Then, it turned out that the\n<code>rodio</code>\n<a href=\"https://docs.rs/rodio/0.14.0/rodio/struct.Sink.html#method.stop\"><code>Sink</code></a>\ninstance (which you pass audio to) cannot stop and then play new song xref\n(<a href=\"https://github.com/RustAudio/rodio/issues/315\">https://github.com/RustAudio/rodio/issues/315</a>). To workaround, I replace it\nwith a new <code>Sink</code>.</p>\n<p>This required me to learn about <code>RefCell</code>. I googled probably about 50 things\njust grasping at straws for awhile, but then landed on the solution of putting\nthe <code>Sink</code> in a <code>Rc&#x3C;RefCell&#x3C;Sink>></code>, then that allows me to pass it into my\ncallback that handles double clicking the songs in the <code>ColumnView</code>, and then I\nborrow the <code>RefCell</code> mutably to replace it with a new <code>Sink</code>.</p>\n<h3 id=\"reading-audio-metadata-into-an-sqlite-db\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#reading-audio-metadata-into-an-sqlite-db\"><a href=\"#reading-audio-metadata-into-an-sqlite-db\" style=\"margin-right: 10px\">#</a></a>Reading audio metadata into an <code>sqlite</code> DB</h3>\n<p>I also wanted to have the option of reading and writing audio metadata.\nSymphonia only reads metadata, so I found the <code>lofty</code> crate.</p>\n<p>I also realized that reading tens of thousands of file's metadata at each app\nstartup would be slow, so I endeavored to store that data in an <code>sqlite</code>\ndatabase. I found that music players like <code>foobar2000</code> and <code>0xdeadbeef</code> have\ndatabases of track metadata also (Example folder on <code>foobar2000</code> (1.x) for this\nsnap/foobar2000/433/foobar2000/profile/library/74E45640B1C695CC/meta-0001,\nmeta-0002, etc.)</p>\n<p>I used the <code>walkdir</code> crate to walk a directory for files, <code>lofty</code> to read the\nmetadata, and then finally inserted the data into the <code>sqlite</code> db. I am still\nworking out the schema for the database but it provisionally associates data\nwith a primary key of filename.</p>\n<h3 id=\"learning-about-reference-counting-and-move-semantics\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#learning-about-reference-counting-and-move-semantics\"><a href=\"#learning-about-reference-counting-and-move-semantics\" style=\"margin-right: 10px\">#</a></a>Learning about reference counting and move semantics</h3>\n<p>Originally I queried the sqlite database and stored a <code>Vec&#x3C;Track></code>, where\n<code>Track</code> is a struct with artist, album, song title, etc. I realized that this\ncauses issues passing this around to different functions, and storing them in\nthe <code>BoxedAnyObject</code>, (example thread discussing issue\n<a href=\"https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust\">https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust</a>)\nso I changed functions to accept slices of the Vec, and to make it a\n<code>Vec&#x3C;Rc&#x3C;Track>></code> instead of just <code>Vec&#x3C;Track></code> (another related thread\n<a href=\"https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3\">https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3</a>).</p>\n<h3 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#result\"><a href=\"#result\" style=\"margin-right: 10px\">#</a></a>Result</h3>\n<p>The current work is at <a href=\"https://github.com/cmdcolin/fml9000\">https://github.com/cmdcolin/fml9000</a></p>\n<p><img src=\"/media/fml9000_1.png\" alt=\"\"></p>\n<p>Screenshot shows the current look and feel. Some stuff in the screenshot is\nmocked and not fully functional, but it has been a great learning experience\nthus far</p>\n<h3 id=\"footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\"><a href=\"#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Creating a PR to the <code>gtk4-rs</code> repo to demonstrate example ColumnView usage</h3>\n<p>I created a PR (<a href=\"https://github.com/gtk-rs/gtk4-rs/pull/1111\">https://github.com/gtk-rs/gtk4-rs/pull/1111</a>) to demonstrate\nsimple <code>ColumnView</code> usage. The code review that was given on the PR was\nexcellent. They explained how to simplify the code I submitted so that each grid\ncell was very minimal (starting from a <code>gtk::Box</code> with a <code>gtk::Label</code> inside of\nit, to just being a <code>gtk::Inscription</code> which is very fast). Big thanks to the\nteam for helping out with this!</p>\n<p>After this hurdle was crossed, I felt much more comfortable in the GTK mindset,\nand I quickly fleshed out some more UI for the app</p>"},{"title":"Making a twitter bot in the year 2022 with node.js","date":"2022-08-26","slug":"2022-08-26-twitterbot","html":"<p>Recently, we made the logistic map fractal visualizer app, but, how do we keep\nUSER ENGAGEMENT METRICS up? Gotta make a twitter bot to post fractals, that's\nhow!</p>\n<p>I found it somewhat tricky to get this working, because there is a lot of odd\nlingo out there. There are libraries that may help you, but this post goes\nthrough making an OAuth client in node.js to post to the twitter API with fairly\nunabstracted code. OAuth still confuses me, but if you follow these steps, you\ncan make a bot!</p>\n<h3 id=\"step-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-1\"><a href=\"#step-1\" style=\"margin-right: 10px\">#</a></a>Step 1</h3>\n<p>Get your keys. I forget the exact procedure for this but go to\n<a href=\"https://developer.twitter.com\">https://developer.twitter.com</a> and sign up, register an \"app\" with them, and poke\naround for awhile. This github repo provides a couple more details about the\nprocess of registering\n<a href=\"https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal\">https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal</a></p>\n<p>After sometime, you should get a screen that looks like this. Keep this around\nfor Step 4. Note: I did not have to apply for any elevated access for this\narticle, just the basic level you get from the initial registration! I believe\nin twitter terms, this article only requires \"Essential\" access and not any\n\"Elevated\" access.</p>\n<p><img src=\"https://github.com/cmdcolin/twitter_fractal_bot/blob/master/img/devpanel.png?raw=true\" alt=\"\"></p>\n<h3 id=\"step-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-2\"><a href=\"#step-2\" style=\"margin-right: 10px\">#</a></a>Step 2</h3>\n<p>Make a repo with a couple dependencies</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">mkdir</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mybot</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">cd</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mybot</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">yarn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">init</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">yarn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">add</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">node-fetch</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">formdata-node</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">oauth</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">typescript</span></span></code></pre>\n<h3 id=\"step-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-3\"><a href=\"#step-3\" style=\"margin-right: 10px\">#</a></a>Step 3</h3>\n<p>Update <code>package.json</code> with a couple scripts to build these typescript files\n(alternatively use <code>ts-node</code> or similar to run the ts files directly)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">dependencies</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^16.0.1</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">formdata-node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^4.4.1</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">node-fetch</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^3.2.10</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">oauth</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^0.10.0</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">typescript</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^4.7.4</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  },</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">license</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">MIT</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">module</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">devDependencies</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">@types/node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^18.7.9</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">@types/oauth</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^0.9.1</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  },</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">scripts</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">build</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">tsc</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">prepost</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">yarn build</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">post</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">node dist/bot.js</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>And <code>tsconfig.json</code> file</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">include</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">src</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">],</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">compilerOptions</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">target</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">esnext</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">outDir</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">dist</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">moduleResolution</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">declaration</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">strict</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">esModuleInterop</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This compiles the <code>src</code> folder and outputs js files to the <code>dist</code> directory, and\nwe can run the <code>node dist/bot.js</code> file with node to post the file</p>\n<h3 id=\"step-4\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-4\"><a href=\"#step-4\" style=\"margin-right: 10px\">#</a></a>Step 4</h3>\n<p>Create a .env file with your keys that you found in the above screenshot\ncorresponding to the box1 (which gives you API_KEY/API_SECRET, sometimes also\nreferred to as consumer keys in other documents) and box2 (which gives you\nACCESS_TOKEN and ACCESS_TOKEN_SECRET) from the above screenshot</p>\n<pre><code>API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxx\"\nAPI_SECRET=\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"\nACCESS_TOKEN=\"aaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nACCESS_TOKEN_SECRET=\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n</code></pre>\n<p>Important: Also add the .env to your .gitignore, you don't want to commit this\nto github!</p>\n<h3 id=\"step-5\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-5\"><a href=\"#step-5\" style=\"margin-right: 10px\">#</a></a>Step 5</h3>\n<p>Make the bot! Create <code>src/bot.ts</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">fs</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">fs</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import * </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">dotenv</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">OAuth</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oauth</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">fetch</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">RequestInit</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">node-fetch</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">FormData</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">File</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">formdata-node</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">dotenv</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">config</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">params</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">params</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">text</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">text</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">() </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">Promise</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">Record</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oauth</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">OAuth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #A6ACCDC0\">OAuth</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">oauth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">authHeader</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ACCESS_TOKEN</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ACCESS_TOKEN_SECRET</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">post</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">OAuth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">OAuth</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/oauth/request_token</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/oauth/access_token</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">API_KEY</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">API_SECRET</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">1.0A</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">null</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">HMAC-SHA1</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://upload.twitter.com/1.1/media/upload.json</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/2/tweets</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">v3CreateTweetJS</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">FormData</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">set</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">media</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">File</span><span style=\"color: #A6ACCD\">([</span><span style=\"color: #E4F0FB\">fs</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">readFileSync</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">yourpicture.png</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)], </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">yourpicture.png</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #767C9DB0; font-style: italic\">// first post a picture</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response1</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">headers</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">Authorization</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FBD0\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">user-agent</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">method</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">POST</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #767C9DB0; font-style: italic\">//@ts-ignore</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">body</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #767C9DB0; font-style: italic\">// then post a tweet, referring to the media_id_string from response1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response2</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">headers</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">Authorization</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FBD0\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">user-agent</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">content-type</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">application/json</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">accept</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">application/json</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">body</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> JSON</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">stringify</span><span style=\"color: #A6ACCD\">({</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">media</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">media_ids</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">response1</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">media_id_string</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">text</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Hello world!</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">}),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">method</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">post</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">response2</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">exit</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">})()</span></span></code></pre>\n<h3 id=\"step-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-6\"><a href=\"#step-6\" style=\"margin-right: 10px\">#</a></a>Step 6</h3>\n<p>Now that you have the bot, you can run it locally with <code>yarn post</code> (runs the\n\"post\" script in <code>package.json</code>) to test it out</p>\n<h3 id=\"step-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-7\"><a href=\"#step-7\" style=\"margin-right: 10px\">#</a></a>Step 7</h3>\n<p>Now to create a github action to run the bot.</p>\n<p>Navigate to your repo's settings page, then go to Secrets->Actions and paste the\nkeys one by one, see below screenshot</p>\n<p><img src=\"https://user-images.githubusercontent.com/6511937/187038172-80b35e34-03dd-4613-b6f6-9f8e25d2fc34.png\" alt=\"\"></p>\n<h3 id=\"step-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-8\"><a href=\"#step-8\" style=\"margin-right: 10px\">#</a></a>Step 8</h3>\n<p>Create a file with the path <code>.github/workflows/post.yml</code> in your repo to make\nthe post</p>\n<p>You can use a cron/scheduled workflow in the github action, which the below\nexample does\n<a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule</a></p>\n<p>The below github action posts every 5 hours on the hour (see\n<a href=\"https://crontab.guru/\">https://crontab.guru/</a> for more info on cron syntax)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">on</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7\">schedule</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    - </span><span style=\"color: #5DE4C7\">cron</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">0 */5 * * *</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">jobs</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7\">test</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">runs-on</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">steps</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">actions/checkout@v2</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Use Node.js 14.x</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">actions/setup-node@v2</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">with</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">node-version</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">14</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Install deps (with cache)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">bahmutov/npm-install@v1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">env</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">API_KEY</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.API_KEY }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">API_SECRET</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.API_SECRET }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">ACCESS_TOKEN</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.ACCESS_TOKEN }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">ACCESS_TOKEN_SECRET</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.ACCESS_TOKEN_SECRET }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">run</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">yarn post</span></span></code></pre>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>See <a href=\"https://github.com/cmdcolin/twitter_fractal_bot\">https://github.com/cmdcolin/twitter_fractal_bot</a> for working example. I could\nhave, in retrospect, used a library like <code>twit</code>\n(<a href=\"https://www.npmjs.com/package/twit\">https://www.npmjs.com/package/twit</a>) but this code sample is not substantially\nmore complicated than using the <code>twit</code> library.</p>\n<p>You can also adapt this to post only when you push to your repo, or release a\nnew version from your repo!</p>\n<h2 id=\"footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Examples of odd lingo or stumbling blocks you might come across</h2>\n<ul>\n<li>Bearer token - The Bearer token is an alternative method of authenticating,\nbut it cannot be used to post tweets</li>\n<li>Twitter API v1 vs v2 - We use a mix of v1 and v2, it's just the different URLs\nthat we are posting to and can be mixed in our example</li>\n<li>Consumer key vs API key - they are the same thing in our example. If you look\nclosely at the box 1 in the screenshot it says \"Consumer keys\" and then gives\nyou an API key below *</li>\n</ul>\n<h2 id=\"footnote-2-posting-on-release-with-a-github-action\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-posting-on-release-with-a-github-action\"><a href=\"#footnote-2-posting-on-release-with-a-github-action\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Posting on release with a github action</h2>\n<p>Replace the cron section of the github action with</p>\n<pre><code>on: release\n</code></pre>\n<h2 id=\"footnote-3-additional-reading\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-additional-reading\"><a href=\"#footnote-3-additional-reading\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Additional reading</h2>\n<p><a href=\"https://aaronparecki.com/oauth-2-simplified/\">https://aaronparecki.com/oauth-2-simplified/</a></p>"}]},"__N_SSG":true}