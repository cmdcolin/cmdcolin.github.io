{"pageProps":{"post":{"title":"Notes on performance profiling JS applications","date":"2022-05-10","slug":"2022-05-10-performanceprofiling","html":"<p>Keeping your program fast is important for</p>\n<ul>\n<li>user satisfaction in everyday apps</li>\n<li>making certain things tractable</li>\n</ul>\n<p>In our application, we visualize some large-ish datasets using the browser and\njavascript</p>\n<h2>The Chrome profiler</h2>\n<p>I use the Chrome DevTools \"Performance\" profiler, which is a\nstatistical/sampling profiler\n<a href=\"https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers\">https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers</a></p>\n<p>This means it samples at some rate and see's where in the callstack the program\nis executing.</p>\n<ul>\n<li>If you see large rectangles in the profiler, you may have a long running\nfunction</li>\n<li>If you see many small rectangles, your small function may be called many\ntimes</li>\n</ul>\n<p>Note: sometimes your function may be so fast, it is rarely or never encountered\nby the sampling. It is a good thing (TM) to be this fast, but I mention it to\nnote that the sampling profiler does not give us a complete log of all function\ncalls.</p>\n<h2>Creating a flamegraph from the Chrome profiler results</h2>\n<p>Note: sometimes, it is also useful to see the results as a \"flamegraph\" (see\n<a href=\"https://www.brendangregg.com/flamegraphs.html\">https://www.brendangregg.com/flamegraphs.html)</a>)</p>\n<p>The website <a href=\"https://www.speedscope.app/\">https://www.speedscope.app/</a> can\ncreate \"flamegraph\" style figures for Chrome profiling results</p>\n<h2>Stacking up many small optimizations</h2>\n<p>Working with large datasets, sometimes your program will take a long time to\ncomplete. Especially if you work with javascript in the browser, it is a\nchallenge to make things go fast. But you can use micro optimizations to help\nimprove performance over time.</p>\n<p>For example, say a program takes 30 seconds to run on a certain dataset</p>\n<p>If you do profiling and find a couple microoptimizations that give you a 15%,\n10% and 5% performance improvement, then you program now takes 20 seconds to\nrun. That is still not instantaneous, but it is saving users a good 10 seconds.</p>\n<h2>Examples of micro optimizations</h2>\n<ul>\n<li>Using <code>Map</code> instead of <code>Object</code> can often get small performance boosts</li>\n<li>Comparing value against <code>undefined</code> e.g. <code>if(val===undefined)</code> vs just\ncomparing against falsy e.g. <code>if(!val)</code></li>\n<li>Using <code>TypedArray</code>/<code>Uint8Array</code> natively instead of <code>Buffer</code> polyfill. This\none is a kicker for me because we relied on <code>Buffer</code> polyfill, and webpack 5\nstopped bundling polyfills by default which made us wake up to this</li>\n<li>When converting <code>Uint8Array</code> to string, use <code>TextDecoder</code> for large strings, and\njust small string concatenations of <code>String.fromCharCode</code> for small ones.\nThere is an inflection point for string size where one is faster</li>\n<li>Use <code>for</code> loops instead of <code>Array.prototype.forEach</code>/<code>Array.prototype.map</code>. I\nthink similar to above, there is an inflection point (not where it gets\nfaster in the <code>forEach</code>/<code>map</code> case, but where you can choose to care whether\nthe small performance diff matters) based on number of elements in your array</li>\n<li>Pre-allocate an array with <code>new Array(N)</code> instead of just <code>[]</code> if possible</li>\n</ul>\n<p>I have tried to keep track of more microoptimizations here, but they are pretty\nspecific to small examples and may not generalize across browsers or browser\nversions <a href=\"https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8\">https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8</a></p>\n<h2>Examples of macro optimizations</h2>\n<p>Oftentimes, large scale re-workings of your code or \"macro\" optimizations are\nthe way to make progress.</p>\n<p>A macro optimization may be revealed if you are looking at your performance\nprofiling result and you think: this entire section of the program could be\nreworked to remove this overhead</p>\n<p>In this case, it is hard to advise on because most of these will be very\nspecific to your particular app.</p>\n<p>Just as a specific example of a macro optimization I undertook:</p>\n<p>We use web workers, and had to serialize a lot of data from the web worker to\nthe main thread. I did a large re-working of the codebase to allow, in\nparticular examples, the main thread to request smaller snippets of data from\nthe web worker thread on-demand (the web worker is kept alive indefinitely)\ninstead of serializing all the web worker data and sending to the main thread.</p>\n<p>This change especially pays off with large datasets, where all that\nserialization/data duplication is computationally and memory expensive. Fun\nfact: I remember sitting at a table at a conference in Jan 2020 talking with my\nteam at the Plant and Animal Genome conference, thinking that we should make\nthis change -- finally did it, just took 2 years. [1]</p>\n<h2>End-to-end optimization testing</h2>\n<p>In order to comprehensively measure whether micro or macro optimizations are\nactually improving your real world performance, it can be useful to create an\nend-to-end test</p>\n<p>For our app, I created a <code>puppeteer</code> based test where I loaded the website and\nwaited for a \"DONE\" condition. I created a variety of different tests which\nallowed me to see e.g. some optimizations may only affect certain conditions.</p>\n<p>Developing the end-to-end test suite tool awhile to develop (read: weeks to\nmature, though some earlier result were available), but it let me compare the\ncurrent release vs experimental branches, and over time, the experimental\nbranches were merged and things got faster. [2]</p>\n<h2>Note that memory usage can be very important to your programs performance.</h2>\n<p>Excessive allocations will increase \"GC pressure\" (the garbage collector will\ninvoke more Minor and Major GC, which you will see in your performance\nprofiling reuslts as yellow boxes)</p>\n<h2>Conclusion</h2>\n<p>It is really important to look at the profiling to see what your program\nactually is spending time on. You can make hypothetical optimizations all day\nand dream of rewriting in rust but you may just have a slow hot path in your JS\ncode that, if optimized, can get big speedups.</p>\n<p>Let me know about your favorite optimizations in the comments!</p>\n<h2>Footnotes</h2>\n<p>[1] Note that things like SharedArrayBuffer also offer a means to share data\nbetween worker and main thread, but these come with many security limitations\nfrom the browser (and was even removed for a time while these security\nimplications were sussed out, due to Spectre/Meltdown vulnerabilities)</p>\n<p>[2] I still have not found a good way to get automated memory usage profiling\nvia puppeteer. You can access window.process.memory in puppeteer, but this\nvariable does not provide info about webworker memory usage\n<a href=\"https://github.com/puppeteer/puppeteer/issues/8258\">https://github.com/puppeteer/puppeteer/issues/8258</a></p>"}},"__N_SSG":true}