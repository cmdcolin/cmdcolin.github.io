{"pageProps":{"post":{"title":"How I learned to hate ORM (especially for data import scripts)","date":"2017-03-12","slug":"2017-03-12","html":"<p>When I was tasked with making a new application for our websites, I was given\nseveral CSV files with some expectation that these files could basically be just\nloaded into a database and jumped into production really quickly. If you are\nusing R and Shiny to make a data visualization dashboard, especially if it is\nread only, this can actually be a reality for you: load those CSVs and just\npretend you're a full featured database. I had to actually create some read\nwrite functionality though. This was sort of experimental for me and I'm not\nthat well versed in databases, but I wanted to share my experience</p>\n<p>When I started, I chose grails/groovy/hibernate/GORM as a platform to use. This\nquickly turned into pain when I tried to make a data importer using grails also.</p>\n<p>Each CSV row from the source file would have to be turned into many different\nrows in the database because it represented multiple relationships, example:</p>\n<p><img src=\"/media/158300473458_0.png\" alt=\"\"></p>\n<p>Initially I made my data importer in grails, and was hardcoding column names\nknowing full well this was really inflexible. At the same time I was also trying\nto \"iterate\" on my database schema, and I'd want to re-import my data to test it\nout, but it was really really slow. I tried many different approaches to try to\nspeed this up such as cleanUpGorm, StatelessSessions, and other tricks, but it\nwould take 10-20 minutes for imports on a 100KB input file.</p>\n<p>What I basically realised is that for bulk data import</p>\n<ol>\n<li>\n<p>Using the ORM is really painful for bulk import.</p>\n</li>\n<li>\n<p>If you can pre-process your data so that it is already in the format the\ndatabase expects, then you can use the CSV COPY command which is very fast</p>\n</li>\n<li>\n<p>If you can then abandon the ORM mentality and even ignore it as a convenience\nfactor, then you can embrace my database system itself</p>\n</li>\n</ol>\n<p>Overall, after all this work, it just seemed like ORM treats the database as a\ndanger and something to be heavily abstracted over, but I actually found joy in\nlearning how to treat my database as a first class citizen. Soon I started\ngaining appreciation of</p>\n<ul>\n<li>using plain SQL queries</li>\n<li>learning about full text search in postgres with ts_query</li>\n<li>learning about triggers to make a \"last updated\" field get updated\nautomatically</li>\n</ul>\n<p>I am pretty happy this way, and although I miss some things like criteria\nqueries which are very powerful, I am happy that I can interact with my database\nas a friend</p>\n<p>At the very least, due to the fact that I now pre-process the data before\ndatabase loading, I can now import large amounts of data super fast with the CSV\nCOPY command</p>"}},"__N_SSG":true}