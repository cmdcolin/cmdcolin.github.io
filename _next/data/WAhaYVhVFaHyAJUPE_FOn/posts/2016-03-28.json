{"pageProps":{"post":{"title":"Running nginx on containerised travis-CI pt 2","date":"2016-03-28","slug":"2016-03-28","html":"<p>There are several guides out there about how to setup nginx on travis-CI but I\nstill found it to be a challenge, especially finding a modern one that works\nwith the containerized builds. I was frustrated that things like\n<code>SimpleHTTPServer</code> from python and http-server from npm did not have fully\nenough features to run our app either (a complex \"static-site generator\" type\nthing you might say), and I was also too lazy to setup \"sauce labs\" (which I\nhave not used, but presume has some better ability to run functional/browser\ntests).</p>\n<p>Essentially, the problem with running nginx under the containerized build is\nthat it \"likes to be sudo\", with many logfiles by default going to different\nplaces that only sudo has access to.</p>\n<p>This link is probably the most similar to the technique I use here, but it is\nnow gone (?) and must be accessed through the internet archive!</p>\n<p><a href=\"https://web.archive.org/web/20150919050719/http://www.doublesignal.com/running-nginx-on-containerised-travis-ci\">http://www.doublesignal.com/running-nginx-on-containerised-travis-ci</a></p>\n<p>My technique is very similar, however I use an extra trick to set the file root\nto the current directory (instead of /tmp/nowhere as in the link) by using\n\"envsubst\" to replace variables in the nginx config file.</p>\n<p>Without further ado, the .travis.yml can look like this</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">sudo</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">false</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">addons</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7\">apt</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">packages</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #ADD7FF\">nginx</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">install</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  - </span><span style=\"color: #ADD7FF\">cat tests/travis.conf | envsubst > tests/travis-envsubst.conf</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  - </span><span style=\"color: #ADD7FF\">nginx -c `pwd`/tests/travis-envsubst.conf</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">script</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  - </span><span style=\"color: #ADD7FF\">wget http://localhost:9000/yourfiles</span></span></code></pre>\n<p>Then your nginx config file can look like this</p>\n<pre><code>    worker_processes 10;\n    pid /tmp/nginx.pid;\n\n    error_log /tmp/error.log;\n\n    events {\n        worker_connections 768;\n    }\n\n    http {\n        client_body_temp_path /tmp/nginx_client_body;\n        fastcgi_temp_path     /tmp/nginx_fastcgi_temp;\n        proxy_temp_path       /tmp/nginx_proxy_temp;\n        scgi_temp_path        /tmp/nginx_scgi_temp;\n        uwsgi_temp_path       /tmp/nginx_uwsgi_temp;\n\n        server {\n            listen 9000 default_server;\n\n            server_name localhost;\n            location / {\n                root $TRAVIS_BUILD_DIR;\n                index  index.html index.htm;\n            }\n            error_log /tmp/error.log;\n            access_log /tmp/access.log;\n        }\n    }\n\n</code></pre>\n<p>Then, when travis-CI is run, it uses envsubst to replace <code>$TRAVIS_BUILD_DIR</code> in\nthe <code>tests/travis.conf</code> file, and then boots up nginx</p>"}},"__N_SSG":true}