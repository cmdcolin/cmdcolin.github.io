{"pageProps":{"allPosts":[{"title":"Using find . -exec sed is dangerous in a git repo","date":"2022-05-04","slug":"2022-05-04-findseddangerous","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      pre: \"pre\",\n      code: \"code\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"You want to find and replace all instances of a string in your repo, so you\\ngoogle \\\"find replace directory linux command\\\". You end up here\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://stackoverflow.com/a/6759339/2129219\",\n          children: \"https://stackoverflow.com/a/6759339/2129219\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"They tell us\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \\\\;\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Ignoring the fact that this syntax is very long and hard to type, this command\\nis dangerous to use in a git repository. Specifically, this can corrupt your\\n.git contents.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Why?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This command is dangerous because, find . will enumerate dotfiles, including\\nthe .git directory, and then of course will run the find and replace inside\\nthem. We can see this in the following session\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"> mkdir corruptme\\n> cd corruptme\\n> git init\\n> echo \\\"# README\\\" > README.md\\n> git add README.md\\n> git commit -m \\\"Initial commit\\\"\\n> echo \\\"Hello world, it is a beautiful day. I sure hope someone doesn't corrupt this git repository\\\" >> README.md\\n> git commit -am \\\"Update README.md\\\"\\n> find .                                                                                                                                             master âœ±\\n.\\n./README.md\\n./.git\\n./.git/branches\\n./.git/config\\n./.git/COMMIT_EDITMSG\\n...more stuff...good indication the next command might be dangerous....\\n> find ./ -type f -exec sed -i -e \\\"s/README/CORRUPTME/g\\\" {} \\\\;\\n> git status\\nerror: index uses md extension, which we do not understand\\nfatal: index file corrupt\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this case, you may be able to recover it e.g. with\\nhttps://stackoverflow.com/questions/1115854/how-to-resolve-error-bad-index-fatal-index-file-corrupt-when-using-git\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you happened to replace some random text that is actually in an object file though e.g. .git/objects\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"> find ./ -type f -exec sed -i -e \\\"s/VHTHJM/OOOOOO/g\\\" {} \\\\;\\n> git status\\nerror: inflate: data stream error (incorrect data check)\\nerror: corrupt loose object '26cfc5964dfa5355a1747eb6eec6250aab5212d5'\\nfatal: unable to read 26cfc5964dfa5355a1747eb6eec6250aab5212d5\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"What is better?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"My take: Use ruplacer \", _jsx(_components.a, {\n          href: \"https://github.com/dmerejkowsky/ruplacer\",\n          children: \"https://github.com/dmerejkowsky/ruplacer\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This tool won't try to replace stuff in your .git directory. It will also skip\\nanything in .gitignore including e.g. node_modules. I was delighted to discover\\nthis tool so, just spreading the word\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"Cognitive reframing","date":"2022-03-03","slug":"2022-03-02-dont-let-it-get-to-you","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"A big part of my recent career has not been technical but emotional learning\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This has been very hard, but the benefits are worth it\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A lot of it is mental reframing\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Meetings\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Make a mental note of things you are grateful for, can do this before a\\nmeeting to make sure you go in with a positive attitude\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Deep breathing, especially if you feel anxious\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Try not to drop bombs of negativity during a meeting, and at least consider\\nyour tone when saying things\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Don't try to complain about things that are broken too much. It is\\nmean and cruel and demoralizes everyone\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"In your off time\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Try not to dwell on the things that are broken. You are smart. You will fix\\nthem in time. It doesn't help to put your anxiety levels so high\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Remote work anxieties/feeling appreciated\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"If someone isn't getting back to your issues, don't take it personally. Try\\nreviewing their code, or check in with them\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"If you don't feel appreciated, also try not to take it personally. Instead,\\ntry to exude positivity in your own life\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Try not to be a hero programmer https://incident.io/blog/no-capes\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This cognitive reframing is extremely important and you can apply it to\\nmany areas of your life. You tell your own personal story, and what goes on\\nin your head makes it to the real world through your behavior.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"Memoizing async functions so that you don't cache errors","date":"2022-02-26","slug":"2022-02-26-memoize-async","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      pre: \"pre\",\n      code: \"code\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"There are two hard problems in computer science: \", _jsx(_components.a, {\n          href: \"https://martinfowler.com/bliki/TwoHardThings.html\",\n          children: \"Cache invalidation and naming\\nthings\"\n        }), \". In this post we'll\\nshow how memoize an async function, and how to invalidate the memoization when\\nthe promise throws an error.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This helps us with being able to re-try because since the error is not cached,\\ncalling it again after an error retries automatically.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Example async function: fetch from the pokemon API\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"async function getPokemon() {\\n  const id = Math.floor(Math.random() * 150)\\n  const url = 'https://pokeapi.co/api/v2/pokemon/' + id\\n  const ret = await fetch(url)\\n  if (!ret.ok) {\\n    throw new Error(\\n      `Failed to fetch ${url} HTTP ${ret.status} ${ret.statusText}`,\\n    )\\n  }\\n  return ret.json()\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here is a technique that can be used to memoize this function\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"function getPokemonMemoized() {\\n  if (!this.promise) {\\n    this.promise = getPokemon().catch(e => {\\n      this.promise = undefined\\n      throw e\\n    })\\n  }\\n  return this.promise\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The promise is held in this.promise, and the important part of this function is\\nthat when I get an error, I clear this.promise and re-throw the error. The caller\\nof the function, on error, will receive the error message, but caching will not\\ntake place, allowing retries to take place later on.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"See https://cmdcolin.github.io/pokemon.html for demo\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 0: Arguments to function\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If your function takes arguments, then you can use a hashmap associating the\\nargument with the promise. You may also consider using an LRU cache so that\\nyour hashmap doesn't grow infinitely in size\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Generally you need a way to stringify or otherwise make them able to be stored\\nin a Map or Object to do this.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"See https://github.com/nodeca/promise-memoize for example\"\n      }), \"\\n\", _jsxs(_components.h2, {\n        children: [\"Footnote 1: Error handling of \", _jsx(_components.code, {\n          children: \"fetch\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This demo also demonstrates some basic fetch error handling, and uses\\n\", _jsx(_components.code, {\n          children: \"statusText\"\n        }), \" \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText\",\n          children: \"which happens to not exist in\\nHTTP/2\"\n        }), \".\\nIf you want a semblence of status message text in HTTP/2 you can try to use\\nawait ret.json() (if the API returns json error messages) or await ret.text()\\ninside the catch clause, but note that it could cause yet another error to be\\nthrown\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 2: Global cache\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You could also keep a cache in a global variable, or as a property on a class,\\nor other methods. I have also found it useful to have a specific function for\\nclearing the cache, so you can get a clean slate each time a test runs in unit\\ntesting or similar\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"let promise\\nasync function getPokemonMemoized() {\\n  if (!promise) {\\n    promise = getPokemon().catch(e => {\\n      promise = undefined\\n      throw e\\n    })\\n  }\\n  return promise\\n}\\nfunction clearCache() {\\n  promise = undefined\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can also make a general purpose utility to memoize any promise function\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"function memoize(fn) {\\n  let promise\\n  return () => {\\n    if (!promise) {\\n      promise = fn().catch(e => {\\n        promise = undefined\\n        throw e\\n      })\\n    }\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 3 - Aborting\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you want to handle aborting, it is a bit trickier. Aborting in javascript is\\nhandled by\\n\", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController\",\n          children: \"AbortController\"\n        }), \".\\nThis is an object that gives you an\\n\", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\",\n          children: \"AbortSignal\"\n        }), \"\\nthat can be passed to fetch calls and the like to stop a big download from\\nhappening.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In our above example, if we passed an abort signal to the first call to fetch,\\nand then aborted it, it would abort the fetch, \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\",\n          children: \"which throws a DOMException\\ncalled\\n\\\"AbortError\\\"\"\n        }), \".\\nYou can detect that it is an AbortError like this, and may choose not to\\ndisplay or re-throw the abort exception\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"function isAbortException(e) {\\n  return e instanceof Error && exception.name === 'AbortError'\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Now, what if 5 functions call getPokemonMemoized(), all passing different abort\\nsignals. What if the first one aborts? Then all the rest will get aborted also.\\nBut what if we only want to abort the cached call if literally all of them\\naborted? Then we may have to synthesize an abortcontroller inside our function\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-javascript\",\n          children: \"let promise\\nlet abortcontroller\\nlet listeners = 0\\nasync function getPokemonMemoized(signal) {\\n  if (!promise) {\\n    abortcontroller = new AbortController()\\n\\n    // synthesize a new signal instead of using the passed in signal\\n    promise = getPokemon(abortcontroller.signal).catch(e => {\\n      promise = undefined\\n      throw e\\n    })\\n  }\\n  if (signal) {\\n    listeners++\\n    // add listener to the passed in signal\\n    signal.addEventListener('abort', () => {\\n      listeners--\\n      if (listeners === 0) {\\n        abortcontroller.abort()\\n      }\\n    })\\n  }\\n  return promise\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A library my team created,\\n\", _jsx(_components.a, {\n          href: \"https://github.com/GMOD/abortable-promise-cache\",\n          children: \"abortable-promise-cache\"\n        }), \",\\ntries to help with this scenario with a cleaner abstraction.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 4\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I have been playing through Pokemon Yellow and find it really amusing hence the\\npokemon theme\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Fun stuff: The cutting room floor wiki with unused moves, sounds, and sprites\\nin Pokemon Yellow https://tcrf.net/Pok%C3%A9mon_Yellow\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 5\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This blog post mentioned in a comment thread https://zansh.in/memoizer.html has\\ngreat interactive examples and shows the \\\"invalidate on .catch()\\\" behavior!\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"Ukraine","date":"2022-02-24","slug":"2022-02-24-ukraine","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"As Russia is actively invading Ukraine my heart goes out to them.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Even if I had no personal connection with Ukraine, I would find this abhorrent,\\nbut I do have personal connections to Ukraine in various ways that makes me\\nthink of them more fondly\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My first, and so far only, consulting job was with a company in Ukraine, around 2012. I helped them configure JBrowse, and prepared an official looking word\\ndocument with recommendations and hours (a total of like...2 hours) and they\\nwere very nice.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Stand strong Ukraine\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Lesser_Coat_of_Arms_of_Ukraine.svg/172px-Lesser_Coat_of_Arms_of_Ukraine.svg.png\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"Back when I was a noise musician...","date":"2022-02-15","slug":"2022-02-15-noise","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Found this photo of myself from a photo book published by john cates called\\nauditory depravation...great documentation of michigan area noise activity. I\\nam actually the last photo in the book amongst so many amazing\\nartists...totally honored. I forgot I was even in the book when I picked it up\\nrandomly.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"thank you john cates!!!\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/cover-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"cover\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/out20-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"index p1\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/out21-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"index p2\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/out22-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"index p3, i'm last as xephedradap\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/out15-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"me\"\n      }), \"\\n\", _jsx(\"img\", {\n        src: \"/photos/noise/out16-crop-fs8.png\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"abstract b/w\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"some photos from the book here https://www.johncatesphoto.com/noise\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://soundcloud.com/xephedradap/amazingnoisetreasure\",\n            children: \"lightyear fluctuations\"\n          }), \" (hnw)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://soundcloud.com/xephedradap/symptomatic-of-extreme-decay\",\n            children: \"symptomatic of extreme decay\"\n          }), \" (circuit bent hnw)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.a, {\n            href: \"https://soundcloud.com/xephedradap/2016-10-10-13-35-49a\",\n            children: \"2016-10-10-13-35-49a\"\n          }), \" (circuit bent drum machine)\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I will make more noise soon...stay tuned\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"Structural variants and the SAM format - the long (reads) and short (reads) of it","date":"2022-02-06","slug":"2022-02-06-sv-sam","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      h3: \"h3\",\n      strong: \"strong\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      img: \"img\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" specification is pretty amazing\\nhttps://samtools.github.io/hts-specs/SAMv1.pdf but it is also fairly terse and\\nabstract. True understanding might come from playing with real world data, but\\nI will try to relay some things I have learned, especially as they relate to\\nstructural variants.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Disclaimer: I'm a developer of JBrowse 2. This document has some screenshots\\nand links for it, feel free to try it at https://jbrowse.org\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also note: When I refer to a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" record in this document, it could come from\\na \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \", \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \", or \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" file as \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" are just alternative\\nencodings of \", _jsx(_components.code, {\n          children: \"SAM\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Basics\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file and how does it relate to \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \"?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file \", _jsx(_components.strong, {\n          children: \"generally\"\n        }), \" contains \\\"reads\\\" from a sequencer, with information\\nabout how they are mapped to a reference genome [1][2]. The raw unaligned reads\\nare often stored in \", _jsx(_components.code, {\n          children: \"FASTQ\"\n        }), \" format files. The reads from \", _jsx(_components.code, {\n          children: \"FASTQ\"\n        }), \" format are\\nthen inputted into an aligner such as \", _jsx(_components.code, {\n          children: \"bwa\"\n        }), \", \", _jsx(_components.code, {\n          children: \"bowtie\"\n        }), \", \", _jsx(_components.code, {\n          children: \"minimap2\"\n        }), \" (there are\\nmany others) which map the reads to a reference genome, and output \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"\\nformat.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"SAM\"\n        }), \" is a text format that you can read with your text editor. \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and\\n\", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" are compressed representations of the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" format.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can convert \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" with samtools\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"samtools view file.sam -o file.bam\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A slightly modified command converts \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" (requires -T argument to\\nspecify your reference sequence)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"samtools view -T reference.fa file.sam -o file.cram\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also see Appendix C: piping FASTQ from \", _jsx(_components.code, {\n          children: \"minimap2\"\n        }), \" directly to CRAM\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[1] \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" can contain any type of sequence, not specifically reads. If you\\ncreated a de novo assembly, you could align the contigs of the de novo assembly\\nto a reference genome and store the results in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[2] Does not always have to have information about mapping to a reference\\ngenome. You can also store unaligned data in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" (so-called\\n\", _jsx(_components.code, {\n          children: \"uBAM\"\n        }), \" for example) but most of the time, the reads in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" format are aligned\\nto a reference genome.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file contains a header (\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" files also have the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"\\nheader) and a series of records. A record is a single line in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, and\\nit generally corresponds to a single read, but as we will see, a split\\nalignment may produce multiple records that refer to the same source read.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note: if a read failed to align to the reference genome, it may still be in\\nyour \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, marked as unmapped using the flag column. Sometimes, \\\"dumpster\\ndiving\\\" (looking at the unmapped records from a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file) can be used to aid\\nstructural variant searches (e.g. there may be novel sequence in there not from\\nthe reference genome that could be assembled)\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is a \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string is a \\\"compact idiosyncratic gapped alignment report\\\". Yes,\\nthat's an acronym.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Examples of \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" strings\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" strings could look be \", _jsx(_components.code, {\n              children: \"50M\"\n            }), \" which means 50 bases \\\"matched\\\". There\\nare no insertions or deletions. There could be underlying mismatches in this\\nsequence that only comparing to a reference sequence would tell you\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Another \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" string with insertions and deletions could be \", _jsx(_components.code, {\n              children: \"50M1D1I50M\"\n            }), \".\\nThis string had a deletion and an insertion back to back. This could be just\\na mismatch! There is ambiguity in sequence alignment representations.\\nDownstream programs must accomodate this.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"Another \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" string with soft-clipping \", _jsx(_components.code, {\n              children: \"500S50M\"\n            }), \" this means that 500 bases\\nof the read were not aligned at this position, but 50 bases were! Note that\\nthe alignment might have been a split alignment (see seciton on split\\nalignments below) so another record in the \", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" file might contain info on\\nwhere the other 500 bases aligned, or they might just be fully unaligned.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"See SAMv1.pdf for all the CIGAR operators.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And also: â™« don't fear the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" â™«\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you are working with \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" data, you will often write loops that directly\\nparse CIGAR strings. See Appendix B for handy functions for parsing \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \"\\nstrings.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is an \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" string\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" string is a tag in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file that helps tell you where the mismatches\\nare, and can be combined with a \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" to get the position of the mismatches\\nwithout looking at a reference genome.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" string is commonly seen in \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" files (not generally \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" because\\nit already uses reference compression and requires a reference sequence to\\ndecode). The \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag contains information about deletions (including the bases\\nof the reference genome, which would otherwise not be indicated) and mismatches\\n(same, indicating the base of the reference genome at a SNPs position), but not\\ninsertions.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The command \", _jsx(_components.code, {\n          children: \"samtools calmd yourfile.bam --reference reference.fa\"\n        }), \" can add \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \"\\ntags to your \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" file. Note that there are some oddities about \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tags\\nleading to complaints (e.g. https://github.com/samtools/hts-specs/issues/505)\\nbut the \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag can be helpful if you want to decode a file without referring\\nto it's reference.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Detecting SVs from long reads\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Long reads offer a wide array of methods for detecting SVs\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Insertions/deletions: Long reads can completely span moderate sized\\ninsertions and deletions, indicated by \", _jsx(_components.code, {\n            children: \"I\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"D\"\n          }), \" in a \", _jsx(_components.code, {\n            children: \"CIGAR\"\n          }), \" string. If it\\ndoes not completely span it, it may be split alignment (for a deletion) or\\nclipped (for an insertion)\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Translocations: A split alignment can span inter-chromosomal translocations,\\nso part of the read maps to one chromosome and one part maps to the other\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Inversions: A split alignment can span an inversion, the long read is split\\ninto multiple parts, one part of it aligns in the reverse orientation, while\\nthe other part aligns in the forward orientation\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note that there are many different methods for detecting SVs from long reads,\\ne.g. not all use mapped reads from SAM files, some use de novo assembly, but\\nit is still useful to be familiar with mapped read methods.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"What are split alignments?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Split alignments, or chimeric alignments, are alignments where part of the read\\naligns to perhaps chr1, and part of it maps to perhaps chr4. It is worth\\nreading the definition of \\\"Chimeric alignment\\\" from\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" when you get the\\nchance.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Split alignments are especially common with long reads, and it can indicate\\nthat there may be a structural variant where the two chromosomes are fused\\ntogether (which may create gene fusions, or other types of phenomena).\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There is no limitation on how many splits might occur so the split can align to\\n3, 4, or more different places. Each part of the split puts a new line in the\\nSAM file, and note that all the records also have the same \", _jsx(_components.code, {\n          children: \"QNAME\"\n        }), \" (first\\ncolumn of \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"). As\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" tells us, one\\nrecord is marked as \\\"representative\\\", I call this the \\\"primary\\\" record, while\\nthe other components of the split read are maked supplementary, given the 2048\\nflag. Only the \\\"primary\\\" record generally has a \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" field.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note: split alignments are different from \\\"multi-mappers\\\" where the entire read\\nmaps maps equally well to, say, chr4 and chr1. Split reads maps part to chr1,\\nand part to chr4. See again the\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" for the definition\\nof multi-mapping\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag is outputted on each part of the split alignment, e.g. the primary\\ncontains an \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag that refers to all the locations, \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" strings, and\\nmore for all the supplementary reads, and each of the supplementary reads also\\ncontains an \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag that refers to the primary alignment and each other\\nsupplementary alignment.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Fun fact: The \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag conceptually can result in a 'quadratic explosion' of\\ndata, because each part of the split contains references to every other part.\\nFor example, if a read is split into 4 pieces, then each record would would\\nhave an SA tag with 3 segments, so 3*4 segments will be documented in the\", _jsx(_components.code, {\n          children: \"SA\"\n        }), \"\\ntag. In many cases, this is not a problem, but if you imagine a finished\\nchromosome aligned to a draft assembly, it may get split so many times this\\ncould be a factor.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Visualizing split reads across a breakend or translocation\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This is a specialized JBrowse 2 feature, but if there is an inter-chromosomal\\ntranslocation, you can load this into JBrowse and visualize support for this\\nevent using our \\\"breakpoint split view\\\". This\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We also have a workflow called the \\\"SV inspector\\\" that helps you setup the\\n\\\"breakpoint split views\\\"\\n(https://jbrowse.org/jb2/docs/user_guide/#sv-inspector). The SV inspector works\\nbest on Breakend spec events and <TRA> (translocation) events from VCF,\\nor BEDPE formatted SV calls, and you can launch the \\\"breakpoint split view\\\"\\nfrom the \\\"SV inspector\\\"\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/breakpoint_split_view.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Visualizing a 'read vs reference' view given a split alignment\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If we are given the the primary alignment of an arbitrary split read, then we\\ncan construct what that split looks like compared to the reference genome.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If we are not given the primary alignment (e.g. we are starting from a\\nsupplementary alignment) then we can search the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" list for the one that is\\nprimary, because at least one will be.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now that we have the primary alignment, it will have the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" (of the entire\\nread, the supplementary alignments typically have a blank \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \"!) and the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \"\\ntag containing the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" of all the different parts of the split. We can then\\nconstruct how the entire read, not just a particular record of the split\\nalignment, compares to the genome. In JBrowse 2 we implemented this and it uses\\na synteny-style rendering. This functionality also exists in GenomeRibbon\\n(https://genomeribbon.org)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/linear_alignment.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Figure showing JBrowse 2 piecing together a long read vs the reference genome\\nfrom a single read\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In order to do this reconstruction, JBrowse 2 takes the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" strings of the\\nprimary alignment and each of the pieces of the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag (it is a semi-colon\\nseparated list of chunks), sort them by the amount of softclipping (the\\nsoftclipping values will progressively trim off more of the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" telling you\\nit aligned further and further on in the long read), and then this tells me\\nwhere each piece of the split alignment came from in the original \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \", so we\\ncan plot the alignments of the read vs the reference genome using synteny style\\ndisplay.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"SAM vs VCF - Breakends vs split alignments\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An interesting outcome (to me) is that from a single record in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, I\\ncan reconstruct the \\\"derived\\\" genome around a region of interest from a single\\nread.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If I was to try to do this with the \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" Breakend specification (section 5.4\\nof \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/VCFv4.3.pdf\",\n          children: \"VCF4.3.pdf\"\n        }), \"), it may\\nactually be more challenging than from a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" read. This is because a Breakend\\nin \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" format is only an edge in a graph (and the sequences are nodes).\\nTherefore, in order to properly reconstruct a structural variant from a \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \"\\nwith Breakends, I would have to construct a graph and decode paths through it.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I like the ability to reconstruct the derived genome from a single read, but it\\ncan be noisy. That said, de novo assembled contigs can also be stored in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"\\nformat and is significantly less noisy (being composed of the aggregate\\ninformation of many reads).\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The point though is that interpretation of the \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" breakend specification is\\nchallenging due to imposing a sequence graph on the genome, while the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag\\nremains just a simple set of linear alignments that can easily be pieced\\ntogether, and you only need to refer to a single record in the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file to do\\nso.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I am not aware of a lot of tools that work on the VCF Breakend graph, and\\nexpect more will need to be created to truly work with this standard. An\\ninversion for example may create 4 record in the VCF file (see section 5.4 in\\nthe \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/VCFv4.3.pdf\",\n          children: \"VCF4.3.pdf\"\n        }), \" for\\nexample), and needs careful interpretation.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Haplotype tagged reads\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A new trend has been to create \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" files with tagged reads,\\nwhich tells us which haplotype a read was inferred to have come from. This is\\ncommonly done with the \", _jsx(_components.code, {\n          children: \"HP\"\n        }), \" tag, which might have \", _jsx(_components.code, {\n          children: \"HP=0\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"HP=1\"\n        }), \" for a\\ndiploid genome. Tools like \", _jsx(_components.code, {\n          children: \"whatshap\"\n        }), \" can add these tags to a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, and\\nIGV and JBrowse 2 can color and sort by these tags.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/color_by_tag.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Screenshot of JBrowse 2 with the \\\"Color by tag\\\" and \\\"Sort by tag\\\" setting\\nenabled (coloring and sorting by the HP tag) letting us see that only one\\nhaplotype has a deletion. Tutorial for how to do this in JBrowse 2 here\\nhttps://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"How do you detect SVs with paired-end reads?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Paired-end reads are short reads, e.g. 150bp each. This makes them unable to\\nrecover some large structural variants.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"However, paired-end reads have a number of attributes that can be used to\\ndetect paired end reads\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Distance between pairs being abnormally large or short\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The distance between pairs is encoded by the \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" column in the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" format.\\nThe distance between pairs with good mapping is relatively constant and called\\nthe \\\"insert length\\\". This comes from how the sequencing is done: paired-end\\nsequencing performs sequencing on both ends of a fragment.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"But, if you are mapping reads vs the reference genome, and you observe that\\nthey are abnormally far apart, say 50kb apart instead of 1kb apart, this may\\nindicate there your sample contains a deletion relative to the reference.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/aberrant_size.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Screenshot of JBrowse 1 with \\\"View as pairs\\\" enabled, and large insert size\\ncolored as red (from https://jbrowse.org/docs/paired_reads.html). Note that\\nsome of JBrowse 1's View as pairs features are not yet available in JBrowse 2\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"An abundance of reads being \\\"clipped\\\" at a particular position\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This can indicate that part of the reads map well, but then there was an abrupt\\nstop to the mapping. This might mean that there is a sequence that was an\\ninsertion at that position, or a deletion, or a translocation.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The clipping is indicated by the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string, either at the start or end of\\nit by an \", _jsx(_components.code, {\n          children: \"S\"\n        }), \" or an \", _jsx(_components.code, {\n          children: \"H\"\n        }), \". The \", _jsx(_components.code, {\n          children: \"S\"\n        }), \" indicates \\\"soft clipping\\\", and indicates that\\nthe sequence of the clipped portion can be found in the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" field of the\\nprimary alignment. The \", _jsx(_components.code, {\n          children: \"H\"\n        }), \" is hard clipped, and the sequence that is hard\\nclipped will not appear in the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/clipping_pileup.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Screenshot of JBrowse 2 showing blue clipping indicator with a \\\"pileup\\\" of\\nsoft-clipping at a particular position shown in blue. The clipping is an\\n\\\"interbase\\\" operation (it occurs between base pair coordinates) so it is\\nplotted separately from the normal coverage histogram.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/show_soft_clipping.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot of JBrowse 2 showing an insertion with Nanopore (top), PacBio\\n(middle) and Illumina short reads. The long reads may completely span the\\ninsertion, so the CIGAR string on those have an \", _jsx(_components.code, {\n          children: \"I\"\n        }), \" operator and are indicated\\nby the purple triangle above the reads. For the short reads, the reads near the\\ninsertion will be clipped since they will not properly map to the reference\\ngenome and cannot span the sinsertion. The \\\"Show soft clipping\\\" setting in\\nJBrowse 2 and IGV can be used to show visually the bases that extend into the\\ninsertion (shown on the bottom track).\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Unexpected pair orientation\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With standard paired end sequencing, the pairs normally point at each other\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"forward reverse\\n --->    <---\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If the stranded-ness of the pair is off, then it could indicate a structural\\nvariant. See Appendix A for a handy function for calculating pair orientation.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This guide from IGV is helpful for interpreting the pair directionality with\\npatterns of SVs using \\\"Color by pair orientation\\\"\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/inverted_duplication.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Figure: This shows an inverted (tandem) duplication in 1000 genomes data. The\\ntandem duplication can produce green arrows which have reads pointing in\\nopposite directions e.g. \", _jsx(_components.code, {\n          children: \"<--\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"-->\"\n        }), \", while blue arrows which can indicate\\nan inversion point in the same direction e.g. \", _jsx(_components.code, {\n          children: \"-->\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"-->\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Caveat about TLEN\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" is a field in the SAM format that is somewhat ill defined,\\nat least in the sense that different tools may use it differently\\nhttps://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If needed, you can calculate \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" yourself if you process the file yourself\\n(e.g. process all reads, get the actual records for the pairs, and calculate\\ndistance) but I have not had trouble with relying on the \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" from the data\\nfiles themselves.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Calling copy number variants with your short or long reads\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Another type of SV that you can get from your \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" files are copy number\\nvariants (CNVs). By looking at the depth-of-coverage for your data files, you\\ncan look for abnormalities that may indicate copy number variants. By using a\\ntool like \", _jsx(_components.code, {\n          children: \"mosdepth\"\n        }), \", you can quickly get a file showing the coverage across\\nthe genome.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be aware that if you are comparing the coverage counts from different tools,\\nthat they have different defaults that may affect comparison. Some discard\\n\", _jsx(_components.code, {\n          children: \"QC_FAIL\"\n        }), \", \", _jsx(_components.code, {\n          children: \"DUP\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"SECONDARY\"\n        }), \" flagged reads. This is probably appropriate,\\nand corresponds to what most genome browsers will display (see\\nhttps://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af for a short\\nsummary of depth calculated from different tools)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note that both long and short reads can be used for CNV detection. Long reads\\nmay give more accurate measurements also, with their better ability to map\\nsmoothly through difficult regions of the genome.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/coverage_cnv.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot showing coverage in BigWig format from nanopore reads on normal and\\ntumor tissue from a melanoma cancer cell line (COLO829) plotted using JBrowse 2\\n(\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/code/jb2/v1.6.4/?config=test_data%2Fconfig_demo.json&session=share-MZj3d18lzH&password=3X7bS\",\n          children: \"demo\"\n        }), \"\\nand\\n\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/jb2/docs/user_guide/#viewing-whole-genome-coverage-for-profiling-cnv\",\n          children: \"tutorial\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"The future, with graph genomes and de-novo assemblies\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Currently, SV visualization is highly based on comparing data versus a\\nreference genome (and the SAM format is a signature of this: it stores data in\\nterms of reference genome coordinates). In the future, SV visualization may\\nlook more similar to comparative genomics, where we compare an SV to a\\npopulation specific reference from a graph genomes or something like this.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It is known that de-novo assembly has more power to detect SVs than some read\\noperations (https://twitter.com/lh3lh3/status/1362921612690010118/photo/1) so\\nas de novo assembled genomes improve and become more widespread, we may see a\\nshift in how SVs are called\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I would also like to see improved ability to do fast or 'on the fly' gene\\nprediction on the de novo assembled genomes, and we can see what SNPs or\\nmodified splicing might occur in CNV copies of genes.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Algorithms that actually call structural variants face many challenges, but\\nunderstanding how the reads are encoded in SAM format, and seeing what they\\nlook like in the genome browser is a useful first step to gaining a better\\nunderstanding.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In summary, some of the signatures of SVs may include:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Aberrant insert size (\", _jsx(_components.code, {\n            children: \"TLEN\"\n          }), \") detection (longer for deletion, shorter for\\ninsertion)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Split-read detection (\", _jsx(_components.code, {\n            children: \"SA\"\n          }), \" tag)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"CIGAR string processing (\", _jsx(_components.code, {\n            children: \"D\"\n          }), \" operator for deletions, \", _jsx(_components.code, {\n            children: \"I\"\n          }), \" operator for\\ninsertions)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Over-abundance of clipping (\", _jsx(_components.code, {\n            children: \"S\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"H\"\n          }), \" operators in \", _jsx(_components.code, {\n            children: \"CIGAR\"\n          }), \")\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Depth of coverage changes for CNVs\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Aligning de novo assembly vs a reference genome\\n(https://twitter.com/lh3lh3/status/1362921612690010118/photo/1) which can\\noutput \", _jsx(_components.code, {\n            children: \"SAM\"\n          }), \", but it can also output\\n\", _jsx(_components.a, {\n            href: \"https://github.com/lh3/miniasm/blob/master/PAF.md\",\n            children: _jsx(_components.code, {\n              children: \"PAF\"\n            })\n          }), \" format (which can\\nbe loaded in JBrowse 2 in the synteny views). Techniques of detecting SVs on\\nPAF will be fundamentally pretty similar to the techniques listed above but\\nmay look a bit different (see \", _jsx(_components.code, {\n            children: \"cs\"\n          }), \" tag in PAF for example)\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you have any ideas I should include here, let me know!\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix A: Parsing CIGAR strings\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This is code that can help determine the pair orientation from a single BAM\\nrecord. Might be too much detail but follow along\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// @param flags - flags from a single read\\n// @param ref - the string of the reference sequence, just used to determine if it matches rnext\\n// @param rnext - the string of the RNEXT, just used to determine if it matches ref\\n// @param tlen - the TLEN field from SAM\\n// @return e.g. F1R2 normal paired end orientation\\nfunction getPairOrientation(\\n  flags: number,\\n  ref: string,\\n  rnext: string,\\n  tlen: number,\\n) {\\n  // this read is not unmapped &&\\n  // this read's mate is also not unmapped &&\\n  // this read's mate is on the same reference genome\\n  if (!flags & 4 && !flags & 8 && ref === rnext) {\\n    const s1 = flags & 16 ? 'R' : 'F'\\n    const s2 = flags & 32 ? 'R' : 'F'\\n    let o1 = ' '\\n    let o2 = ' '\\n\\n    // if first in pair\\n    if (flags & 64) {\\n      o1 = '1'\\n      o2 = '2'\\n    }\\n\\n    // else if second in pair\\n    else if (flags & 128) {\\n      o1 = '2'\\n      o2 = '1'\\n    }\\n\\n    const tmp = []\\n    if (tlen > 0) {\\n      tmp[0] = s1\\n      tmp[1] = o1\\n      tmp[2] = s2\\n      tmp[3] = o2\\n    } else {\\n      tmp[2] = s1\\n      tmp[3] = o1\\n      tmp[0] = s2\\n      tmp[1] = o2\\n    }\\n    return tmp.join('')\\n  }\\n  return null\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then this can be broken down further by orientation type\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Paired end reads are \\\"fr\\\"\\nMate pair reads are \\\"rf\\\"\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So you can interpret e.g. F1R2 in relation to being a paired end read (fr) or mate pair (rf) below and with this link https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"fr\\\": {\\n    \\\"F1R2\\\": \\\"LR\\\",\\n    \\\"F2R1\\\": \\\"LR\\\",\\n\\n    \\\"F1F2\\\": \\\"LL\\\",\\n    \\\"F2F1\\\": \\\"LL\\\",\\n\\n    \\\"R1R2\\\": \\\"RR\\\",\\n    \\\"R2R1\\\": \\\"RR\\\",\\n\\n    \\\"R1F2\\\": \\\"RL\\\",\\n    \\\"R2F1\\\": \\\"RL\\\"\\n  },\\n\\n  \\\"rf\\\": {\\n    \\\"R1F2\\\": \\\"LR\\\",\\n    \\\"R2F1\\\": \\\"LR\\\",\\n\\n    \\\"R1R2\\\": \\\"LL\\\",\\n    \\\"R2R1\\\": \\\"LL\\\",\\n\\n    \\\"F1F2\\\": \\\"RR\\\",\\n    \\\"F2F1\\\": \\\"RR\\\",\\n\\n    \\\"F1R2\\\": \\\"RL\\\",\\n    \\\"F2R1\\\": \\\"RL\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix B - CIGAR parsing\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// @param cigar: CIGAR string in text form\\nfunction parseCigar(cigar: string) {\\n  return cigar.split(/([MIDNSHPX=])/)\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then parse the returned array two at a time\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// this function does nothing, but is informative for how to parse interpret a\\n// CIGAR string\\n// @param cigar:CIGAR string from record\\n// @param readSeq: the SEQ from record\\n// @param refSeq: the reference sequence underlying the read\\nfunction interpretCigar(cigar: string, readSeq: string, refSeq: string) {\\n  const opts = parseCigar(cigar)\\n  let qpos = 0 // query position, position on the read\\n  let tpos = 0 // target position, position on the reference sequence\\n  for (let i = 0; i < ops.length - 1; i += 2) {\\n    const length = parseInt(opts[i], 10)\\n    const operator = opts[i + 1]\\n    // do things. refer to the CIGAR chart in SAMv1.pdf for which operators\\n    // \\\"consume reference\\\" to see whether to increment\\n    if (op === 'M' || op === '=') {\\n      // matches consume query and reference\\n      qpos += len\\n      tpos += len\\n    }\\n    if (op === 'I') {\\n      // insertions only consume query\\n      // sequence of the insertion from the read is\\n      const insSeq = readSeq.slice(qpos, qpos + len)\\n      qpos += len\\n    }\\n    if (op === 'D') {\\n      // deletions only consume reference\\n      // sequence of the deletion from the reference is\\n      const delSeq = refSeq.slice(tpos, tpos + len)\\n      tpad += len\\n    }\\n    if (op === 'N') {\\n      // skips only consume reference\\n      // skips are similar to deletions but are related to spliced alignments\\n      tpad += len\\n    }\\n    if (op === 'X') {\\n      // mismatch using the extended CIGAR format\\n      // could lookup the mismatch letter in a string containing the reference\\n      const mismatch = refSeq.slice(tpos, tpos + len)\\n      qpos += len\\n      tpos += len\\n    }\\n    if (op === 'H') {\\n      // does not consume query or reference\\n      // hardclip is just an indicator\\n    }\\n    if (op === 'S') {\\n      // softclip consumes query\\n      // below gets the entire soft clipped portion\\n      const softClipStr = readSeq.slice(qpos, qpos + len)\\n      qpos += len\\n    }\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note for example, that to determine how long a record is on the reference\\nsequence, you have to combine the records start position with the CIGAR string,\\nbasically parsing the CIGAR string to add up tpos and return tpos\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix C - align FASTQ directly to CRAM\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This example from the htslib documentation\\n(http://www.htslib.org/workflow/fastq.html) shows how you can stream directly\\nfrom \", _jsx(_components.code, {\n          children: \"FASTQ\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" (and generate the index file .crai too)\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"minimap2 -t 8 -a -x sr reference.fa reads1.fq reads2.fq  | \\\\\\nsamtools fixmate -u -m - - | \\\\\\nsamtools sort -u -@2 - | \\\\\\nsamtools markdup -@8 --reference reference.fa - --write-index final.cram\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you want, you can make this a little shell script, easy_align.sh\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"#!/bin/bash\\nminimap2 -t 8 -a -x sr \\\"$1\\\" \\\"$2\\\" \\\"$3\\\"  | \\\\\\nsamtools fixmate -u -m - - | \\\\\\nsamtools sort -u -@2 - | \\\\\\nsamtools markdup -@8 --reference \\\"$1\\\" - --write-index \\\"$4\\\"\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then call\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"bash easy_align.sh ref.fa reads1.fq reads2.fq out.cram\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This same concept works with other common aligners as well like bwa\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"How to make your own npm package with typescript","date":"2021-12-31","slug":"2021-12-31-npm-package","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      strong: \"strong\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      ol: \"ol\",\n      em: \"em\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"There is a lot of mystery around making your own \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \" package. Every package\\nlikely does it a bit differently, and it can be tricky to get a setup you like.\\nShould you use a \\\"starter kit\\\" or a boilerplate example? Or just roll your own?\\nShould you use a bundler? How do you use typescript?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"*Record scratch **\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Why don't we try starting from scratch and seeing where we can get?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"TLDR: here is a github repo with a template package\\nhttps://github.com/cmdcolin/npm-package-tutorial/\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Introduction\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \" package can be very bare bones. In some sense, npmjs.com is just an\\narbitrary file host, and you can upload pretty much anything you want to it.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The magic is in the package.json file, which tells npm:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"what files are part of your package\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"what to use as the \\\"entry point\\\" (e.g. the file that should be referenced\\nwhen you say \", _jsx(_components.code, {\n            children: \"const lib = require('mypackage')\"\n          }), \")\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"what pre- and post- processing steps should be done when the package is being\\npublished\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"and more!\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let's try an experiment...\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Initializing a package\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Open up a terminal, and run\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"mkdir mypackage\\ncd mypackage\\ngit init # make mypackage version controlled\\nnpm init\\n# or\\nyarn init\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This init command outputs something like this, and we accept the defaults\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"This utility will walk you through creating a package.json file.\\nIt only covers the most common items, and tries to guess sensible defaults.\\n\\nSee `npm help init` for definitive documentation on these fields\\nand exactly what they do.\\n\\nUse `npm install <pkg>` afterwards to install a package and\\nsave it as a dependency in the package.json file.\\n\\nPress ^C at any time to quit.\\npackage name: (mypackage)\\nversion: (1.0.0)\\ndescription:\\nentry point: (index.js)\\ntest command:\\ngit repository:\\nkeywords:\\nlicense: (ISC)\\nAbout to write to /home/cdiesh/mypackage/package.json:\\n\\n{\\n  \\\"name\\\": \\\"mypackage\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"author\\\": \\\"Colin\\\",\\n  \\\"license\\\": \\\"ISC\\\"\\n}\\n\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then, you can create a file named \", _jsx(_components.code, {\n          children: \"index.js\"\n        }), \" (in your package.json it says\\n\", _jsx(_components.code, {\n          children: \"\\\"main\\\": \\\"index.js\\\"\"\n        }), \" to refer to this file, the entrypoint)\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In your \", _jsx(_components.code, {\n          children: \"index.js\"\n        }), \" file, generally, you would do things like export a function\\nor functions. I will use commonjs exports here for maximum compatibility:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"module.exports = {\\n  hello: () => {\\n    console.log('hello world')\\n  },\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Publishing a package\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This npm package, \", _jsx(_components.code, {\n          children: \"mypackage\"\n        }), \" can now be published to \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \" with a simple\\ncommand.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm publish\\n# or\\nyarn publish\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This will prompt you for your npmjs.com username, password, email, and if\\nneeded, 2FA token (highly recommended)\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Using your package after it is published\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Once it is published, you can use it in your create-react-app app or other npm\\npackage.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install mypackage\\n# or\\nyarn add mypackage\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then you can use\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"import { hello } from 'mypackage'\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"in any of your other codebases\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Summary of the simplest NPM package\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This all seems pretty boring thus far but it tells us a couple things\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"packages can be very very bare bones\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"no transpiler or bundler is needed for publishing an npm package\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"our package can consist of a single file and it is uploaded to npm, and the\\n\\\"main\\\" field in package.json provides an entry point\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"the filename index.js is not special, probably it is a hangover from the\\nname index.html. you can use whatever name you want\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Adding typescript\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Let's try adding typescript\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To do this, we will use the typescript compiler to compile a directory of files\\nin our \\\"src\\\" directory and output the compiled files to a directory named\\n\\\"dist\\\"\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To start, let's add typescript\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install --save-dev typescript\\n# or\\nyarn add -D typescript\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Our package.json now will have \", _jsx(_components.code, {\n          children: \"typescript\"\n        }), \" in it's \", _jsx(_components.code, {\n          children: \"devDependencies\"\n        }), \" (this\\nmeans that when someone installs your package, it they don't get typescript as\\na dependency, it is just a dependency for while you are developing the library\\nlocally).\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then we need to create a tsconfig.json for typescript to use\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"yarn tsc --init\\n# or\\nnpx tsc --init\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This will generate a \", _jsx(_components.code, {\n          children: \"tsconfig.json\"\n        }), \" file (needed by \", _jsx(_components.code, {\n          children: \"typescript\"\n        }), \") with a bunch of\\noptions, but I have stripped it down in my projects to look like this\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"include\\\": [\\\"src\\\"],\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es2018\\\",\\n    \\\"moduleResolution\\\": \\\"node\\\",\\n    \\\"declaration\\\": true, // generate .d.ts files\\n    \\\"sourceMap\\\": true, // generate source map\\n    \\\"outDir\\\": \\\"dist\\\", // output compiled js, d.ts, and source map to dist folder\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now, we want to change our \", _jsx(_components.code, {\n          children: \"js\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"ts\"\n        }), \" files to use \", _jsx(_components.code, {\n          children: \"typescript\"\n        }), \", let's change them\\nto use normal ESM import/exports\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"util.ts\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"export function getMessage() {\\n  return 'hello'\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"index.ts\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"import { getMessage } from './util'\\nexport function sayMessage() {\\n  console.log(getMessage())\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And then we will add a \", _jsx(_components.code, {\n          children: \"\\\"build\\\"\"\n        }), \" script to \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" to compile the\\nlibrary, and refer to the \", _jsx(_components.code, {\n          children: \"\\\"dist\\\"\"\n        }), \" directory for the \", _jsx(_components.code, {\n          children: \"\\\"files\\\"\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"\\\"main\\\"\"\n        }), \"\\nfields in \", _jsx(_components.code, {\n          children: \"package.json\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"name\\\": \\\"mypackage\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"src/index.js\\\",\\n  \\\"files\\\": [\\\"dist\\\"],\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"tsc\\\"\\n  },\\n  \\\"author\\\": \\\"Colin\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"typescript\\\": \\\"^4.5.4\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We can now run\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm run build\\n# or\\nyarn build\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"And this will run the \", _jsx(_components.code, {\n          children: \"\\\"build\\\"\"\n        }), \" script we created, which in turn, just runs\\n\", _jsx(_components.code, {\n          children: \"tsc\"\n        }), \" with no arguments.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can also add a \", _jsx(_components.code, {\n          children: \"\\\"prebuild\\\"\"\n        }), \" script that clears out the old contents. In fact,\\nnpm scripts generalizes the naming system -- you can make scripts with whatever name you want, e.g.\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"scripts\\\": {\\n    \\\"preparty\\\": \\\"echo preparty\\\",\\n    \\\"party\\\": \\\"echo party\\\",\\n    \\\"postparty\\\": \\\"echo postparty\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then running\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"$ yarn party\\npreparty\\nparty\\npostparty\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To make this useful, we will use \", _jsx(_components.code, {\n          children: \"rimraf\"\n        }), \" (a node package) to make a\\ncross-platform removal of the \", _jsx(_components.code, {\n          children: \"dist\"\n        }), \" directory\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm install --save-dev rimraf\\n# or\\nyarn add -D rimraf\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"and then update your package.json\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  ...\\n  \\\"scripts\\\": {\\n    \\\"clean\\\": \\\"rimraf dist\\\",\\n    \\\"prebuild\\\": \\\"npm run clean\\\",\\n    \\\"build\\\": \\\"tsc\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"rimraf\\\": \\\"^3.0.2\\\",\\n    \\\"typescript\\\": \\\"^4.5.4\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We could make it say \\\"rm -rf dist\\\" instead of \\\"rimraf dist\\\" (e.g. run arbitrary\\nshell commands), but rimraf allows it to be cross-platform\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Making sure you create a fresh build before you publish\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Without extra instructions, your \", _jsx(_components.code, {\n          children: \"yarn publish\"\n        }), \" command would not create a\\nfresh build and you could publish an older version that was lingering in the\\n\", _jsx(_components.code, {\n          children: \"dist\"\n        }), \" folder.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We can use a \", _jsx(_components.code, {\n          children: \"preversion\"\n        }), \" script that will automatically get invoked when you\\nrun \", _jsx(_components.code, {\n          children: \"yarn publish\"\n        }), \" to make sure you get a fresh build in the \", _jsx(_components.code, {\n          children: \"dist\"\n        }), \" folder\\nbefore you publish\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  ...\\n  \\\"scripts\\\": {\\n    ...\\n    \\\"preversion\\\": \\\"npm run build\\\",\\n  },\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Making sure you push your tag to github after publish\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"When you run \", _jsx(_components.code, {\n          children: \"yarn publish\"\n        }), \", npm will automatically create a commit with the\\nversion name and a git tag, it \", _jsx(_components.em, {\n          children: \"will not\"\n        }), \" automatically push tag to your\\nrepository.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Add a \", _jsx(_components.code, {\n          children: \"postversion\"\n        }), \" script that pushes the tag to your repo after your publish\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  ...\\n  \\\"scripts\\\": {\\n    ...\\n    \\\"postversion\\\": \\\"git push --follow-tags\\\",\\n  },\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Incremental builds\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We can use this to do incremental/watch builds\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"npm run build --watch\\n# or\\nyarn build --watch\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Adding testing with ts-jest\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You can use ts-jest to test your code. This involves installing jest, typescript, ts-jest, @types/jest, and then initializing a jest.config.json\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm i -D jest typescript\\n# or\\nyarn add --dev jest typescript\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npm i -D ts-jest @types/jest\\n# or\\nyarn add --dev ts-jest @types/jest\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"npx ts-jest config:init\\n# or\\nyarn ts-jest config:init\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We can then create a test\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"test/util.spec.ts\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"import { getMessage } from '../src/util'\\ntest('expected message returned', () => {\\n  expect(getMessage()).toBe('hello')\\n})\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Then we can then create a script in the package.json that says \", _jsx(_components.code, {\n          children: \"\\\"test\\\": \\\"jest\\\"\"\n        }), \", and then we can say\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"npm run test\\n# or\\nyarn test\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can also create an alternative system where you use \", _jsx(_components.code, {\n          children: \"babel-eslint\"\n        }), \" and\\nvarious babel strategies to test your code, but if you are using typescript,\\nts-jest+typescript works great.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Add a .gitignore\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Create a .gitignore with just a line that references this \", _jsx(_components.code, {\n          children: \"dist\"\n        }), \" folder and \", _jsx(_components.code, {\n          children: \"node_modules\"\n        }), \" folder\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"dist\\nnode_modules\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"The future of ESM modules\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"There is a shift happening where modules are changing to be pure ESM rather\\nthan keeping commonjs equivalents\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"There are many challenges here, and will not be discussed, but it may be a\\nuseful further reading page\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This tutorial shows you how you can create a basic package that you can publish\\nto \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \". This little boilerplate includes these features:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Makes clean build when running \", _jsx(_components.code, {\n            children: \"yarn build\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"yarn publish\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Pushes to github after publish\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Uses ts-jest for testing\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Uses esm modules\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You also have full control, and understand the decisions we took to get to this\\npoint. This package does not use any bundling (rollup or webpack or otherwise).\\nIt just uses \", _jsx(_components.code, {\n          children: \"tsc\"\n        }), \" is used to compile the files to the \", _jsx(_components.code, {\n          children: \"dist\"\n        }), \" folder, and the\\ndist folder is published to \", _jsx(_components.code, {\n          children: \"npm\"\n        }), \"! If you need your package to be usable by\\nconsumers that don't themselves use bundlers, consider looking into \", _jsx(_components.code, {\n          children: \"<script type=\\\"module\\\">\"\n        }), \" for importing ESM modules in the browser, or you can bundle\\nyour library using rollup or webpack and output e.g. a UMD bundle\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Final product\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"See https://github.com/cmdcolin/npm-package-tutorial/\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},{"title":"My next.js static blog setup","date":"2021-12-26","slug":"2021-12-26-nextjs","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      h3: \"h3\",\n      code: \"code\",\n      br: \"br\",\n      pre: \"pre\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"TLDR src here \", _jsx(_components.a, {\n          href: \"https://github.com/cmdcolin/cmdcolin.github.io\",\n          children: \"https://github.com/cmdcolin/cmdcolin.github.io\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My personal homepage originally used statocles, a perl-based static site\\ngenerator (http://preaction.me/statocles/). I didn't really blog using it, just\\na homepage for myself plus some links to my tumblr blog. But, if I linked\\npeople to the tumblr blog directly, it would give people terrible popup ads and\\ntrackers. So, I switched to github pages+next.js this year. I considered a\\nnumber of alternative static site systems, but next.js seemed to hit some nice\\ngoals\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Flexible\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"React-based (as opposed to template-based like jekyll, eleventy, etc.)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Markdown driven, and can use MDX\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"RSS feed (bonus)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Active community\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Other systems almost worked and were attempted but aborted\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"First and second iterations\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The first iteration of my next.js blog\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"I put every blog post in the \\\"pages\\\" folder. This worked ok but I had to\\nmanually edit the index.mdx file to have long lists of stuff like this\\n\", _jsx(_components.code, {\n            children: \"![link to new blogpost](manually_inserted_link_here)\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The second iteration, I wanted to automatically generate a list of recent\\nblogposts from files on disk\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"I used the next.js \\\"blog-template-typescript\\\" example folder from their\\n\", _jsx(_components.a, {\n              href: \"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\",\n              children: \"monorepo\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"The new blog posts are generated from markdown files in the \", _jsx(_components.code, {\n              children: \"_posts\"\n            }), \" folder,\\nand get rendered by the file \", _jsx(_components.code, {\n              children: \"pages/posts/[slug].tsx\"\n            }), \" (yes, the filename\\nincludes square brackets).\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"getAllPosts in\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n              href: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/master/lib/api.ts\",\n              children: _jsx(_components.code, {\n                children: \"lib/api.ts\"\n              })\n            }), \"\\ngets a listing of the files in _posts folder, which I can call from the \", _jsx(_components.code, {\n              children: \"getStaticProps\"\n            }), \" method on next.js pages\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Stripping off unnecessary stuff from blog-starter-typescript\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"blog-starter-typescript\"\n        }), \" template has many tiny components, I removed some\\nof them to make it easier for me to orient myself\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript/components\",\n            children: \"theirs\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/cmdcolin/cmdcolin.github.io/tree/master/components\",\n            children: \"mine\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Removing tailwind CSS\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"blog-starter-typescript\"\n        }), \" template uses tailwind CSS and uses \\\"modern web design\\\" (aka:\\ngigantic \\\"tiles\\\" instead of links, images that are way too large, etc)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I started making a more basic design. I tried to roll with the tailwind CSS for\\na bit, but ended up removing it entirely.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Tailwind CSS is sort of like a CSS-in-JS system, except every CSS attribute is encoded in a CSS classname. For example, here are some tailwind CSS snippets\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-html\",\n          children: \"<div className=\\\"container mx-auto px-5\\\"></div>\\n<footer className=\\\"bg-accent-1 border-t border-accent-2\\\"></footer>\\n<div className=\\\"max-w-1xl mx-auto\\\"></div>\\n<div className=\\\"min-h-screen\\\"></div>\\n<a className=\\\"hover:underline\\\"></a>\\n<h1\\n  className=\\\"text-2xl md:text-2xl lg:text-2xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left\\\"\\n></h1>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"They claim this is better than using external CSS (see comparison here\\nhttps://tailwindcss.com/docs/utility-first) but it is yet another language to\\nlearn, and kind of tricky.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But, the reason I gave up with tailwind is actually because tailwind CSS resets\\na lot of HTML styles so things like \", _jsx(_components.code, {\n          children: \"<h1>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<h2>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<ul>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<li>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<a>\"\n        }), \" have\\nno styling at all. This is done by \", _jsx(_components.code, {\n          children: \"tailwind preflight\"\n        }), \"\\nhttps://tailwindcss.com/docs/preflight (which you can disable, but it is\\nenabled by default)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Stackoverflow has some ways to help restore styling and keep preflight, but it\\nstill struck me as odd. Examples\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsxs(_components.a, {\n              href: \"https://stackoverflow.com/a/68853223/2129219\",\n              children: [\"Example: you have to manually restore underlines on \", _jsx(_components.code, {\n                children: \"<a>\"\n              }), \" elements if using tailwind XSS\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://stackoverflow.com/questions/69264976/cant-display-markdown-on-nextjs\",\n              children: \"Another example: \\\"It looks like you're using TailwindCSS, the default\\nstyles for elements are reset, that's why the h1 text will look like any other\\ntext.\\\"\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsxs(_components.a, {\n              href: \"https://raw.githubusercontent.com/vercel/next.js/canary/examples/blog-starter-typescript/components/markdown-styles.module.css\",\n              children: [\"Another example \", _jsx(_components.code, {\n                children: \"blog-template-typescript\"\n              }), \" uses this file to try to style\\nthe markdown using some general\\nstyles\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To me it was surprising the extend that tailwind goes to unstyle the default\\nbrowser styles, removing \\\"idiomatic HTML\\\" styles, so I removed tailwind for\\nnow. Perhaps I'll return to it another time\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Using MDX for blogposts in next.js\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the template from next.js team, the \", _jsx(_components.code, {\n          children: \"blog-template-typescript\"\n        }), \", it uses a\\nfairly simple \", _jsx(_components.code, {\n          children: \"lib/markdownToHtml.ts\"\n        }), \" function right in the\\n\", _jsx(_components.code, {\n          children: \"pages/posts/[slug].tsx\"\n        }), \" file (the markdown is statically pre-rendered in the\\ntrue static blog sense, using the getStaticProps function). This is,\\nunfortunately, over-simplified for the MDX case, because MDX properly needs to\\nhydrate the components using react on the client side also\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To fix, the module https://github.com/hashicorp/next-mdx-remote offers a way to\\nload actual MDX files.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Adding syntax highlighting the next.js code snippets\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"There are a couple results from google about how to add syntax highlighting to\\nnext.js but I still found it difficult.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My method ended up a bit different where I manually included the prism JS and\\nCSS from a CDN essentially and it worked\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Other methods e.g. adding react-prism in next.config.js (like\\nhttps://github.com/mikeesto/next-mdx-prism-example does) I think clashed with\\nMDXRemote perhaps, or maybe I was tussling with tailwind CSS too much to make a\\nclear thought out of it, but syntax blocks on my blogposts should now be\\nproperly highlighted\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"RSS feed\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I also followed this great guide to add a RSS file for next.js\\nhttps://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Link here, for your feed readers\\nhttps://cmdcolin.github.io/rss.xml\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Not many people may use RSS much anymore, but I do use it (via feedly), and I\\nlove music blogs that keep posting on blogspot year after year, and the\\noccasional programming post is nice too\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}]},"__N_SSG":true}