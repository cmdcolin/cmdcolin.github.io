{"pageProps":{"allPosts":[{"title":"Creating a music player using Rust/GTK4 - fml9000","date":"2022-09-05","slug":"2022-09-05-rustmusicplayer","html":"<p>I have started endeavoring to learn Rust. I did the rustlings exercises but I\nknew the concepts would fade rapidly from my brain without some practice. I\nhave now started making a music player using Rust+GTK4.</p>\n<p>I chose GTK4 is to have a linux native GUI to scratch the itch that I've had in\nlacking foobar2000 on linux. I have a particular foobar2000 setup that uses\ndefault UI with four quadrants. I have used foobar2000 under wine and it's not\nterrible, but it has background CPU consumption of about 14% idle and is just a\nlittle \"off\". I have also used a variety of other GUI (quodlibet) and CLI\n(cmus) apps on linux, but they didn't really feel quite right.</p>\n<h2 id=\"hurdles-experienced\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#hurdles-experienced\"><a href=\"#hurdles-experienced\" style=\"margin-right: 10px\">#</a></a>Hurdles experienced</h2>\n<h3 id=\"choosing-a-tech-stack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-a-tech-stack\"><a href=\"#choosing-a-tech-stack\" style=\"margin-right: 10px\">#</a></a>Choosing a tech stack</h3>\n<p>I started by attempting with Relm4, which I may return to at some point, but\ntrying to juggle learning Relm4-style widgets, GTK, and rust all at once was a\nbit much. I stepped to using gtk4-rs directly.</p>\n<h3 id=\"trying-to-create-a-spreadsheet-style-or-data-grid-of-tracks\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#trying-to-create-a-spreadsheet-style-or-data-grid-of-tracks\"><a href=\"#trying-to-create-a-spreadsheet-style-or-data-grid-of-tracks\" style=\"margin-right: 10px\">#</a></a>Trying to create a \"spreadsheet style\" or data grid of tracks</h3>\n<p>Then, I wanted to create a data grid showing to display e.g. a table with\nartist, track, album, etc. I chose to use the\n<a href=\"https://docs.gtk.org/gtk4/class.ColumnView.html\">Gtk::ColumnView</a> to drive\nthis. I stumbled around looking for example code, but there was none\nspecifically for the ColumnView. Soon, I realized the ListView example from the\ngtk4-rs examples with it's factory function was similar in concept.</p>\n<h3 id=\"how-to-store-data-in-a-liststore\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-to-store-data-in-a-liststore\"><a href=\"#how-to-store-data-in-a-liststore\" style=\"margin-right: 10px\">#</a></a>How to store data in a ListStore</h3>\n<p>Then, I wanted to get the data for the songs into a ListStore, but I thought if\nI could make my own GObject subclass, it would solve everything, but I had\ntrouble getting this. Finally, I randomly stumbled on this link using a\nBoxedAnyObject with a good example of storing data in a ListStore\n<a href=\"https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html\">https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html</a></p>\n<p>The BoxedAnyObject is a GObject, so my troubles got automatically solved\nessentially</p>\n<h3 id=\"accessing-the-liststore-in-the-columnview-factory-functions\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#accessing-the-liststore-in-the-columnview-factory-functions\"><a href=\"#accessing-the-liststore-in-the-columnview-factory-functions\" style=\"margin-right: 10px\">#</a></a>Accessing the ListStore in the ColumnView factory functions</h3>\n<p>There was no example code for this so I stuggled with this (for a couple\ndays) before realizing that the ListView example in the gtk4-rs codebase has\nsimilar concepts (factory to create grid cells, etc). I created a PR\n(<a href=\"https://github.com/gtk-rs/gtk4-rs/pull/1111\">https://github.com/gtk-rs/gtk4-rs/pull/1111</a>) to demonstrate simple ColumnView\nusage.</p>\n<p>After this hurdle was crossed, I felt much more comfortable in the GTK mindset,\nand I quickly fleshed out some more UI for the app</p>\n<h3 id=\"choosing-a-audio-tech-stack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-a-audio-tech-stack\"><a href=\"#choosing-a-audio-tech-stack\" style=\"margin-right: 10px\">#</a></a>Choosing a audio tech stack</h3>\n<p>I</p>\n<p>I would just search for various components and they often already existed which\nwas great. There was even one called Gtk::MediaFile which should to be able to\nplay e.g. mp3s, making my job of making a media player much simpler, but it\nproduced an error <a href=\"https://www.google.com/search?q=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;oq=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;aqs=chrome..69i57.267j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8\">\"GTK could not find a media module. Check your\ninstallation.\"</a>\nwhich had very few references on the internet. So, I am trying out symphonia\n(<a href=\"https://github.com/pdeljanov/Symphonia/\">https://github.com/pdeljanov/Symphonia/</a>), with the hope being that it is\neasier to package these for consumers of the app.</p>\n<p>The current work is at <a href=\"https://github.com/cmdcolin/fml9000\">https://github.com/cmdcolin/fml9000</a></p>\n<p><img src=\"/media/fml9000_1.png\" alt=\"\"></p>\n<p>Some stuff in the screenshot is mocked and not fully functional, but it has\nbeen a great adventure</p>"},{"title":"Making a twitter bot in the year 2022 with node.js","date":"2022-08-26","slug":"2022-08-26-twitterbot","html":"<p>Recently, we made the logistic map fractal visualizer app, but, how do we keep\nUSER ENGAGEMENT METRICS up? Gotta make a twitter bot to post fractals, that's\nhow!</p>\n<p>I found it somewhat tricky to get this working, because there is a lot of odd\nlingo out there. There are libraries that may help you, but this post goes\nthrough making an OAuth client in node.js to post to the twitter API with\nfairly unabstracted code. OAuth still confuses me, but if you follow these\nsteps, you can make a bot!</p>\n<h3 id=\"step-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-1\"><a href=\"#step-1\" style=\"margin-right: 10px\">#</a></a>Step 1</h3>\n<p>Get your keys. I forget the exact procedure for this but go to\n<a href=\"https://developer.twitter.com\">https://developer.twitter.com</a> and sign up, register an \"app\" with them, and\npoke around for awhile. This github repo provides a couple more details about\nthe process of registering\n<a href=\"https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal\">https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal</a></p>\n<p>After sometime, you should get a screen that looks like this. Keep this around\nfor Step 4</p>\n<p><img src=\"https://github.com/cmdcolin/twitter_fractal_bot/blob/master/img/devpanel.png?raw=true\" alt=\"\"></p>\n<h3 id=\"step-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-2\"><a href=\"#step-2\" style=\"margin-right: 10px\">#</a></a>Step 2</h3>\n<p>Make a repo with a couple dependencies</p>\n<div class=\"highlight highlight-shell\"><pre>mkdir mybot\n<span class=\"pl-c1\">cd</span> mybot\nyarn init\nyarn add node-fetch formdata-node oauth dotenv typescript\n</pre></div>\n<h3 id=\"step-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-3\"><a href=\"#step-3\" style=\"margin-right: 10px\">#</a></a>Step 3</h3>\n<p>Update <code>package.json</code> with a couple scripts to build these typescript files\n(alternatively use <code>ts-node</code> or similar to run the ts files directly)</p>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"dependencies\"</span>: {\n    <span class=\"pl-ent\">\"dotenv\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^16.0.1<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"formdata-node\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^4.4.1<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"node-fetch\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^3.2.10<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"oauth\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^0.10.0<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"typescript\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^4.7.4<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-ent\">\"license\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>MIT<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"type\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>module<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"devDependencies\"</span>: {\n    <span class=\"pl-ent\">\"@types/node\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^18.7.9<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"@types/oauth\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^0.9.1<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-ent\">\"scripts\"</span>: {\n    <span class=\"pl-ent\">\"build\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tsc<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"prepost\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yarn build<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"post\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node dist/bot.js<span class=\"pl-pds\">\"</span></span>\n  }\n}\n</pre></div>\n<p>And <code>tsconfig.json</code> file</p>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"include\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"compilerOptions\"</span>: {\n    <span class=\"pl-ent\">\"target\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>esnext<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"outDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"moduleResolution\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"declaration\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"strict\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"esModuleInterop\"</span>: <span class=\"pl-c1\">true</span>\n  }\n}\n</pre></div>\n<p>This compiles the <code>src</code> folder and outputs js files to the <code>dist</code> directory,\nand we can run the <code>node dist/bot.js</code> file with node to post the file</p>\n<h3 id=\"step-4\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-4\"><a href=\"#step-4\" style=\"margin-right: 10px\">#</a></a>Step 4</h3>\n<p>Create a .env file with your keys that you found in the above screenshot\ncorresponding to the box1 (which gives you API_KEY/API_SECRET, sometimes also\nreferred to as consumer keys in other documents) and box2 (which gives you\nACCESS_TOKEN and ACCESS_TOKEN_SECRET) from\nthe above screenshot</p>\n<pre><code>API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxx\"\nAPI_SECRET=\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"\nACCESS_TOKEN=\"aaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nACCESS_TOKEN_SECRET=\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n</code></pre>\n<p>Important: Also add the .env to your .gitignore, you don't want to commit this\nto github!</p>\n<h3 id=\"step-5\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-5\"><a href=\"#step-5\" style=\"margin-right: 10px\">#</a></a>Step 5</h3>\n<p>Make the bot! Create <code>src/bot.ts</code></p>\n<div class=\"highlight highlight-ts\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">fs</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>fs<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">dotenv</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>dotenv<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">OAuth</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>oauth<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">fetch</span>, { <span class=\"pl-smi\">RequestInit</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>node-fetch<span class=\"pl-pds\">'</span></span>\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">FormData</span>, <span class=\"pl-smi\">File</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>formdata-node<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-smi\">dotenv</span>.<span class=\"pl-en\">config</span>()\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">mfetch</span>(<span class=\"pl-v\">url</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">string</span>, <span class=\"pl-v\">params</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">RequestInit</span>) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span>(<span class=\"pl-smi\">url</span>, <span class=\"pl-smi\">params</span>)\n\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span><span class=\"pl-smi\">response</span>.<span class=\"pl-smi\">ok</span>) {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">text</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">text</span>()\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">`</span>HTTP ${<span class=\"pl-smi\">response</span>.<span class=\"pl-c1\">status</span>} ${<span class=\"pl-smi\">text</span>}<span class=\"pl-pds\">`</span></span>)\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">json</span>() <span class=\"pl-k\">as</span> <span class=\"pl-en\">Promise</span>&#x3C;<span class=\"pl-en\">Record</span>&#x3C;<span class=\"pl-c1\">string</span>, <span class=\"pl-c1\">unknown</span>>>\n}\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">getAuthHeader</span>(<span class=\"pl-v\">oauth</span><span class=\"pl-k\">:</span> <span class=\"pl-en\">OAuth</span>.<span class=\"pl-en\">OAuth</span>, <span class=\"pl-v\">url</span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">string</span>) {\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">oauth</span>.<span class=\"pl-en\">authHeader</span>(\n    <span class=\"pl-smi\">url</span>,\n    <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">ACCESS_TOKEN</span> <span class=\"pl-k\">as</span> <span class=\"pl-c1\">string</span>,\n    <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">ACCESS_TOKEN_SECRET</span> <span class=\"pl-k\">as</span> <span class=\"pl-c1\">string</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>post<span class=\"pl-pds\">'</span></span>,\n  )\n}\n\n;(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">client</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">OAuth</span>.<span class=\"pl-en\">OAuth</span>(\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.twitter.com/oauth/request_token<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.twitter.com/oauth/access_token<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">API_KEY</span> <span class=\"pl-k\">as</span> <span class=\"pl-c1\">string</span>,\n      <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">env</span>.<span class=\"pl-c1\">API_SECRET</span> <span class=\"pl-k\">as</span> <span class=\"pl-c1\">string</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>1.0A<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-c1\">null</span>,\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>HMAC-SHA1<span class=\"pl-pds\">'</span></span>,\n    )\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">picEndpoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://upload.twitter.com/1.1/media/upload.json<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">tweetEndpoint</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>https://api.twitter.com/2/tweets<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">clientName</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>v3CreateTweetJS<span class=\"pl-pds\">'</span></span>\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">form</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-c1\">FormData</span>()\n    <span class=\"pl-smi\">form</span>.<span class=\"pl-c1\">set</span>(\n      <span class=\"pl-s\"><span class=\"pl-pds\">'</span>media<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-k\">new</span> <span class=\"pl-c1\">File</span>([<span class=\"pl-smi\">fs</span>.<span class=\"pl-en\">readFileSync</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>yourpicture.png<span class=\"pl-pds\">'</span></span>)], <span class=\"pl-s\"><span class=\"pl-pds\">'</span>yourpicture.png<span class=\"pl-pds\">'</span></span>),\n    )\n\n    <span class=\"pl-c\">// first post a picture</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response1</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">mfetch</span>(<span class=\"pl-smi\">picEndpoint</span>, {\n      headers: {\n        Authorization: <span class=\"pl-en\">getAuthHeader</span>(<span class=\"pl-smi\">client</span>, <span class=\"pl-smi\">picEndpoint</span>),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>user-agent<span class=\"pl-pds\">'</span></span>: <span class=\"pl-smi\">clientName</span>,\n      },\n      method: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>POST<span class=\"pl-pds\">'</span></span>,\n      <span class=\"pl-c\">//@ts-ignore</span>\n      body: <span class=\"pl-smi\">form</span>,\n    })\n\n    <span class=\"pl-c\">// then post a tweet, referring to the media_id_string from response1</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response2</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">mfetch</span>(<span class=\"pl-smi\">tweetEndpoint</span>, {\n      headers: {\n        Authorization: <span class=\"pl-en\">getAuthHeader</span>(<span class=\"pl-smi\">client</span>, <span class=\"pl-smi\">tweetEndpoint</span>),\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>user-agent<span class=\"pl-pds\">'</span></span>: <span class=\"pl-smi\">clientName</span>,\n        <span class=\"pl-s\"><span class=\"pl-pds\">'</span>content-type<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>application/json<span class=\"pl-pds\">'</span></span>,\n        accept: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>application/json<span class=\"pl-pds\">'</span></span>,\n      },\n      body: <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>({\n        media: { media_ids: [<span class=\"pl-smi\">response1</span>.<span class=\"pl-smi\">media_id_string</span>] },\n        text: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Hello world!<span class=\"pl-pds\">'</span></span>,\n      }),\n      method: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>post<span class=\"pl-pds\">'</span></span>,\n    })\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">response2</span>)\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">e</span>) {\n    <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-smi\">e</span>)\n    <span class=\"pl-c1\">process</span>.<span class=\"pl-c1\">exit</span>(<span class=\"pl-c1\">1</span>)\n  }\n})()\n</pre></div>\n<h3 id=\"step-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-6\"><a href=\"#step-6\" style=\"margin-right: 10px\">#</a></a>Step 6</h3>\n<p>Now that you have the bot, you can run it locally with <code>yarn post</code> (runs the\n\"post\" script in <code>package.json</code>) to test it out</p>\n<h3 id=\"step-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-7\"><a href=\"#step-7\" style=\"margin-right: 10px\">#</a></a>Step 7</h3>\n<p>Now to create a github action to run the bot.</p>\n<p>Navigate to your repo's settings page, then go to Secrets->Actions and paste\nthe keys one by one, see below screenshot</p>\n<p><img src=\"https://user-images.githubusercontent.com/6511937/187038172-80b35e34-03dd-4613-b6f6-9f8e25d2fc34.png\" alt=\"\"></p>\n<h3 id=\"step-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-8\"><a href=\"#step-8\" style=\"margin-right: 10px\">#</a></a>Step 8</h3>\n<p>Create a file with the path <code>.github/workflows/post.yml</code> in your repo to make the post</p>\n<p>You can use a cron/scheduled workflow in the github action, which the below\nexample does\n<a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule</a></p>\n<p>The below github action posts every 5 hours on the hour (see\n<a href=\"https://crontab.guru/\">https://crontab.guru/</a> for more info on cron syntax)</p>\n<div class=\"highlight highlight-yaml\"><pre><span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Post tweet</span>\n<span class=\"pl-ent\">on</span>:\n  <span class=\"pl-ent\">schedule</span>:\n    - <span class=\"pl-ent\">cron</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>0 */5 * * *<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-ent\">jobs</span>:\n  <span class=\"pl-ent\">test</span>:\n    <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Post tweet</span>\n    <span class=\"pl-ent\">runs-on</span>: <span class=\"pl-s\">ubuntu-latest</span>\n    <span class=\"pl-ent\">steps</span>:\n      - <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">actions/checkout@v2</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Use Node.js 14.x</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">actions/setup-node@v2</span>\n        <span class=\"pl-ent\">with</span>:\n          <span class=\"pl-ent\">node-version</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>14<span class=\"pl-pds\">'</span></span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Install deps (with cache)</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">bahmutov/npm-install@v1</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Post tweet</span>\n        <span class=\"pl-ent\">env</span>:\n          <span class=\"pl-ent\">API_KEY</span>: <span class=\"pl-s\">${{ secrets.API_KEY }}</span>\n          <span class=\"pl-ent\">API_SECRET</span>: <span class=\"pl-s\">${{ secrets.API_SECRET }}</span>\n          <span class=\"pl-ent\">ACCESS_TOKEN</span>: <span class=\"pl-s\">${{ secrets.ACCESS_TOKEN }}</span>\n          <span class=\"pl-ent\">ACCESS_TOKEN_SECRET</span>: <span class=\"pl-s\">${{ secrets.ACCESS_TOKEN_SECRET }}</span>\n        <span class=\"pl-ent\">run</span>: <span class=\"pl-s\">yarn post</span>\n</pre></div>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>See <a href=\"https://github.com/cmdcolin/twitter_fractal_bot\">https://github.com/cmdcolin/twitter_fractal_bot</a> for working example. I\ncould have, in retrospect, used a library like <code>twit</code>\n(<a href=\"https://www.npmjs.com/package/twit\">https://www.npmjs.com/package/twit</a>) but this code sample is not substantially\nmore complicated than using the <code>twit</code> library.</p>\n<p>You can also adapt this to post only when you push to your repo, or release a\nnew version from your repo!</p>\n<h2 id=\"footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Examples of odd lingo or stumbling blocks you might come across</h2>\n<ul>\n<li>Bearer token - The Bearer token is an alternative method of authenticating,\nbut it cannot be used to post tweets</li>\n<li>Twitter API v1 vs v2 - We use a mix of v1 and v2, it's just the different\nURLs that we are posting to and can be mixed in our example</li>\n<li>Consumer key vs API key - they are the same thing in our example. If you look\nclosely at the box 1 in the screenshot it says \"Consumer keys\" and then gives\nyou an API key below *</li>\n</ul>\n<h2 id=\"footnote-2-posting-on-release-with-a-github-action\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-posting-on-release-with-a-github-action\"><a href=\"#footnote-2-posting-on-release-with-a-github-action\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Posting on release with a github action</h2>\n<p>Replace the cron section of the github action with</p>\n<pre><code>on: release\n</code></pre>\n<h2 id=\"footnote-3-additional-reading\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-additional-reading\"><a href=\"#footnote-3-additional-reading\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Additional reading</h2>\n<p><a href=\"https://aaronparecki.com/oauth-2-simplified/\">https://aaronparecki.com/oauth-2-simplified/</a></p>"},{"title":"Using Rust/WASM in a monorepo with create-react-app","date":"2022-08-22","slug":"2022-08-22-rustwasm","html":"<p>Behold, the buzzwords:</p>\n<ul>\n<li>Rust / WASM / wasm-bindgen</li>\n<li>React</li>\n<li>Monorepo / Yarn workspaces</li>\n<li>Webpack 5 / create-react-app 5</li>\n<li>Typescript</li>\n</ul>\n<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>\n<p>TLDR: visit the final product!\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed\nlive here <a href=\"https://cmdcolin.github.io/rust_react_monorepo_template\">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>\n<h2 id=\"steps-to-create-this-type-of-integration-from-scratch\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#steps-to-create-this-type-of-integration-from-scratch\"><a href=\"#steps-to-create-this-type-of-integration-from-scratch\" style=\"margin-right: 10px\">#</a></a>Steps to create this type of integration from scratch</h2>\n<h3 id=\"create-repo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-repo\"><a href=\"#create-repo\" style=\"margin-right: 10px\">#</a></a>Create repo</h3>\n<pre><code>mkdir template\ncd template\ngit init\n</code></pre>\n<h3 id=\"create-root-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-root-packagejson\"><a href=\"#create-root-packagejson\" style=\"margin-right: 10px\">#</a></a>Create root <code>package.json</code></h3>\n<p>Then put this in the monorepo's root <code>package.json</code></p>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"private\"</span>: <span class=\"pl-c1\">true</span>,\n  <span class=\"pl-ent\">\"workspaces\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello-wasm<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>app<span class=\"pl-pds\">\"</span></span>]\n}\n</pre></div>\n<p>This sets our repo up as a \"monorepo\" with two \"workspaces\". one will be the\nwasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>\n<h3 id=\"add-a-create-react-app-instance-inside-the-monorepo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-a-create-react-app-instance-inside-the-monorepo\"><a href=\"#add-a-create-react-app-instance-inside-the-monorepo\" style=\"margin-right: 10px\">#</a></a>Add a <code>create-react-app</code> instance inside the monorepo</h3>\n<div class=\"highlight highlight-shell\"><pre>npx create-react-app --template typescript app\n</pre></div>\n<p>This will make an <code>app</code> subfolder inside our monorepo</p>\n<h3 id=\"download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\" style=\"margin-right: 10px\">#</a></a>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>\n<p>Download <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world\">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a> to the hello-wasm folder</p>\n<p>This link can help <a href=\"https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world\">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>\n<h3 id=\"add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\" style=\"margin-right: 10px\">#</a></a>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello-wasm<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"files\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pkg<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"main\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>pkg/index.js<span class=\"pl-pds\">\"</span></span>\n  <span class=\"pl-ii\">... rest</span>\n}\n</pre></div>\n<h3 id=\"modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\" style=\"margin-right: 10px\">#</a></a>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>\n<p>I changed the rust code to return a String value instead of making an alert box</p>\n<div class=\"highlight highlight-rust\"><pre>#[wasm_bindgen]\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">greet</span>(name: <span class=\"pl-k\">&#x26;str</span>) -> <span class=\"pl-k\">String</span> {\n    <span class=\"pl-c1\">format!</span>(<span class=\"pl-s\">\"Hello {}\"</span>, name)\n}\n</pre></div>\n<h3 id=\"build-the-hello-wasm-pkg\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-the-hello-wasm-pkg\"><a href=\"#build-the-hello-wasm-pkg\" style=\"margin-right: 10px\">#</a></a>Build the <code>hello-wasm</code> pkg</h3>\n<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory\nnamed <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>\nfolder is effectively a node package. We could publish this to <code>NPM</code> (see\nfootnote 1)</p>\n<h3 id=\"add-the-hello-wasm-package-to-the-app-dependencies\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-the-hello-wasm-package-to-the-app-dependencies\"><a href=\"#add-the-hello-wasm-package-to-the-app-dependencies\" style=\"margin-right: 10px\">#</a></a>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>\n<p>Add <code>\"hello-wasm\":\"^1.0.0\"</code> to the <code>dependencies</code> array in <code>app/package.json</code>. This\nwill refer to our local monorepo's rust wasm package!</p>\n<h3 id=\"create-craco-config-for-create-react-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-craco-config-for-create-react-app\"><a href=\"#create-craco-config-for-create-react-app\" style=\"margin-right: 10px\">#</a></a>Create craco config for <code>create-react-app</code></h3>\n<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize\nthe <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>\n<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this <code>craco.config.js</code></p>\n<div class=\"highlight highlight-js\"><pre><span class=\"pl-c1\">module</span>.<span class=\"pl-smi\">exports</span> <span class=\"pl-k\">=</span> {\n  webpack<span class=\"pl-k\">:</span> {\n    <span class=\"pl-en\">configure</span><span class=\"pl-k\">:</span> <span class=\"pl-smi\">config</span> <span class=\"pl-k\">=></span> {\n      <span class=\"pl-k\">const</span> <span class=\"pl-c1\">wasmExtensionRegExp</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">/</span>\\.<span class=\"pl-smi\">wasm$</span><span class=\"pl-k\">/</span>\n      <span class=\"pl-smi\">config</span>.<span class=\"pl-smi\">resolve</span>.<span class=\"pl-smi\">extensions</span>.<span class=\"pl-c1\">push</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>.wasm<span class=\"pl-pds\">'</span></span>)\n      <span class=\"pl-smi\">config</span>.<span class=\"pl-smi\">experiments</span> <span class=\"pl-k\">=</span> {\n        syncWebAssembly<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span>,\n      }\n\n      <span class=\"pl-smi\">config</span>.<span class=\"pl-smi\">module</span>.<span class=\"pl-c1\">rules</span>.<span class=\"pl-c1\">forEach</span>(<span class=\"pl-smi\">rule</span> <span class=\"pl-k\">=></span> {\n        ;(<span class=\"pl-smi\">rule</span>.<span class=\"pl-smi\">oneOf</span> <span class=\"pl-k\">||</span> []).<span class=\"pl-c1\">forEach</span>(<span class=\"pl-smi\">oneOf</span> <span class=\"pl-k\">=></span> {\n          <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">oneOf</span>.<span class=\"pl-c1\">type</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>asset/resource<span class=\"pl-pds\">'</span></span>) {\n            <span class=\"pl-smi\">oneOf</span>.<span class=\"pl-smi\">exclude</span>.<span class=\"pl-c1\">push</span>(wasmExtensionRegExp)\n          }\n        })\n      })\n\n      <span class=\"pl-k\">return</span> config\n    },\n  },\n}\n</pre></div>\n<p>Note: this thread helped me to create the craco config\n<a href=\"https://github.com/Emurgo/cardano-serialization-lib/issues/295\">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>\n<p>Also see footnote 2 for more info</p>\n<h3 id=\"final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\" style=\"margin-right: 10px\">#</a></a>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>\n<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our\nrust function, <code>greet</code>, from javascript!</p>\n<div class=\"highlight highlight-ts\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">App</span>() {\n  <span class=\"pl-k\">const</span> [<span class=\"pl-c1\">greeting</span>, <span class=\"pl-c1\">setGreeting</span>] <span class=\"pl-k\">=</span> <span class=\"pl-en\">useState</span>&#x3C;<span class=\"pl-c1\">string</span>>()\n  <span class=\"pl-en\">useEffect</span>(() <span class=\"pl-k\">=></span> {\n    ;(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n      <span class=\"pl-k\">try</span> {\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">wasm</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-k\">import</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>hello-wasm<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-k\">const</span> <span class=\"pl-c1\">greeting</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">wasm</span>.<span class=\"pl-en\">greet</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Colin<span class=\"pl-pds\">'</span></span>)\n        <span class=\"pl-en\">setGreeting</span>(<span class=\"pl-smi\">greeting</span>)\n      } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">e</span>) {\n        <span class=\"pl-c1\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-smi\">e</span>)\n      }\n    })()\n  }, [])\n\n  <span class=\"pl-k\">return</span> (\n    &#x3C;<span class=\"pl-en\">div</span>>\n      &#x3C;<span class=\"pl-en\">h1</span>><span class=\"pl-smi\">rust</span> <span class=\"pl-smi\">monorepo</span> <span class=\"pl-smi\">wasm</span> <span class=\"pl-smi\">demo</span><span class=\"pl-k\">&#x3C;/</span><span class=\"pl-smi\">h1</span><span class=\"pl-k\">></span>\n      &#x3C;<span class=\"pl-en\">h2</span>><span class=\"pl-smi\">Greeting</span> <span class=\"pl-smi\">from</span> <span class=\"pl-v\">wasm</span><span class=\"pl-k\">:</span> {!<span class=\"pl-en\">greeting</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Loading...<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-en\">greeting</span>}&#x3C;/<span class=\"pl-en\">h2</span>>\n    <span class=\"pl-k\">&#x3C;/</span><span class=\"pl-smi\">div</span><span class=\"pl-k\">></span>\n  )\n}\n</pre></div>\n<p>In order to greet an arbitrary person, I modified this slightly in the live\ndemo. See\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx\">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>\n<h3 id=\"run-the-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#run-the-app\"><a href=\"#run-the-app\" style=\"margin-right: 10px\">#</a></a>Run the app!</h3>\n<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>\n<h2 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#result\"><a href=\"#result\" style=\"margin-right: 10px\">#</a></a>Result!</h2>\n<p>A screenshot of the app, showing the string \"Hello Colin\" which is generated\nvia rust and wasm</p>\n<p><img src=\"/media/rust_wasm_demo.png\" alt=\"\"></p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>My main aim was to demonstrate creating a \"simple\" monorepo setup showing how\nyou can integrate Rust+WASM and React. Feel free to ask me any questions and go\ncheck out the repo!</p>\n<p><a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>\n<h2 id=\"other-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#other-resources\"><a href=\"#other-resources\" style=\"margin-right: 10px\">#</a></a>Other resources</h2>\n<p>This article is quite helpful also, but uses a file:/ reference in their\n<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite\nsimilar though!\n<a href=\"https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm\">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>\n<h2 id=\"footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\" style=\"margin-right: 10px\">#</a></a>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>\n<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of\nthe package import the module, they would receive <code>pkg/index.js</code> from the\n<code>main</code> field in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the\n<code>index.wasm</code> file. Then it is up to the consumers bundler to package that\ncorrectly.</p>\n<h2 id=\"footnote-2-bundlers-and-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-bundlers-and-wasm\"><a href=\"#footnote-2-bundlers-and-wasm\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Bundlers and wasm</h2>\n<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which has\n\"native support\" for wasm. Still, it is hidden behind a flag called\n\"experiments\" (see first google result for webpack wasm here\n<a href=\"https://webpack.js.org/configuration/experiments/\">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to\nmodify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>\n<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a\nslightly different workflow (used a special <code>webpack</code> loader called\n<code>wasm-loader</code>)</p>\n<p>You can also likely use similar techniques described in this article to\nincorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on\nhow other bundlers use wasm, feel free to leave a comment.</p>\n<h2 id=\"footnote-3-why-do-i-have-to-use-async-imports\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-why-do-i-have-to-use-async-imports\"><a href=\"#footnote-3-why-do-i-have-to-use-async-imports\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Why do I have to use async imports?</h2>\n<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can\nbe run (it is not in my experience e.g. embedded as binary data inside a js\nfile) which means it would be difficult to use the wasm code as a synchronous\nimport.</p>\n<p>There are hints that this may be possible but it would rely on the bundler\nembedding the wasm code in the js itself, or maybe top-level-await. If anyone\nhas more info, feel free to leave a comment!</p>\n<h2 id=\"footnote-4-build-setup\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-build-setup\"><a href=\"#footnote-4-build-setup\" style=\"margin-right: 10px\">#</a></a>Footnote 4: Build setup</h2>\n<p>The <code>hello-wasm</code> package does not automatically recompile when we are running\ne.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires\nyou to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to\nbe aware of</p>\n<h2 id=\"footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\" style=\"margin-right: 10px\">#</a></a>Footnote 5: My first experience with trying to make this work was rocky!</h2>\n<p>I first created an example of rust+wasm+react almost two years ago when\ncreating a fractal viewer\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map\">https://github.com/cmdcolin/logistic_chaos_map</a>\nand it has some development notes on the stumbling blocks I faced\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md\">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>\n<h2 id=\"footnote-6-i-thought-you-said-typescript-too\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6-i-thought-you-said-typescript-too\"><a href=\"#footnote-6-i-thought-you-said-typescript-too\" style=\"margin-right: 10px\">#</a></a>Footnote 6: I thought you said typescript too</h2>\n<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the\n<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a\nbuilt-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is\nproduced in the <code>hello-wasm</code> build to help understand the details. I also\nrecommend reading the <a href=\"https://rustwasm.github.io/wasm-bindgen/\">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you\nare getting started with rust, read the Rust Book along with doing rustlings\n<a href=\"https://github.com/rust-lang/rustlings\">https://github.com/rust-lang/rustlings</a></p>"},{"title":"Photos of vacation","date":"2022-08-21","slug":"2022-08-21-vacation","html":"<p>From Aug 1st->Aug 18 I did a road trip from the South Carolina to New Mexico. I\nflew out and met my partner who had driven there earlier to help her mom out at\nthe house.</p>\n<p>It was a great trip</p>\n<p>Route stops</p>\n<ul>\n<li>Charleston, SC (Several days)</li>\n<li>Charlotte, NC (Several days, Wedding)</li>\n<li>Montgomery, AL (One night)</li>\n<li>New Orleans, LA (Several days)</li>\n<li>Houston, TX (One night)</li>\n<li>Junction, TX (One night)</li>\n<li>Alpine, TX (One night)</li>\n<li>Valentine, TX (One night)</li>\n<li>Truth or Consequences, NM (One night)</li>\n<li>Albuquerque, NM (Home)</li>\n</ul>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220803_155653295.resized.jpg\" alt=\"\"></p>\n<p>amazing results from the sea turtle rescue at the charleston, SC aquarium</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_145459605_HDR.resized.jpg\" alt=\"\"></p>\n<p>my partner Leah at edisto beach state park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151340018_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto, the beach has many dead and standing dead trees on the beach</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151800531_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151805593_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_093129359.resized.jpg\" alt=\"\"></p>\n<p>wetlands near bowen's island SC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_094813656_HDR.resized.jpg\" alt=\"\"></p>\n<p>a worn down house with a mural, and fallen traffic signal in SC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220807_173529613_HDR.resized.jpg\" alt=\"\"></p>\n<p>photo of a butterfly from wedding site near charlotte, NC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220808_103832831_HDR.resized.jpg\" alt=\"\"></p>\n<p>our weird airbnb cabin in near charlotte, SC which was a civil war era cabin from virginia moved in it's entirety to NC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_174740904_HDR.resized.jpg\" alt=\"\"></p>\n<p>new orleans skyline from a weird industrial art park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_182035943_HDR.resized.jpg\" alt=\"\"></p>\n<p>care bear in new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_190950114.resized.jpg\" alt=\"\"></p>\n<p>reality continues to ruin my life</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220810_121137729.resized.jpg\" alt=\"\"></p>\n<p>wild \"surf n turf po boy\" (right) and a more conventional muffalata sandwich (left) in new orleans, had while hiding from a rain storm</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140043783_HDR.resized.jpg\" alt=\"\"></p>\n<p>city park, new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140543522_HDR.resized.jpg\" alt=\"\"></p>\n<p>large oak, new orleans city park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_142427022.resized.jpg\" alt=\"\"></p>\n<p>apple snail eggs in new orleans city park, an invasive species <a href=\"https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html\">https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html</a></p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_153012540.resized.jpg\" alt=\"\"></p>\n<p>placard describing \"pit beef\", a baltimore sandwich from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154040098.resized.jpg\" alt=\"\"></p>\n<p>engraving describing some native american beach early \"bbq\" method (gator and dog possibly visible) from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154404713.resized.jpg\" alt=\"\"></p>\n<p>history of bbq from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154549161.resized.jpg\" alt=\"\"></p>\n<p>hot brown sandwich, placard from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_110617743.resized.jpg\" alt=\"\"></p>\n<p>our airbnb in new orleans, in a very cool mansion in the garden district</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113038243.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113224854.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113234259.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220813_211534759.resized.jpg\" alt=\"\"></p>\n<p>our airbnb hosts in junction, TX gave us tickets to the rodeo there, a one night only event. lot's of cowboy hats</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_133823204_HDR.resized.jpg\" alt=\"\"></p>\n<p>goats near socorro caverns</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_135951677_HDR.resized.jpg\" alt=\"\"></p>\n<p>peacocks (including an albino?) near socorro caverns</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_092445801_HDR.resized.jpg\" alt=\"\"></p>\n<p>mule ears, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_101452396_HDR.resized.jpg\" alt=\"\"></p>\n<p>dung beetle, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_102214238_HDR.resized.jpg\" alt=\"\"></p>\n<p>canyon at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_191014795_HDR.resized.jpg\" alt=\"\"></p>\n<p>fire in valentine, tx. note, my feet are very muddy from trying to wade in the rio grande</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_203037340.resized.jpg\" alt=\"\"></p>\n<p>cooking on the fire in valentine, TX</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220816_125951579_HDR.resized.jpg\" alt=\"\"></p>\n<p>metal grave placard, el paso, TX</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220817_092022789_HDR.resized.jpg\" alt=\"\"></p>\n<p>duck pond, truth or consequences, NM</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220820_185137107.resized.jpg\" alt=\"\"></p>\n<p>back in ABQ, fermenting some hot peppers we got on trip</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7091.jpg\" alt=\"\"></p>\n<p>me in city park, new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7378.jpg\" alt=\"\"></p>\n<p>me at the mule ears, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7384.JPG\" alt=\"\"></p>\n<p>cows at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7391.jpg\" alt=\"\"></p>\n<p>(wild?) horses at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7403.jpg\" alt=\"\"></p>\n<p>me in the canyon at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7663.jpg\" alt=\"\"></p>\n<p>beezle celebrating my birthday (8/17) on return to ABQ</p>"},{"title":"Photos of life","date":"2022-07-29","slug":"2022-07-29-happy","html":"<p>I started this post to try to talk about things that make me happy. It's not\nreally a happiness though that I wanted to talk about, it's just about living\nlife...sometimes it's a struggle and that can be rewarding also. So here are\nsome photos of everyday things</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220619_201622482.resized.jpg\" alt=\"\"></p>\n<p>sunset from backyard. my house is adjacent to an \"abandoned\" golf course so it's just a big open space</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220622_100019949.resized.jpg\" alt=\"\"></p>\n<p>a dog named remy i saw at the dog park visiting parents. remy has a funny habit of herding other dogs around</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220624_210922889.resized.jpg\" alt=\"\"></p>\n<p>the sky from my parents backyard</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220626_071349516.resized.jpg\" alt=\"\"></p>\n<p>my parents dogs zoe (right) and tux (left). my parents walk them everyday and it's great to join them</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220627_145201639_HDR.resized.jpg\" alt=\"\"></p>\n<p>the place I live is a house that we rent. unfortunately and the owners are letting the place fall apart due to leaks in the roof</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220704_133123492.resized.jpg\" alt=\"\"></p>\n<p>a salad I made with jicama, carrot, greens, and orange on july 4th</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220705_200242153_HDR.resized.jpg\" alt=\"\"></p>\n<p>some hazy sun before a rainstorm in NM</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220705_201600095_HDR.resized.jpg\" alt=\"\"></p>\n<p>some sun after the rain</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_111938701_HDR.resized.jpg\" alt=\"\"></p>\n<p>cooking purple potatos</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_115455797.resized.jpg\" alt=\"\"></p>\n<p>after cooking the purple potatos</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_175755642.resized.jpg\" alt=\"\"></p>\n<p>hummingbird hanging out in the backyard</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220710_175851539_HDR.resized.jpg\" alt=\"\"></p>\n<p>a fresno pepper from my weird backyard garden (all plants potted with these felt bags, works fairly ok)</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220713_200957865.resized.jpg\" alt=\"\"></p>\n<p>beezle hanging out in his favorite spot, on top of a box spring in the hallway</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220714_200346243.resized.jpg\" alt=\"\"></p>\n<p>the belt I made for myself from a piece of leather that i found in a shop when I visited toronto pre-pandemic (more pics from making it <a href=\"https://imgur.com/a/Ff5Mn3l\">https://imgur.com/a/Ff5Mn3l</a>)</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220715_230433785.resized.jpg\" alt=\"\"></p>\n<p>fruit and yogurts</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220716_132939371.resized.jpg\" alt=\"\"></p>\n<p>making a drip irrigation system for my weird garden. the sunrise timer was particularly funny. I put the battery pack in backwards and it didn't work, and took it apart to fully understand the mechanism (had to see how the battery contacts touched the inside of the system to see it)</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220717_204303427_HDR.resized.jpg\" alt=\"\"></p>\n<p>pork belly</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220717_210017665.resized.jpg\" alt=\"\"></p>\n<p>bibimbap with pork belly</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220718_174420132_HDR.resized.jpg\" alt=\"\"></p>\n<p>some little tomatos. these were eaten by catepillars shortly after taking these. battling these little critters has been a learning experience</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_173156813.resized.jpg\" alt=\"\"></p>\n<p>chicken thighs</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_173426354.resized.jpg\" alt=\"\"></p>\n<p>jamaican jerk style sauce</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_181601967_HDR.resized.jpg\" alt=\"\"></p>\n<p>using a meat thermometer+grill...been a real level-up</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_184903147.resized.jpg\" alt=\"\"></p>\n<p>cooked, perhaps overly so, but quite juicy still due to brining</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220720_174949541_HDR.resized.jpg\" alt=\"\"></p>\n<p>my funny backyard setup, the bowl makes little sounds when it rains (sound recording <a href=\"https://cmdcolinphotos.s3.amazonaws.com/out.mp3\">https://cmdcolinphotos.s3.amazonaws.com/out.mp3</a>)</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220722_201326050_HDR.resized.jpg\" alt=\"\"></p>\n<p>synthesizering</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220724_104240569.resized.jpg\" alt=\"\"></p>\n<p>cooked down some strawberries that my neighbor gave me, she's awesome</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_095848819_HDR.resized.jpg\" alt=\"\"></p>\n<p>beezle in his tree</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_111117447.resized.jpg\" alt=\"\"></p>\n<p>my brother came to visit me, synthesizering around the breakfast table</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_111129150.resized.jpg\" alt=\"\"></p>\n<p>beezle playing the synth</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_164816159.resized.jpg\" alt=\"\"></p>\n<p>making some kimchi and saurkraut. these got quite bubbly and active, quite fun to make. should get some airlock jars</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220726_162730132_HDR.resized.jpg\" alt=\"\"></p>\n<p>my brother and I visiting the dry river bed of the rio grande in south albuquerque</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220726_163019069_HDR.resized.jpg\" alt=\"\"></p>\n<p>more dry rio grande. note that many the irrigation ditches around the rio are flowing full...</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220728_170257266_HDR.resized.jpg\" alt=\"\"></p>\n<p>the rio grande north of albuquerque is still flowing</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220728_174207531_HDR.resized.jpg\" alt=\"\"></p>\n<p>very tiny purple flowers</p>"},{"title":"Watch out for your pinky finger","date":"2022-07-08","slug":"2022-07-08-pinky","html":"<p>I have, for several months, suffered a twinge in my left pinky finger from\nexcessive strain due to hand contortions largely caused by keyboard use.</p>\n<p>Particularly brutal in my opinion has been the use of the left-ctrl key for\nkeyboard shortcuts</p>\n<h3 id=\"programs-that-are-particularly-troublesome-for-the-left-pinky\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#programs-that-are-particularly-troublesome-for-the-left-pinky\"><a href=\"#programs-that-are-particularly-troublesome-for-the-left-pinky\" style=\"margin-right: 10px\">#</a></a>Programs that are particularly troublesome for the left pinky</h3>\n<ul>\n<li>many programs: ctrl+c, ctrl+v, ctrl+x, ctrl+f</li>\n<li>terminal: shift+ctrl+v to paste</li>\n<li>tmux: default ctrl+somekey as leader</li>\n<li>chrome: ctrl+w to close tab, ctrl+t for new tab, ctrl+r for refresh,\nshift+ctrl+r for cache-cleared refresh</li>\n<li>vim: using esc key on the far left, custom configurations using ctrl key e.g.\nctrl+p (I also had ctrl+g, ctrl+f for custom file finders for awhile but no\nlonger)</li>\n</ul>\n<p>In order to make these movements, particularly if you use the left hand to do\nit, you have to contort your hand pretty drastically. Chrome is particularly\nbad because it is not possible(?) to reconfigure their keyboard shortcuts.</p>\n<p>Unfortunately, I did not really listen to warning signs from my hand, and now\nthere is a mild pain from almost any keyboard usage</p>\n<h3 id=\"general-approaches-to-help-out\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#general-approaches-to-help-out\"><a href=\"#general-approaches-to-help-out\" style=\"margin-right: 10px\">#</a></a>General approaches to help out</h3>\n<ul>\n<li>Take time out of my day e.g. pomodoro to take rests</li>\n<li>Taking a vacation</li>\n<li>Do hand exercises and stretches when idle</li>\n<li>Massages to the muscles</li>\n<li>Using touch typing, making my hands float above the keyboard when typing</li>\n<li>Avoiding curling up the pinky while typing (this may just be me suffering at this point)</li>\n<li>Use both hands to execute shortcuts instead of contorting left hand</li>\n</ul>\n<h3 id=\"technical-approaches-and-key-remappings\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#technical-approaches-and-key-remappings\"><a href=\"#technical-approaches-and-key-remappings\" style=\"margin-right: 10px\">#</a></a>Technical approaches and key remappings</h3>\n<ul>\n<li>Remap caps lock to left+ctrl. This is a common one you hear recommended and\nit may help, and it has less contortion, particularly for chrome with one\nhand use. So you can say capslock+w, capslock+t, but it is still using pinky\nand can be stressful if not careful (capslock+w fine, capslock+t still\ncontortion if done with one hand)</li>\n<li>More use of the right-hand-only shortcuts or at least avoiding using the left\npinky for shortcuts. I don't have many of these but will look into retraining\nmyself for some of these. I am testing out right ctrl+] for leader in tmux,\nand - and = for split window horizontal and vertical</li>\n</ul>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>It is not great to get to this point. My hand posture and body posture at the\nkeyboard has been bad for years, and it has caught up to me. I recommend people\nbe aware of contorting their hand too much, and use good keyboard etiquette\nlest they suffer the same!</p>\n<h2 id=\"any-more-ideas\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#any-more-ideas\"><a href=\"#any-more-ideas\" style=\"margin-right: 10px\">#</a></a>Any more ideas?</h2>\n<p>Let me know of ways you take care of your hands (hardware, software, or\notherwise)</p>\n<h2 id=\"other-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#other-resources\"><a href=\"#other-resources\" style=\"margin-right: 10px\">#</a></a>Other resources</h2>\n<p>See this post by Matt Might for some more resources\n<a href=\"https://matt.might.net/articles/preventing-and-managing-rsi/\">https://matt.might.net/articles/preventing-and-managing-rsi/</a></p>\n<h2 id=\"extenuating-circumstances\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extenuating-circumstances\"><a href=\"#extenuating-circumstances\" style=\"margin-right: 10px\">#</a></a>Extenuating circumstances</h2>\n<p>I am not sure if it really affects my typing, but I was bitten by a dog several\nyears ago. The dog clamped down on both my hands one after the other and got my\nleft especially bad, which required stitches. One fairly deep puncture was on\nthe left side of my left hand, which could plausibly affect my pinky. Photo\nbelow</p>\n<p><img src=\"/photos/pinky.jpg\" alt=\"\"></p>"},{"title":"You may not need a bundler for your NPM library","date":"2022-05-27","slug":"2022-05-27-youmaynotneedabundler","html":"<p>I have seen a couple threads on twitter where people complain about the\ndifficulty with publishing NPM libraries or ask what starter kit they should\nuse (or, people recommended starter packs anyways)</p>\n<p>Example threads</p>\n<ul>\n<li><a href=\"https://twitter.com/cramforce/status/1513903035197526017\">https://twitter.com/cramforce/status/1513903035197526017</a></li>\n<li><a href=\"https://twitter.com/oleg008/status/1510006191296061441\">https://twitter.com/oleg008/status/1510006191296061441</a></li>\n<li><a href=\"https://twitter.com/iansu/status/1524860613943382017\">https://twitter.com/iansu/status/1524860613943382017</a></li>\n<li><a href=\"https://twitter.com/mpocock1/status/1525075901905522691\">https://twitter.com/mpocock1/status/1525075901905522691</a></li>\n</ul>\n<p>One thing that is notable to me in these threads is that people often recommend\nthat you use a bundler (a program that combines multiple src files into a\nsingle or fewer output files) when developing a library</p>\n<p>Examples of starter packs suggested in these threads that use bundlers</p>\n<ul>\n<li><code>microbundle</code> - <a href=\"https://github.com/developit/microbundle\">https://github.com/developit/microbundle</a> - uses rollup</li>\n<li><code>esno</code> - <a href=\"https://www.npmjs.com/package/esno\">https://www.npmjs.com/package/esno</a> - uses esbuild</li>\n<li><code>unbuild</code> - <a href=\"https://github.com/unjs/unbuild\">https://github.com/unjs/unbuild</a> - uses rollup</li>\n<li><code>preconstruct</code> - <a href=\"https://github.com/preconstruct/preconstruct\">https://github.com/preconstruct/preconstruct</a> - uses rollup</li>\n<li><code>tsup</code> - <a href=\"https://github.com/egoist/tsup\">https://github.com/egoist/tsup</a> - uses esbuild</li>\n<li><code>tsdx</code> - <a href=\"https://github.com/jaredpalmer/tsdx\">https://github.com/jaredpalmer/tsdx</a> - uses rollup</li>\n<li><code>vite library mode</code> - <a href=\"https://vitejs.dev/guide/build.html#library-mode\">https://vitejs.dev/guide/build.html#library-mode</a> - uses rollup</li>\n<li><code>packemon</code> - <a href=\"https://github.com/milesj/packemon\">https://github.com/milesj/packemon</a> - uses rollup</li>\n<li><code>ts-library-template</code> - <a href=\"https://github.com/shortercode/ts-library-template\">https://github.com/shortercode/ts-library-template</a> - uses rollup</li>\n<li><code>parcel</code> - <a href=\"https://twitter.com/devongovett/status/1524944991402999810\">https://twitter.com/devongovett/status/1524944991402999810</a> - uses parcel</li>\n<li><code>dts</code> - <a href=\"https://weiran-zsd.github.io/dts-cli/\">https://weiran-zsd.github.io/dts-cli/</a> - uses rollup</li>\n<li><code>pkgroll</code> - <a href=\"https://github.com/privatenumber/pkgroll\">https://github.com/privatenumber/pkgroll</a> - uses rollup</li>\n<li><code>mkdist</code> - <a href=\"https://github.com/unjs/mkdist\">https://github.com/unjs/mkdist</a> - referenced by <code>unbuild</code>, uses esbuild</li>\n</ul>\n<p>Not using bundlers</p>\n<ul>\n<li><code>gts</code> - <a href=\"https://github.com/google/gts\">https://github.com/google/gts</a></li>\n<li><code>ts-react-toolbox</code> - <a href=\"https://github.com/zzarcon/ts-react-toolbox/\">https://github.com/zzarcon/ts-react-toolbox/</a></li>\n</ul>\n<p>In summary 2/15 do not use a bundler, 13/15 do use a bundler. Sidenote: webpack notably absent</p>\n<h2 id=\"why-would-you-not-want-a-bundler-for-your-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#why-would-you-not-want-a-bundler-for-your-library\"><a href=\"#why-would-you-not-want-a-bundler-for-your-library\" style=\"margin-right: 10px\">#</a></a>Why would you <em>NOT</em> want a bundler for your library?</h2>\n<p>My main argument is that the consumer of your library is the one that should\nuse a bundler if it is relevant to them. If the library uses a bundler:</p>\n<ul>\n<li>in the best case, it has no impact on the consumer</li>\n<li>in the worst case, it affects the complexity of your library and makes\npossible limitations for your consumers also.</li>\n</ul>\n<p>An example where it can actually create limitations, you might consider code\nsplitting with async <code>import()</code>. If you create a single file bundle, then the\nconsumer of your library may not be able to do code splitting properly via\nasync <code>import()</code></p>\n<h2 id=\"why-would-you-maybe-want-a-bundler-for-your-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#why-would-you-maybe-want-a-bundler-for-your-library\"><a href=\"#why-would-you-maybe-want-a-bundler-for-your-library\" style=\"margin-right: 10px\">#</a></a>Why would you <em>MAYBE</em> want a bundler for your library</h2>\n<p>If you really care about producing a <code>UMD</code> bundle that can be used in a script\ntag, maybe you want a bundler, but the future does not seem to be in <code>UMD</code>.\nOne other possible bundle type is maybe you like the idea of a single file\n<code>ESM</code> module. It is similar where you could maybe reference this from a script\ntag with type module, but this seems like a niche usage. For example, you\nwould still have to consider:</p>\n<ul>\n<li>If you are not bundling dependencies, then what is the benefit of using a\nbundler?</li>\n<li>If you are bundling dependencies, you are not allowing people to get updates\nto your sub-dependencies with semver!</li>\n</ul>\n<p>Add-on: Another concern brought up by users in discussion thread: There is a\ncost to having many small files, e.g. in app startup cost on serverless or any\nnodejs application to loading many small files off disk. To me, this is an app\nlevel concern, similar to bundling for the browser though.</p>\n<h2 id=\"my-suggestion-no-bundler-no-starter-pack-just-tsc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#my-suggestion-no-bundler-no-starter-pack-just-tsc\"><a href=\"#my-suggestion-no-bundler-no-starter-pack-just-tsc\" style=\"margin-right: 10px\">#</a></a>My suggestion: no bundler, no starter pack, just <code>tsc</code></h2>\n<p>I'd recommend just compiling your code with <code>tsc</code>, no bundler involved. This\nway, you can develop with typescript, it will output <code>js</code> files, and you can\ndirectly deploy a <code>dist</code> folder of <code>js</code> files to NPM.</p>\n<h3 id=\"example-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-packagejson\"><a href=\"#example-packagejson\" style=\"margin-right: 10px\">#</a></a>Example <code>package.json</code></h3>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yourlib<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"main\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/index.js<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"scripts\"</span>: {\n    <span class=\"pl-ent\">\"clean\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rimraf dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"prebuild\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>npm run clean<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"build\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tsc<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"preversion\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>npm run build<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"postversion\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>git push --follow-tags<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-ent\">\"files\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"devDependencies\"</span>: {\n    <span class=\"pl-ent\">\"rimraf\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^3.0.2<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"typescript\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^4.6.2<span class=\"pl-pds\">\"</span></span>\n  }\n}\n</pre></div>\n<h4 id=\"features-of-the-above-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#features-of-the-above-packagejson\"><a href=\"#features-of-the-above-packagejson\" style=\"margin-right: 10px\">#</a></a>Features of the above <code>package.json</code></h4>\n<ul>\n<li>We can use a single command, <code>yarn publish</code> to publish to npm</li>\n<li>The single <code>yarn publish</code> automatically runs <code>clean</code> and <code>build</code> via\n<code>preversion</code>, then <code>postversion</code>, which pushes the tag to the remote repo</li>\n<li>The <code>\"files\": [\"dist\", \"src\"]</code> refers to publishing the <code>dist</code> and <code>src</code>\ndirectories, and src is used for the <code>sourceMap</code></li>\n</ul>\n<h3 id=\"example-tsconfigjson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-tsconfigjson\"><a href=\"#example-tsconfigjson\" style=\"margin-right: 10px\">#</a></a>Example<code> tsconfig.json</code></h3>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"include\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"compilerOptions\"</span>: {\n    <span class=\"pl-ent\">\"target\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es2018<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"outDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"lib\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dom<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>esnext<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-ent\">\"declaration\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"moduleResolution\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"sourceMap\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"strict\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"esModuleInterop\"</span>: <span class=\"pl-c1\">true</span>\n  }\n}\n</pre></div>\n<h4 id=\"features-of-the-above-tsconfigjson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#features-of-the-above-tsconfigjson\"><a href=\"#features-of-the-above-tsconfigjson\" style=\"margin-right: 10px\">#</a></a>Features of the above <code>tsconfig.json</code></h4>\n<ul>\n<li>Uses <code>\"moduleResolution\": \"node\"</code> - this is not pure-ESM because pure-ESM\nexpects you to import filenames with their file extension, while node module\nresolution can import extensionless paths, but node module resolution\ngenerally works well with consumers that use bundlers themselves</li>\n<li>Uses <code>\"target\": \"es2018\"</code> - This is does a small amount of transpilation of\nsuper modern features, but would generally not require your users to\nbabel-ify their <code>node_modules</code> if they consume your library</li>\n</ul>\n<h2 id=\"what-about-testing\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-about-testing\"><a href=\"#what-about-testing\" style=\"margin-right: 10px\">#</a></a>What about testing?</h2>\n<p>Adding testing is not immediately solved by the above, but bundling doesn't\nreally help testing anyways. It's just a starter pack feature we can add on.\nSome options you have include</p>\n<ul>\n<li>Use <code>ts-jest</code></li>\n<li>Use <code>jest</code> on it's own, plus a <code>babel</code> config with <code>@babel/preset-typescript</code></li>\n<li>Use <code>jest</code> on it's own, run over the compiled output without a <code>babel</code> config</li>\n<li>Use <code>vitest</code></li>\n<li>Possibly something else? Node now has a built-in test runner. It will be a\nslow road to adoption but might become more popular over time\n<a href=\"https://fusebit.io/blog/node-testing-comes-to-core/\">https://fusebit.io/blog/node-testing-comes-to-core/</a></li>\n</ul>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>It is tempting to have nice zero-config solutions and starter kits, but to me,\nit is not really beneficial to use the bundler aspect of many of these for\npublishing to NPM. Am I wrong? Let me know if I am.</p>\n<p>Also, these starter kits may not be maintained for perpetuity. Our team used\n<code>tsdx</code> for some time, but it was not maintained well, and used old typescript\nversion 3.x, and it ended up being hard to remove from our codebase. Learning\nthe basic tools like <code>tsc</code> will help</p>\n<h2 id=\"footnote-1-shipping-pure-esm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-shipping-pure-esm\"><a href=\"#footnote-1-shipping-pure-esm\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Shipping \"pure-ESM\"</h2>\n<p>Do you want to make a pure-ESM package? Then you do not want to use\n<code>\"moduleResolution\": \"node\"</code> in <code>tsconfig.json</code>, and you will want to set\n<code>\"type\": \"module\"</code> in <code>package.json</code>. You may also need to explicitly import\nwith <code>.js</code> extensions in your source code, even if you write <code>.ts</code>. This is\nawkward, and something the community is still grappling with.</p>\n<p>If you have ever stumbled on this topic, you will probably want to see this\nlink\n<a href=\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>\n<h2 id=\"footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\"><a href=\"#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Shipping ESM and CommonJS side by side without going \"pure-ESM\"</h2>\n<p>It can be tricky to go pure-ESM, but you can go most of the way there by using\nboth the \"main\" and \"module\" fields in package.json</p>\n<ul>\n<li>Compile with tsc with <code>tsc --module commonjs --outDir dist</code></li>\n<li>Compile with tsc again with <code>tsc --module esnext --outDir esm</code></li>\n<li>Then set \"main\":\"dist/index.js\" for node and <code>\"module\":\"esm/index.js\"</code> for\nbundlers</li>\n</ul>\n<p>The \"module\" field is a field only bundlers recognizes\n<a href=\"https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for\">https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for</a></p>\n<p>Note: This is different from the \"type\":\"module\" which marks your module as\npure-ESM!</p>\n<p>I have found this technique can go a long ways towards keeping your package\ncompatible with nodeJS and bundlers and it does not require \"export maps\" or\nanything which I have found to be difficult to configure</p>\n<h2 id=\"footnote-3-learning-your-tools\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-learning-your-tools\"><a href=\"#footnote-3-learning-your-tools\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Learning your tools</h2>\n<p>Several people on the\n<a href=\"https://cmdcolin.github.io/posts/2022-05-04-findseddangerous\">my recent post</a>\npost suggested that I did not understand my tools, and that I should just learn\nthe tools correctly and I wouldn't have the problem I had.</p>\n<p>Indeed, what I am now telling people to do in this post is similar: I am saying\n\"just use <code>tsc</code> by itself! Understand you tools! You may have to do more\nresearch and create more boilerplate, but it's <strong>better</strong>\".</p>\n<p>Ultimately though, it's up to you to choose your tools and starter packs and\nwhatnot.</p>\n<h2 id=\"footnote-4-what-does-it-look-like-when-you-compile-with-tsc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-what-does-it-look-like-when-you-compile-with-tsc\"><a href=\"#footnote-4-what-does-it-look-like-when-you-compile-with-tsc\" style=\"margin-right: 10px\">#</a></a>Footnote 4: What does it look like when you compile with tsc?</h2>\n<p>When I refer to compiling with tsc above, I compile a <code>src</code> directory into a\n<code>dist</code> directory</p>\n<p>So if I have:</p>\n<pre><code>src/index.ts\nsrc/util.ts\nsrc/components/Button.ts\n</code></pre>\n<p>Running <code>tsc</code> will output:</p>\n<pre><code>dist/index.js\ndist/index.d.ts\ndist/index.js.map\ndist/util.js\ndist/util.d.ts\ndist/util.js.map\ndist/components/Button.js\ndist/components/Button.d.ts\ndist/components/Button.js.map\n</code></pre>\n<p>Then, the <code>dist</code> and <code>src</code> directories are published to npm which enables the\n<code>sourceMaps</code> to work.</p>\n<p>Note: We do not need to explicitly say where the typescript types are with\n\"types\" in <code>package.json</code>, many starter packs do this but it is unneeded for\nthis package as the d.ts files are automatically found.</p>\n<p>See\n<a href=\"https://cmdcolin.github.io/posts/2021-12-31-npm-package\">https://cmdcolin.github.io/posts/2021-12-31-npm-package</a>\nfor my article on creating a typescript package for npm</p>\n<h2 id=\"footnote-5-other-things-people-recommend\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-other-things-people-recommend\"><a href=\"#footnote-5-other-things-people-recommend\" style=\"margin-right: 10px\">#</a></a>Footnote 5: Other things people recommend</h2>\n<p>Other things people recommend in the starter pack threads</p>\n<ul>\n<li><code>deno</code> - not clear to me how this helps when deploying to npm, but I still gotta try deno</li>\n<li><code>ts-node </code> - not clear to me how this helps when deploying to npm</li>\n<li><code>nx</code> - heavy monorepo-based solution</li>\n<li><code>elm</code> - that's just a different thing</li>\n<li><code>Typescript-Node-Starter</code> - <a href=\"https://github.com/microsoft/TypeScript-Node-Starter\">https://github.com/microsoft/TypeScript-Node-Starter</a> - not a library, full stack framework</li>\n<li><code>joystick</code> - <a href=\"https://github.com/CheatCode/joystick\">https://github.com/CheatCode/joystick</a> - not a library, full stack framework</li>\n</ul>\n<h2 id=\"footnote-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6\"><a href=\"#footnote-6\" style=\"margin-right: 10px\">#</a></a>Footnote 6:</h2>\n<p>Similar things happen if you take on dependencies of starter kits like\n<code>create-react-app</code>. You become very committed to their particular way of doing\nthings, and can only modify their config with things like <code>rescripts</code>, <code>craco</code>\nor <code>rewired</code>. If you crafted your setup with just <code>webpack</code>, you may not be so\ntied down. But, I still use things like <code>create-react-app</code> because they do seem\nto help me significantly. Now though, the tide seems to be turning other\ndirections like next.js which can do static site generation at a basic level\nand extend to multiple pages more easily.</p>\n<h2 id=\"footnote-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-7\"><a href=\"#footnote-7\" style=\"margin-right: 10px\">#</a></a>Footnote 7:</h2>\n<p>You may not even need <code>tsc</code> to compile your dist folder. You can literally\npublish your source <code>.js</code> files as-is to NPM. This suggestion comes from\n@trevmanz <a href=\"https://twitter.com/trevmanz/status/1534962190008172545\">1</a>\n<a href=\"https://twitter.com/trevmanz/status/1534962940348092417\">2</a>. I don't\npersonally use this technique yet but there are many users with this workflow</p>\n<p>An interesting thing is you can write in <code>.js</code> but still get <code>typescript</code> to\nget type checking using <code>jsdoc</code>, just use <code>allowJs</code>/<code>checkJs</code> flags in\n<code>tsconfig.json</code></p>\n<h2 id=\"footnote-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-8\"><a href=\"#footnote-8\" style=\"margin-right: 10px\">#</a></a>Footnote 8:</h2>\n<p>What about React? Bundlers not needed, and not even babel is needed: you can\ncode your library as in <code>jsx</code> or <code>tsx</code> files and use <code>tsc</code> to compile it to\nReact.createElement statements or other jsx transforms.</p>"},{"title":"Notes on performance profiling JS applications","date":"2022-05-10","slug":"2022-05-10-performanceprofiling","html":"<p>Keeping your program fast is important for</p>\n<ul>\n<li>user satisfaction in everyday apps</li>\n<li>making certain things tractable</li>\n</ul>\n<p>In our application, we visualize some large-ish datasets using the browser and\njavascript</p>\n<h2 id=\"the-chrome-profiler\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-chrome-profiler\"><a href=\"#the-chrome-profiler\" style=\"margin-right: 10px\">#</a></a>The Chrome profiler</h2>\n<p>I use the Chrome DevTools \"Performance\" profiler, which is a\nstatistical/sampling profiler\n<a href=\"https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers\">https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers</a></p>\n<p>This means it samples at some rate and see's where in the callstack the program\nis executing.</p>\n<ul>\n<li>If you see large rectangles in the profiler, you may have a long running\nfunction</li>\n<li>If you see many small rectangles, your small function may be called many\ntimes</li>\n</ul>\n<p>Note: sometimes your function may be so fast, it is rarely or never encountered\nby the sampling. It is a good thing (TM) to be this fast, but I mention it to\nnote that the sampling profiler does not give us a complete log of all function\ncalls.</p>\n<h2 id=\"creating-a-flamegraph-from-the-chrome-profiler-results\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#creating-a-flamegraph-from-the-chrome-profiler-results\"><a href=\"#creating-a-flamegraph-from-the-chrome-profiler-results\" style=\"margin-right: 10px\">#</a></a>Creating a flamegraph from the Chrome profiler results</h2>\n<p>Note: sometimes, it is also useful to see the results as a \"flamegraph\" (see\n<a href=\"https://www.brendangregg.com/flamegraphs.html\">https://www.brendangregg.com/flamegraphs.html</a>)</p>\n<p>The website <a href=\"https://www.speedscope.app/\">https://www.speedscope.app/</a> can\ncreate \"flamegraph\" style figures for Chrome profiling results</p>\n<h2 id=\"stacking-up-many-small-optimizations\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#stacking-up-many-small-optimizations\"><a href=\"#stacking-up-many-small-optimizations\" style=\"margin-right: 10px\">#</a></a>Stacking up many small optimizations</h2>\n<p>Working with large datasets, sometimes your program will take a long time to\ncomplete. Especially if you work with javascript in the browser, it is a\nchallenge to make things go fast. But you can use micro optimizations to help\nimprove performance over time.</p>\n<p>For example, say a program takes 30 seconds to run on a certain dataset</p>\n<p>If you do profiling and find a couple microoptimizations that give you a 15%,\n10% and 5% performance improvement, then you program now takes 20 seconds to\nrun. That is still not instantaneous, but it is saving users a good 10 seconds.</p>\n<h2 id=\"examples-of-micro-optimizations\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#examples-of-micro-optimizations\"><a href=\"#examples-of-micro-optimizations\" style=\"margin-right: 10px\">#</a></a>Examples of micro optimizations</h2>\n<ul>\n<li>Using <code>Map</code> instead of <code>Object</code> can often get small performance boosts</li>\n<li>Comparing value against <code>undefined</code> e.g. <code>if(val===undefined)</code> vs just\ncomparing against falsy e.g. <code>if(!val)</code></li>\n<li>Using <code>TypedArray</code>/<code>Uint8Array</code> natively instead of <code>Buffer</code> polyfill. This\none is a kicker for me because we relied on <code>Buffer</code> polyfill, and webpack 5\nstopped bundling polyfills by default which made us wake up to this</li>\n<li>When converting <code>Uint8Array</code> to string, use <code>TextDecoder</code> for large strings, and\njust small string concatenations of <code>String.fromCharCode</code> for small ones.\nThere is an inflection point for string size where one is faster</li>\n<li>Use <code>for</code> loops instead of <code>Array.prototype.forEach</code>/<code>Array.prototype.map</code>. I\nthink similar to above, there is an inflection point (not where it gets\nfaster in the <code>forEach</code>/<code>map</code> case, but where you can choose to care whether\nthe small performance diff matters) based on number of elements in your array</li>\n<li>Pre-allocate an array with <code>new Array(N)</code> instead of just <code>[]</code> if possible</li>\n</ul>\n<p>I have tried to keep track of more microoptimizations here, but they are pretty\nspecific to small examples and may not generalize across browsers or browser\nversions <a href=\"https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8\">https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8</a></p>\n<h2 id=\"examples-of-macro-optimizations\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#examples-of-macro-optimizations\"><a href=\"#examples-of-macro-optimizations\" style=\"margin-right: 10px\">#</a></a>Examples of macro optimizations</h2>\n<p>Oftentimes, large scale re-workings of your code or \"macro\" optimizations are\nthe way to make progress.</p>\n<p>A macro optimization may be revealed if you are looking at your performance\nprofiling result and you think: this entire section of the program could be\nreworked to remove this overhead</p>\n<p>In this case, it is hard to advise on because most of these will be very\nspecific to your particular app.</p>\n<p>Just as a specific example of a macro optimization I undertook:</p>\n<p>We use web workers, and had to serialize a lot of data from the web worker to\nthe main thread. I did a large re-working of the codebase to allow, in\nparticular examples, the main thread to request smaller snippets of data from\nthe web worker thread on-demand (the web worker is kept alive indefinitely)\ninstead of serializing all the web worker data and sending to the main thread.</p>\n<p>This change especially pays off with large datasets, where all that\nserialization/data duplication is computationally and memory expensive. Fun\nfact: I remember sitting at a table at a conference in Jan 2020 talking with my\nteam at the Plant and Animal Genome conference, thinking that we should make\nthis change -- finally did it, just took 2 years. [1]</p>\n<h2 id=\"end-to-end-optimization-testing\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#end-to-end-optimization-testing\"><a href=\"#end-to-end-optimization-testing\" style=\"margin-right: 10px\">#</a></a>End-to-end optimization testing</h2>\n<p>In order to comprehensively measure whether micro or macro optimizations are\nactually improving your real world performance, it can be useful to create an\nend-to-end test</p>\n<p>For our app, I created a <code>puppeteer</code> based test where I loaded the website and\nwaited for a \"DONE\" condition. I created a variety of different tests which\nallowed me to see e.g. some optimizations may only affect certain conditions.</p>\n<p>Developing the end-to-end test suite tool awhile to develop (read: weeks to\nmature, though some earlier result were available), but it let me compare the\ncurrent release vs experimental branches, and over time, the experimental\nbranches were merged and things got faster. [2]</p>\n<h2 id=\"note-that-memory-usage-can-be-very-important-to-your-programs-performance\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#note-that-memory-usage-can-be-very-important-to-your-programs-performance\"><a href=\"#note-that-memory-usage-can-be-very-important-to-your-programs-performance\" style=\"margin-right: 10px\">#</a></a>Note that memory usage can be very important to your programs performance.</h2>\n<p>Excessive allocations will increase \"GC pressure\" (the garbage collector will\ninvoke more Minor and Major GC, which you will see in your performance\nprofiling reuslts as yellow boxes)</p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>It is really important to look at the profiling to see what your program\nactually is spending time on. You can make hypothetical optimizations all day\nand dream of rewriting in rust but you may just have a slow hot path in your JS\ncode that, if optimized, can get big speedups.</p>\n<p>Let me know about your favorite optimizations in the comments!</p>\n<h2 id=\"footnotes\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnotes\"><a href=\"#footnotes\" style=\"margin-right: 10px\">#</a></a>Footnotes</h2>\n<p>[1] Note that things like SharedArrayBuffer also offer a means to share data\nbetween worker and main thread, but these come with many security limitations\nfrom the browser (and was even removed for a time while these security\nimplications were sussed out, due to Spectre/Meltdown vulnerabilities)</p>\n<p>[2] I still have not found a good way to get automated memory usage profiling\nvia puppeteer. You can access window.process.memory in puppeteer, but this\nvariable does not provide info about webworker memory usage\n<a href=\"https://github.com/puppeteer/puppeteer/issues/8258\">https://github.com/puppeteer/puppeteer/issues/8258</a></p>"}]},"__N_SSG":true}