{"pageProps":{"post":{"title":"Using Rust/WASM in a monorepo with create-react-app","date":"2022-08-22","slug":"2022-08-22-rustwasm","html":"<p>Behold, the buzzwords:</p>\n<ul>\n<li>Rust / WASM / wasm-bindgen</li>\n<li>React</li>\n<li>Monorepo / Yarn workspaces</li>\n<li>Webpack 5 / create-react-app 5</li>\n<li>Typescript</li>\n</ul>\n<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>\n<p>TLDR: visit the final product!\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed\nlive here <a href=\"https://cmdcolin.github.io/rust_react_monorepo_template\">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>\n<h2>Steps to create this type of integration from scratch</h2>\n<h3>Create repo</h3>\n<pre><code>mkdir template\ncd template\ngit init\n</code></pre>\n<h3>Create root <code>package.json</code></h3>\n<p>Then put this in the monorepo's root <code>package.json</code></p>\n<pre><code class=\"language-json\">{\n  \"private\": true,\n  \"workspaces\": [\"hello-wasm\", \"app\"]\n}\n</code></pre>\n<p>This sets our repo up as a \"monorepo\" with two \"workspaces\". one will be the\nwasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>\n<h3>Add a <code>create-react-app</code> instance inside the monorepo</h3>\n<pre><code class=\"language-sh\">npx create-react-app --template typescript app\n</code></pre>\n<p>This will make an <code>app</code> subfolder inside our monorepo</p>\n<h3>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>\n<p>Download <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world\">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a> to the hello-wasm folder</p>\n<p>This link can help <a href=\"https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world\">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>\n<h3>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>\n<pre><code class=\"language-json\">{\n  \"name\": \"hello-wasm\",\n  \"version\": \"1.0.0\",\n  \"files\": [\"pkg\"],\n  \"main\": \"pkg/index.js\"\n  ... rest\n}\n</code></pre>\n<h3>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>\n<p>I changed the rust code to return a String value instead of making an alert box</p>\n<pre><code>#[wasm_bindgen]\npub fn greet(name: &#x26;str) -> String {\n    format!(\"Hello {}\", name)\n}\n</code></pre>\n<h3>Build the <code>hello-wasm</code> pkg</h3>\n<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory\nnamed <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>\nfolder is effectively a node package. We could publish this to <code>NPM</code> (see\nfootnote 1)</p>\n<h3>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>\n<p>Add <code>\"hello-wasm\":\"^1.0.0\"</code> to the <code>dependencies</code> array in <code>app/package.json</code>. This\nwill refer to our local monorepo's rust wasm package!</p>\n<h3>Create craco config for <code>create-react-app</code></h3>\n<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize\nthe <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>\n<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this <code>craco.config.js</code></p>\n<pre><code class=\"language-js\">module.exports = {\n  webpack: {\n    configure: config => {\n      const wasmExtensionRegExp = /\\.wasm$/\n      config.resolve.extensions.push('.wasm')\n      config.experiments = {\n        syncWebAssembly: true,\n      }\n\n      config.module.rules.forEach(rule => {\n        ;(rule.oneOf || []).forEach(oneOf => {\n          if (oneOf.type === 'asset/resource') {\n            oneOf.exclude.push(wasmExtensionRegExp)\n          }\n        })\n      })\n\n      return config\n    },\n  },\n}\n</code></pre>\n<p>Note: this thread helped me to create the craco config\n<a href=\"https://github.com/Emurgo/cardano-serialization-lib/issues/295\">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>\n<p>Also see footnote 2 for more info</p>\n<h3>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>\n<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our\nrust function, <code>greet</code>, from javascript!</p>\n<pre><code class=\"language-tsx\">function App() {\n  const [greeting, setGreeting] = useState&#x3C;string>()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        const wasm = await import('hello-wasm')\n        const greeting = wasm.greet('Colin')\n        setGreeting(greeting)\n      } catch (e) {\n        console.error(e)\n      }\n    })()\n  }, [])\n\n  return (\n    &#x3C;div>\n      &#x3C;h1>rust monorepo wasm demo&#x3C;/h1>\n      &#x3C;h2>Greeting from wasm: {!greeting ? 'Loading...' : greeting}&#x3C;/h2>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>In order to greet an arbitrary person, I modified this slightly in the live\ndemo. See\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx\">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>\n<h3>Run the app!</h3>\n<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>\n<h2>Result!</h2>\n<p>A screenshot of the app, showing the string \"Hello Colin\" which is generated\nvia rust and wasm</p>\n<p><img src=\"/media/rust_wasm_demo.png\" alt=\"\"></p>\n<h2>Conclusion</h2>\n<p>My main aim was to demonstrate creating a \"simple\" monorepo setup showing how\nyou can integrate Rust+WASM and React. Feel free to ask me any questions and go\ncheck out the repo!</p>\n<p><a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>\n<h2>Other resources</h2>\n<p>This article is quite helpful also, but uses a file:/ reference in their\n<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite\nsimilar though!\n<a href=\"https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm\">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>\n<h2>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>\n<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of\nthe package import the module, they would receive <code>pkg/index.js</code> from the\n<code>main</code> field in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the\n<code>index.wasm</code> file. Then it is up to the consumers bundler to package that\ncorrectly.</p>\n<h2>Footnote 2: Bundlers and wasm</h2>\n<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which has\n\"native support\" for wasm. Still, it is hidden behind a flag called\n\"experiments\" (see first google result for webpack wasm here\n<a href=\"https://webpack.js.org/configuration/experiments/\">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to\nmodify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>\n<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a\nslightly different workflow (used a special <code>webpack</code> loader called\n<code>wasm-loader</code>)</p>\n<p>You can also likely use similar techniques described in this article to\nincorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on\nhow other bundlers use wasm, feel free to leave a comment.</p>\n<h2>Footnote 3: Why do I have to use async imports?</h2>\n<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can\nbe run (it is not in my experience e.g. embedded as binary data inside a js\nfile) which means it would be difficult to use the wasm code as a synchronous\nimport.</p>\n<p>There are hints that this may be possible but it would rely on the bundler\nembedding the wasm code in the js itself, or maybe top-level-await. If anyone\nhas more info, feel free to leave a comment!</p>\n<h2>Footnote 4: Build setup</h2>\n<p>The <code>hello-wasm</code> package does not automatically recompile when we are running\ne.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires\nyou to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to\nbe aware of</p>\n<h2>Footnote 5: My first experience with trying to make this work was rocky!</h2>\n<p>I first created an example of rust+wasm+react almost two years ago when\ncreating a fractal viewer\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map\">https://github.com/cmdcolin/logistic_chaos_map</a>\nand it has some development notes on the stumbling blocks I faced\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md\">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>\n<h2>Footnote 6: I thought you said typescript too</h2>\n<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the\n<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a\nbuilt-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is\nproduced in the <code>hello-wasm</code> build to help understand the details. I also\nrecommend reading the <a href=\"https://rustwasm.github.io/wasm-bindgen/\">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you\nare getting started with rust, read the Rust Book along with doing rustlings\n<a href=\"https://github.com/rust-lang/rustlings\">https://github.com/rust-lang/rustlings</a></p>"}},"__N_SSG":true}