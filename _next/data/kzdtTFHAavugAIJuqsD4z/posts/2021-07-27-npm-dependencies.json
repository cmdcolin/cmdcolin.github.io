{"pageProps":{"post":{"title":"Do you understand your NPM dependencies?","date":"2021-07-27","slug":"2021-07-27-npm-dependencies","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"You are writing a library...or you are writing an app and you want to publish\\nsome of the components of it as a library...\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some questions in the form of comments\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Did you realize that your yarn.lock will be ignored for anyone who installs\\nyour libraries?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Did you realize this means that your perfectly running test suite with your\\nyarn.lock could be a failing case for consumers of your app unless you don’t\\nuse semver strings like ^1.0.0 and just hardcode it to 1.0.0?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Did you realize the default of ^1.0.0 automatically gets minor version bumps\\nwhich are often fairly substantial changes, e.g. even breaking possibly?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Did you know that larger libraries like @material-ui/core don’t like to bump\\ntheir major version all the time for example so large changes are often made\\nto the minor version?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Did you know if you run \", _jsx(_components.code, {\n            children: \"yarn upgrade\"\n          }), \", it may update what is in your\\nyarn.lock file but will not update what is in your package.json?\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Did you realize that this means that if you depend on the results of running\\n\", _jsx(_components.code, {\n            children: \"yarn upgrade\"\n          }), \" e.g. it gave you a bugfix, you could be shipping buggy code to\\nconsumers of your library?\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Just something to be aware of! You can always ride the dragon and accept these\\nminor breakages from semver bumps, but it can introduce some issues for your\\nconsumers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Random fun thing: Adding a yarn package can even downgrade some other packages.\\nFor example if you have ^6.0.0 in your package.json, you yarn upgrade it so in\\nthe lockfile it says 6.1.0 but then later install another library that requires\\na hard 6.0.1, yarn will decide to downgrade you to 6.0.1 (it will not have a\\nduplicate entry in yarn.lock, just that the 6.1.0 in the yarn.lock will\\ndowngrade to 6.0.1)\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}