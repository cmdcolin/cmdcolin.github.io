{"pageProps":{"post":{"title":"Basic command line productivity tricks and learning experiences","date":"2016-04-06","slug":"2016-04-06","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_components.ul, {\n    children: [\"\\n\", _jsx(_components.li, {\n      children: \"dd deletes line in vim\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Ctrl+d scrolls down in vim\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Learn to love your package manager. Homebrew, NPM, gem, cpanm, gvm/sdkman,\\netc. these all do amazing things\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Once you learn bash, try zsh and oh-my-zsh, they have things like\\ncase-insensitive tab completion\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Don't make scripts that hardcode paths, make reusable command line scripts.\\nUse bash as your \\\"REPL\\\", not R.\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"git log -p helps analyze your log files in full details (make sure\\nautocoloring is turned on in your terminal)\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"There are keys to jump forward and backwards on the command line text editor,\\nlearn them...don't scroll one char at a time\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Learn how \\\"PATH\\\" works. Generally it is just a set of directories connected\\nby \\\":\\\" separators. You can add things to the path by saying \\\"export\\nPATH=$PATH:/new/directory/to/add\\\" and you can add this to ~/.bashrc for\\nexample\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"When your install process for a command line tool seems like nonsense, try\\nhomebrew instead. barring that, learn PATH, and how to run \\\"make install\\\",\\netc. Most of your headbashing from installing programs is 90% can be\\nexplained by not understanding how the developer is intending it to be used,\\n10% of the tool's install process being wrong\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Get a static analyzer and basic tests going on your codebase and run it on\\ntravis-ci. Getting started with travis-ci is kind of a learning curve, but it\\nis worth it\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Use cpanm instead of cpan for package management\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Vocabulary learning curve: catalina is the same thing as tomcat.\\nCATALINA_HOME is the same thing as the tomcat folder\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"alias ll=\\\"ls -l\\\", because I type \\\"ll\\\" hundreds of times a day.\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"For irc productivity, run irssi on a server in a \\\"screen\\\" e.g. \\\"screen irssi\\\"\\nand then you can come back to conversations later by just logging into the\\nserver with ssh\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Edit ~/.ssh/config to include your hostnames so you don't have to type out\\nlong ssh\\ncommands http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Use spaces instead of tabs in your source code (>:( yes I think this is the\\none true way)\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Try out nodejs and browserify in your spare time to make a \\\"npm\\\" based app in\\nthe browser. it's fun.\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Similarly, try making a simple \\\"api\\\" endpoint on the server side with\\nexpress.js or similar. can get started very quickly.\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Learn how to get a mindset of writing tests. You can write tests proactively\\n(i.e. Test driven development), but you can also write them \\\"reactively\\\" too\\n(i.e. if have a bug that you fix, you can make a test to make sure this\\ndoesn't happen anymore)\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Similar to above, tests in this sense are more \\\"sanity checks\\\" than they are\\nformal proofs. Take \\\"assert\\\" logic and \\\"debugging\\\" code out of main codebase\\nand put them in tests\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"Minimize comments in your code, and also don't comment out code and leave it\\npresent. Find a way to delete it and move on!\"\n    }), \"\\n\", _jsx(_components.li, {\n      children: \"When you have a bunch of .orig files after doing a git merge, just use git\\nclean -f to get rid of them. Similarly, to get rid of everythng, including\\nthings in your gitignore file (i.e. a super clean) use git clean -fdx. It has\\na --exclude argument too\"\n    }), \"\\n\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}