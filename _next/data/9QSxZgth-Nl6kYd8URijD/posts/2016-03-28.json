{"pageProps":{"post":{"title":"Running nginx on containerised travis-CI pt 2","date":"2016-03-28","slug":"2016-03-28","html":"<p>There are several guides out there about how to setup nginx on travis-CI\nbut I still found it to be a challenge, especially finding a modern one\nthat works with the containerized builds. I was frustrated that things\nlike <code>SimpleHTTPServer</code> from python and http-server from npm did not have\nfully enough features to run our app either (a complex \"static-site\ngenerator\" type thing you might say), and I was also too lazy to setup\n\"sauce labs\" (which I have not used, but presume has some better ability\nto run functional/browser tests).</p>\n<p>Essentially, the problem with running nginx under the containerized\nbuild is that it \"likes to be sudo\", with many logfiles by default going\nto different places that only sudo has access to.</p>\n<p>This link is probably the most similar to the technique I use here, but\nit is now gone (?) and must be accessed through the internet archive!</p>\n<p><a href=\"https://web.archive.org/web/20150919050719/http://www.doublesignal.com/running-nginx-on-containerised-travis-ci\">http://www.doublesignal.com/running-nginx-on-containerised-travis-ci</a></p>\n<p>My technique is very similar, however I use an extra trick to set the\nfile root to the current directory (instead of /tmp/nowhere as in the\nlink) by using \"envsubst\" to replace variables in the nginx config file.</p>\n<p>Without further ado, the .travis.yml can look like this</p>\n<div class=\"highlight highlight-yaml\"><pre><span class=\"pl-ent\">sudo</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-ent\">addons</span>:\n  <span class=\"pl-ent\">apt</span>:\n    <span class=\"pl-ent\">packages</span>:\n      - <span class=\"pl-s\">nginx</span>\n<span class=\"pl-ent\">install</span>:\n  - <span class=\"pl-s\">cat tests/travis.conf | envsubst > tests/travis-envsubst.conf</span>\n  - <span class=\"pl-s\">nginx -c `pwd`/tests/travis-envsubst.conf</span>\n<span class=\"pl-ent\">script</span>:\n  - <span class=\"pl-s\">wget http://localhost:9000/yourfiles</span>\n</pre></div>\n<p>Then your nginx config file can look like this</p>\n<pre><code>    worker_processes 10;\n    pid /tmp/nginx.pid;\n\n    error_log /tmp/error.log;\n\n    events {\n        worker_connections 768;\n    }\n\n    http {\n        client_body_temp_path /tmp/nginx_client_body;\n        fastcgi_temp_path     /tmp/nginx_fastcgi_temp;\n        proxy_temp_path       /tmp/nginx_proxy_temp;\n        scgi_temp_path        /tmp/nginx_scgi_temp;\n        uwsgi_temp_path       /tmp/nginx_uwsgi_temp;\n\n        server {\n            listen 9000 default_server;\n\n            server_name localhost;\n            location / {\n                root $TRAVIS_BUILD_DIR;\n                index  index.html index.htm;\n            }\n            error_log /tmp/error.log;\n            access_log /tmp/access.log;\n        }\n    }\n\n</code></pre>\n<p>Then, when travis-CI is run, it uses envsubst to replace\n<code>$TRAVIS_BUILD_DIR</code> in the <code>tests/travis.conf</code> file, and then boots up\nnginx</p>"}},"__N_SSG":true}