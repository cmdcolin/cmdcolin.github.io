{"pageProps":{"post":{"title":"Memoizing async functions so that you don't cache errors","date":"2022-02-26","slug":"2022-02-26-memoize-async","mdxSource":{"compiledSource":"var p=Object.defineProperty,d=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var l=(e,t,a)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))i.call(t,a)&&l(e,a,t[a]);if(n)for(var a of n(t))s.call(t,a)&&l(e,a,t[a]);return e},c=(e,t)=>d(e,m(t));var h=(e,t)=>{var a={};for(var r in e)i.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(e!=null&&n)for(var r of n(e))t.indexOf(r)<0&&s.call(e,r)&&(a[r]=e[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:e}=r,t=h(r,[\"components\"]);return mdx(MDXLayout,c(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"There are two hard problems in computer science: \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://martinfowler.com/bliki/TwoHardThings.html\"}),`Cache invalidation and naming\nthings`),`. In this post we'll\nshow how to invalidate the cache when a promise throws an error.`),mdx(\"p\",null,`Memoizing an async function in javascript can be somewhat confusing.\nEspecially, one important consideration is caching when an error occurs. You\ncould cache the error'd promise, but the following example will show how to not\ncache the error, but still throw an exception. Since the error is not cached,\nyou can re-try the async function call after an error, and you won't get an old\ncached error state`),mdx(\"p\",null,\"Example async function: fetch from the pokemon API\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`async function getPokemon() {\n  const id = Math.floor(Math.random() * 150)\n  const url = 'https://pokeapi.co/api/v2/pokemon/' + id\n  const ret = await fetch(url)\n  if (!ret.ok) {\n    throw new Error(\n      \\`Failed to fetch \\${url} HTTP \\${ret.status} \\${ret.statusText}\\`,\n    )\n  }\n  return ret.json()\n}\n`)),mdx(\"p\",null,\"Here is a technique that can be used to memoize this function\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`function getPokemonMemoized() {\n  if (!this.res) {\n    this.res = getPokemon().catch(e => {\n      this.res = undefined\n      throw e\n    })\n  }\n  return this.res\n}\n`)),mdx(\"p\",null,`The promise is held in this.res, and the important part of this function is\nthat when I get an error, I clear this.res and re-throw the error. The caller\nof the function, on error, will receive the error message, but caching will not\ntake place, allowing retries to take place later on.`),mdx(\"p\",null,\"See \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://cmdcolin.github.io/pokemon.html\"}),\"https://cmdcolin.github.io/pokemon.html\"),\" for demo\"),mdx(\"h2\",null,\"Footnote 1: Error handling\"),mdx(\"p\",null,`This demo also demonstrates some basic fetch error handling, and uses\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"statusText\"),\" \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText\"}),`which happens to not exist in\nHTTP/2`),`.\nIf you want a semblence of status message text in HTTP/2 you can try to use\nawait ret.json() or await ret.text() inside the catch clause, but note that it\ncould cause yet another error to be thrown`),mdx(\"h2\",null,\"Footnote 2: Global cache\"),mdx(\"p\",null,`You could also keep a cache in a global variable, or as a property on a class,\nor other methods. I have also found it useful to have a specific function for\nclearing the cache, so you can get a clean slate each time a test runs in unit\ntesting or similar`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`let res\nasync function getPokemonMemoized() {\n  if (!res) {\n    res = getPokemon().catch(e => {\n      res = undefined\n      throw e\n    })\n  }\n  return res\n}\nfunction clearCache() {\n  res = undefined\n}\n`)),mdx(\"h2\",null,\"Footnote 3 - Aborting\"),mdx(\"p\",null,`If you want to handle aborting, it is a bit trickier. Aborting in javascript is\nhandled by\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController\"}),\"AbortController\"),`.\nThis is an object that gives you an\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\"}),\"AbortSignal\"),`\nthat can be passed to fetch calls and the like to stop a big download from\nhappening.`),mdx(\"p\",null,`In our above example, if we passed an abort signal to the first call to fetch,\nand then aborted it, it would abort the fetch, `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\"}),`which throws a DOMException\ncalled\n\"AbortError\"`),`.\nYou can detect that it is an AbortError like this, and may choose not to\ndisplay or re-throw the abort exception`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`function isAbortException(e) {\n  return e instanceof Error && exception.name === 'AbortError'\n}\n`)),mdx(\"p\",null,`Now, what if 5 functions call getPokemonMemoized(), all passing different abort\nsignals. What if the first one aborts? Then all the rest will get aborted also.\nBut what if we only want to abort the cached call if literally all of them\naborted? Then we may have to synthesize an abortcontroller inside our function`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-javascript\"}),`let res\nlet abortcontroller\nlet listeners = 0\nasync function getPokemonMemoized(signal) {\n  if (!res) {\n    abortcontroller = new AbortController()\n\n    // synthesize a new signal instead of using the passed in signal\n    res = getPokemon(abortcontroller.signal).catch(e => {\n      res = undefined\n      throw e\n    })\n  }\n  if (signal) {\n    listeners++\n    // add listener to the passed in signal\n    signal.addEventListener('abort', () => {\n      listeners--\n      if (listeners === 0) {\n        abortcontroller.abort()\n      }\n    })\n  }\n  return res\n}\n`)),mdx(\"p\",null,`A library my team created,\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/GMOD/abortable-promise-cache\"}),\"abortable-promise-cache\"),`,\ntries to help with this scenario with a cleaner abstraction.`),mdx(\"h2\",null,\"Footnote 4\"),mdx(\"p\",null,`I have been playing through Pokemon Yellow and find it really amusing hence the\npokemon theme`),mdx(\"p\",null,`Fun stuff: The cutting room floor wiki with unused moves, sounds, and sprites\nin Pokemon Yellow `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://tcrf.net/Pok%C3%A9mon_Yellow\"}),\"https://tcrf.net/Pok%C3%A9mon_Yellow\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}