{"pageProps":{"post":{"title":"Jest parallelization, globals, mocks, and squawkless tests","date":"2021-10-05","slug":"2021-10-05-jest","mdxSource":{"compiledSource":"var p=Object.defineProperty,h=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var i=(e,t,o)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,r=(e,t)=>{for(var o in t||(t={}))n.call(t,o)&&i(e,o,t[o]);if(a)for(var o of a(t))l.call(t,o)&&i(e,o,t[o]);return e},c=(e,t)=>h(e,m(t));var u=(e,t)=>{var o={};for(var s in e)n.call(e,s)&&t.indexOf(s)<0&&(o[s]=e[s]);if(e!=null&&a)for(var s of a(e))t.indexOf(s)<0&&l.call(e,s)&&(o[s]=e[s]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var s=o,{components:e}=s,t=u(s,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`I found that there is a little bit of confusion and misunderstanding around how\nthings like parallelization work in jest, which sometimes leads to additional\nhacking around problems that may not exist or speculating incorrectly about\ntest failure. This is also of course a point of concern when you have code that\nfor some reason or another uses global variables. Here are a short summary of\nthings that may cause confusion.`),mdx(\"h2\",null,\"Tests in a single file are NOT run in parallel\"),mdx(\"p\",null,`Simple example, the global variable r is included in the test condition, but it\nis accurately run in all cases because the tests are not run in parallel.`),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`let r = 0\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\ndescribe('tests', () => {\n  it('t1', async () => {\n    await timeout(1000)\n    expect(r).toBe(0)\n    r++\n  })\n  it('t2', async () => {\n    await timeout(1000)\n    expect(r).toBe(1)\n    r++\n  })\n  it('t3', async () => {\n    await timeout(1000)\n    expect(r).toBe(2)\n    r++\n  })\n})\n`)),mdx(\"p\",null,`This test will take 3 seconds, and will accurately count the global variable.\nIf it was in parallel, it may only take 1 second, and would inaccurately count\nthe global variable due to race conditions`),mdx(\"h2\",null,\"Tests in different files ARE run in parallel\"),mdx(\"p\",null,`Let's take another example where we use a global variable, and then two\ndifferent tests use the global variable.`),mdx(\"p\",null,\"file_using_some_globals.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`let myGlobal = 0\n\nexport function doStuff() {\n  myGlobal++\n  return myGlobal\n}\n\nexport function resetMyGlobal() {\n  myGlobal = 0\n}\n\nexport function timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n`)),mdx(\"p\",null,\"test_global_vars1.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`import { doStuff, timeout } from './dostuff'\ntest('file1', async () => {\n  doStuff()\n  await timeout(1000)\n  expect(doStuff()).toEqual(2)\n})\n`)),mdx(\"p\",null,\"test_global_vars2.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`import { doStuff, timeout } from './dostuff'\n\ntest('file1', async () => {\n  await timeout(1000)\n  expect(doStuff()).toEqual(1)\n})\n`)),mdx(\"p\",null,`This test completes in less than 2 seconds, and these tests are run in\nparallel. They use different instances of the global state, and therefore have\nno worries with colliding their state.`),mdx(\"h2\",null,\"Does a mock from one test affect another test?\"),mdx(\"p\",null,`While seeking the fabled \"squawk-less\" test, it is often useful to mock console\nso that tests that produce an expected error don't actually print an error\nmessage. However, if not done carefully, you will remove errors across tests`),mdx(\"p\",null,`So, could a mock from one test affect another test? If it's in the same file,\nyes!`),mdx(\"p\",null,\"mock_console.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`test('test1', () => {\n  console.error = jest.fn()\n  console.error('wow')\n  expect(console.error).toHaveBeenCalled()\n})\n\ntest('test2', () => {\n  // this console.error will not appear because test1 mocked away console.error\n  // without restoring it\n  console.error(\"Help I can't see!\")\n})\n`)),mdx(\"p\",null,`To properly mock these, you should restore the console mock at the end of your\nfunction`),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`test('test1', () => {\n  const orig = console.error\n  console.error = jest.fn()\n  console.error('I should not see this!')\n  expect(console.error).toHaveBeenCalled()\n  console.error = orig\n})\n\ntest('test2', () => {\n  const consoleMock = jest.spyOn(console, 'error').mockImplementation()\n  console.error('I should not see this!')\n  consoleMock.mockRestore()\n})\n\ntest('test3', () => {\n  console.error('I should see this error!')\n})\n`)),mdx(\"h2\",null,\"Add-on: Achieve squawkless tests!\"),mdx(\"p\",null,`Your test output should just be a big list of PASS statements, not interleaved\nwith console.error outputs from when you are testing error conditions of your\ncode`),mdx(\"p\",null,`\"Squawkless tests\" is a term I made up, but it means that if you have code\nunder test that prints some errors to the console, then mock the console.error\nfunction, as in the previous section. Don't stand for having a bunch of verbose\nerrors in your CI logs! However, I also suggest only mocking out console.error\nfor tests that are `,mdx(\"strong\",{parentName:\"p\"},\"expected\"),` to have errors, lest you paper over unexpected\nerrors.`),mdx(\"p\",null,mdx(\"img\",r({parentName:\"p\"},{src:\"/media/squawkless_tests.png\",alt:null}))),mdx(\"p\",null,\"Figure: a nice clean test suite without a bunch of crazy console.error outputs\"),mdx(\"h2\",null,\"Conclusion\"),mdx(\"p\",null,`Getting better at testing requires exercise, and understanding the basics of\nyour tools can help! Hopefully this helps you achieve a better understanding\nand write cleaner jest tests.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}