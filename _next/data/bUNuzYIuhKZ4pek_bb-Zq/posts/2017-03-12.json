{"pageProps":{"post":{"title":"How I learned to hate ORM (especially for data import scripts)","date":"2017-03-12","slug":"2017-03-12","mdxSource":{"compiledSource":"var u=Object.defineProperty,h=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var l=(a,e,t)=>e in a?u(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,n=(a,e)=>{for(var t in e||(e={}))o.call(e,t)&&l(a,t,e[t]);if(s)for(var t of s(e))r.call(e,t)&&l(a,t,e[t]);return a},p=(a,e)=>h(a,m(e));var d=(a,e)=>{var t={};for(var i in a)o.call(a,i)&&e.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&s)for(var i of s(a))e.indexOf(i)<0&&r.call(a,i)&&(t[i]=a[i]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:a}=i,e=d(i,[\"components\"]);return mdx(MDXLayout,p(n(n({},layoutProps),e),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`When I was tasked with making a new application for our websites, I was\ngiven several CSV files with some expectation that these files could\nbasically be just loaded into a database and jumped into production really\nquickly. If you are using R and Shiny to make a data visualization dashboard,\nespecially if it is read only, this can actually be a reality for you: load\nthose CSVs and just pretend you're a full featured database. I had to actually\ncreate some read write functionality though. This was sort of experimental for\nme and I'm not that well versed in databases, but I wanted to share my\nexperience`),mdx(\"p\",null,`When I started, I chose grails/groovy/hibernate/GORM as a platform to\nuse. This quickly turned into pain when I tried to make a data importer\nusing grails also.`),mdx(\"p\",null,`Each CSV row from the source file would have to be turned into many\ndifferent rows in the database because it represented multiple\nrelationships, example:`),mdx(\"p\",null,mdx(\"img\",n({parentName:\"p\"},{src:\"/media/158300473458_0.png\",alt:null}))),mdx(\"p\",null,`Initially I made my data importer in grails, and was hardcoding column\nnames knowing full well this was really inflexible. At the same time I\nwas also trying to\\xA0\"iterate\" on my database schema, and I'd want to\nre-import my data to test it out, but it was really really slow. I tried\nmany different approaches to try to speed this up such as cleanUpGorm,\nStatelessSessions, and other tricks, but it would take 10-20 minutes for\nimports on a 100KB input file.`),mdx(\"p\",null,\"What I basically realised is that for bulk data import\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"1) Using the ORM is really painful for bulk import.\")),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},`2) If you can pre-process your data so that it is already in the\nformat the database expects, then you can use the CSV COPY command which\nis very fast`)),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},`3) If you can then abandon the ORM mentality and even ignore it as\na\\xA0convenience factor, then you can embrace my database system itself`)),mdx(\"p\",null,`Overall, after all this work, it just seemed like ORM treats the\ndatabase as a danger and something to be heavily abstracted over, but I\nactually found joy in learning how to treat my database as a first class\ncitizen. Soon I started gaining appreciation of`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"using plain SQL queries\"),mdx(\"li\",{parentName:\"ul\"},\"learning about full text search in postgres with ts_query\"),mdx(\"li\",{parentName:\"ul\"},`learning about triggers to make a\\xA0\"last updated\" field get updated\nautomatically`)),mdx(\"p\",null,`I am pretty happy this way, and although I miss some things like\ncriteria queries which are very powerful, I am happy that I can interact\nwith my database as a friend`),mdx(\"p\",null,`At the very least, due to the fact that I now pre-process the data\nbefore database loading, I can now import large amounts of data super\nfast with the CSV COPY command`))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}