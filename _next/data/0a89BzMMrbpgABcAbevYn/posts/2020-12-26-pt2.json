{"pageProps":{"post":{"title":"Making a HTTPS accessible S3 powered static site with CloudFront+route 53","date":"2020-12-26","slug":"2020-12-26-pt2","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    img: \"img\",\n    a: \"a\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This is not a very authoritative post because I stumbled though this but\\nI think I got it working now on my website :)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup your S3 bucket\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First setup your S3 bucket, your bucket must be named yourdomain.com\\ne.g. named after your domain\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then if you have a create-react-app setup I add a script in package.json\\nthat runs\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" \\\"predeploy\\\": \\\"npm run build\\\",\\n \\\"deploy\\\": \\\"aws sync --delete build s3://yourdomain.com\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then we can run \\\"yarn deploy\\\" and it will automatically upload our\\ncreate-react-app website to our S3 static site bucket.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then make sure your bucket has public permissions enabled\\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2.\\nThen make sure your bucket has \\\"static site hosting\\\" enabled too\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup route 53, and make your NS entries in domains.google.com\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I bought a domain with domains.google.com\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Google then emailed me to validate my ownership\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then I went to aws.amazon.com route 53 and I created a hosted zone\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This generated 4 name server entries and I added those to the\\ndomains.google.com site\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/638618421776515072_0.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Screenshot shows copying the NS values from route 53 to the name servers\\narea of domains.google.com\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup your Amazon certificate for making SSL work on CloudFront\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To properly setup However, this does not work so you need to go to\\nAmazon Certificates->Provision certificates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We request the certificate for\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://www.yourdomain.com\",\n        children: \"www.yourdomain.com\"\n      }), \"\\nyourdomain.com\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then it generates some codes for a CNAME value for each of those two\\nentries, and has a button to autoimport those CNAME values to route53\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then it will say \\\"Pending validation\\\"...I waited like an hour and then\\nit changed to \\\"Success\\\".\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/638618421776515072_1.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Screenshot shows the now successful Amazon Certificate. After you get\\nthis, you can proceed to finishing your cloudfront\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Create a CloudFront distribution and add \\\"Alternative CNAME\\\" entries for your domain\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then we can update our CloudFront distribution and add these to\\nthe \\\"Alternative CNAME\\\" input box\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"yourdomain.com\\n\", _jsx(_components.a, {\n        href: \"http://www.yourdomain.com\",\n        children: \"www.yourdomain.com\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note also that I first generated my certificate in us-east-2 but the\\n\\\"Import certificate form\\\" in cloudfront said I had to create it in\\nus-east-1\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/638618421776515072_2.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Add a default object index.html to the CloudFront setting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make your CloudFront \\\"default object\\\" is index.html\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You have to manually type this in :)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Add the CloudFront distribution to your Route 53\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add a Route 53 \\\"A\\\" record that points to the CloudFront domain name e.g.\\nd897d897d87d98dd.cloudfront.net\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Summary of steps needed\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The general hindsight 20/20 procedure is\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Upload your static content to an S3 bucket called yoursite.com (must\\nbe your domain name)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make your S3 bucket have the \\\"static website\\\" setting on in the\\nproperties menu and add a permissions policy that supports getObject\\ne.g. https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create a CloudFront distribution for your website\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make the CloudFront default object index.html\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create your domain with domains.google.com or similar\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Point the google domain's name server to Route 53 NS list from AWS\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add Route 53 A records that point to the CloudFront domain name e.g.\\nd897d897d87d98dd.cloudfront.net\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create Amazon issued certificate for yourdomain.com, which can\\nauto-import a validation CNAME to your Route 53\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make your CloudFront domain support your Alternative CNAME's e.g.\\nyourdomain.com which requires importing (e.g. selecting from a list\\nthat they auto-populate) your Amazon-issued-certificate\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Troubleshooting and notes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Problem: Your website gives 403 CloudFlare error\\nSolution: You have to get the Alternateive CNAME configuration setup\\n(pre-step involves the certificate request and validation)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Problem: Your website gives an object not found error\\nSolution: Set the CloudFront \\\"default object\\\" to index.html\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Random comment\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is one of those processes (creating the cloudfront/route 53) that\\nprobably could have done with the aws-sam CLI and it would have possibly\\nbeen easier, it is quite fiddly doing all these steps in the web\\ninterface\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}