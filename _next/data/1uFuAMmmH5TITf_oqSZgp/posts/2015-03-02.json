{"pageProps":{"post":{"title":"Creating high-resolution screenshots (of jbrowse) with phantomJS","date":"2015-03-02","slug":"2015-03-02","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      h2: \"h2\",\n      ol: \"ol\",\n      li: \"li\",\n      img: \"img\",\n      strong: \"strong\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Generating screenshots that are of high quality can be a great benefit\\nfor things like science publications. PhantomJS is great for automating\\nthis in a reproducible way. While many HTML pages can be rendered in\\nhigh resolution without modification, HTML5 canvas apps need special\\nconsiderations (see this \", _jsx(_components.a, {\n          href: \"http://searchvoidstar.tumblr.com/post/86542847038/high-dpi-rendering-on-html5-canvas-some-problems\",\n          children: \"previous post on the\\ntopic\"\n        }), \").\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"One of the key things that we noticed when we developed the high\\nresolution canvas rendering (see above link) is that the\\n\\\"devicePixelRatio\\\" can increase based on the browser's zoom level, and\\nit can also take fractional values. This was a difficult problem, to\\nmake rendering 100% consistent under all devicePixelRatio values, so we\\ncreated a config parameter called highResolutionMode to accept arbitrary\\nresolutions.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Later, we learned about PhantomJS and how it can be used for creating\\nscreenshots, it was clear that our design for the settings arbitrary\\nscaling factors for the HTML5 canvas was very helpful, as we can set\\nhighResolutionMode=4 along with the phantomJS variable\\npage.zoomFactor=4, which matches the resolutions and creates high-res\\ncanvas screenshots.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"One of the reasons that this is important is that it doesn't look like\\nPhantomJS allows \\\"devicePixelRatio\\\" to be emulated, so the\\npage.zoomFactor doesn't necessarily set the devicePixelRatio to a higher\\nnumber, so being able to set the the arbitrary high resolution canvas\\nscalings ourselves is a good solution. Reference: issue open Jan 2013\\nhttps://github.com/ariya/phantomjs/issues/10964 and we are now in Aug\\n2015\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here are some examples of the rendering process.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Examples\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Rendering screenshots to PNG\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"phantomjs rasterize.js\\n\\\"http://localhost/jbrowse/?data=sample_data/json/volvox&tracklist=0\\\"\\noutput.png \\\"3800px*1600px\\\" 2\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"http://i.imgur.com/ABLo6WJ.png\",\n              children: _jsx(_components.img, {\n                src: \"http://i.imgur.com/ABLo6WJ.png\",\n                alt: \"\"\n              })\n            })\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"Figure 1. A basic image output from phantomJS. It uses a\\nzoomFactor=2 on the command line to match highResolutionMode=2 in\\nthe config file. `\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Rendering screenshots to PDF. In JBrowse, this requires PhantomJS\\n2.0. Also see footnote.\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"phantomjs rasterize.js\\n\\\"http://localhost/jbrowse/?data=sample_data/json/volvox&tracklist=0\\\"\\noutput.pdf \\\"16in*8in\\\"\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://www.dropbox.com/s/7pceo4o406dys8s/output.pdf?dl=0\",\n              children: \"Dropbox PDF\\n906kb\"\n            })\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"Figure 2. Outputted PDF from phantomJS. This still requires setting\\nthe configuration such as highResolutionMode=2 too\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In the future, we want to consider adding highResolutionMode to be\\nspecified via the URL so that it doesn't need to be changed\\nmanually, although, setting highResolutionMode=2 by default is not a\\nbad strategy.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Footnote\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I used the following patch for rasterize.js to help \\\"fill out\\\" the\\npage space in PDF renderings (otherwise, it is a square page, not\\nsuper pretty for a widescreen app). I guess rasterize.js is really\\njust a template and not meant to be super multi-purposed, so this\\ncustom modification helps for our case.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"\\n        diff --git a/examples/rasterize.js b/examples/rasterize.js\\n        index b0e0f67..3b0b6e4 100644\\n        --- a/examples/rasterize.js\\n        +++ b/examples/rasterize.js\\n        _@@ -14,6 +14,7 @@ if (system.args.length < 3 || system.args.length > 5) {\\n            page.viewportSize = { width: 600, height: 600 };\\n            if (system.args.length > 3 && system.args[2].substr(-4) === \\\".pdf\\\") {\\n                size = system.args[3].split('_');\\n\\n        +       page.viewportSize.width *= parseInt(size[0])/parseInt(size[1]);\\n                page.paperSize = size.length === 2 ? { width: size[0], height: size[1], margin: '0px' }\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Reference\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://gmod.org/wiki/JBrowse_Configuration_Guide#Rendering_high_resolution_screenshots_using_PhantomJS\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Comparison\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/112494997473_0.png\",\n          alt: \"image\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Big improvement on font rendering\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}