{"pageProps":{"allPosts":[{"title":"The devinterrupted'ening of /r/programming","date":"2022-12-27","slug":"2022-12-27-devinterrupted","html":"<p>There are hundreds of things in the world that are important, and complaining\nabout spammers is probably not that high on the list. But, I just see this stuff\nkeep getting posted on my sacred forums.</p>\n<p>Many of these posts come from a blog called devinterrupted. They post things\nrelated to \"engineering management\" type topics. And, they often \"hit a chord\"\nand get highly upvoted and replied to. It's often the type of thing everyone can\nadd their two cents on, or offload some steam, or pontificate.</p>\n<p>This wouldn't all be so bad, but it is sometimes posted with formulaic titles,\ncreated by sock puppet accounts(?) and promoting a specific company (linearB). I\ngathered as many posts from them as I can, helpfully grouped into clickbait-y\ncategories.</p>\n<h2 id=\"titleslinks-to-posts\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#titleslinks-to-posts\"><a href=\"#titleslinks-to-posts\" style=\"margin-right: 10px\">#</a></a>Titles/links to posts</h2>\n<h3 id=\"hot-takes-and-pulling-no-punches\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#hot-takes-and-pulling-no-punches\"><a href=\"#hot-takes-and-pulling-no-punches\" style=\"margin-right: 10px\">#</a></a>Hot takes and pulling no punches</h3>\n<ul>\n<li>\n<p>“There should never be coding exercises in technical interviews. It favors\npeople who have time to do them. Disfavors people with FT jobs and families.\nPlus, your job won’t have people over your shoulder watching you code.” My\nfavorite hot take from a panel on 'Treating Devs Like Human Beings.'\n<a href=\"https://www.reddit.com/r/programming/comments/zkj6pb/there_should_never_be_coding_exercises_in/\">https://www.reddit.com/r/programming/comments/zkj6pb/there_should_never_be_coding_exercises_in/</a>\n(14k comments, 8.7k, Dec 12 2022, one of the most upvoted articles of the year\non reddit /r/programming)</p>\n</li>\n<li>\n<p>“We all use products that are amazing when the company is like 5 devs, just\nbuilding what makes sense. They grow &#x26; through failures of leadership, they\nend up with bloated product teams that don't understand the work of\ndevelopers.\" Former GitHub VP pulling no punches in recent pod on state of\ntech (413 comments, 3.2k, Dec 20, 2022)\n<a href=\"https://www.reddit.com/r/programming/comments/zr9tsr/we_all_use_products_that_are_amazing_when_the/\">https://www.reddit.com/r/programming/comments/zr9tsr/we_all_use_products_that_are_amazing_when_the/</a></p>\n</li>\n</ul>\n<h3 id=\"tils\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tils\"><a href=\"#tils\" style=\"margin-right: 10px\">#</a></a>TIL's</h3>\n<ul>\n<li>\n<p>TIL That developers in larger companies spend 2.5 more hours a week/10 more\nhours a month in meetings than devs in smaller orgs. It's been dubbed the\n\"coordination tax.\"\n(<a href=\"https://www.reddit.com/r/programming/comments/zg6ec9/til_that_developers_in_larger_companies_spend_25/\">https://www.reddit.com/r/programming/comments/zg6ec9/til_that_developers_in_larger_companies_spend_25/</a>,\n517 comments, 4.5k, Dec 8, 2022)</p>\n</li>\n<li>\n<p>TIL 9 out of 10 devs said they would give up 24% of their lifetime earnings if\nthey got more meaning in their jobs. Also, 84% say they're disengaged at work\nand don't trust their company leaders.\n<a href=\"https://www.reddit.com/r/webdev/comments/u9ogin/til_9_out_of_10_devs_said_they_would_give_up_24/\">https://www.reddit.com/r/webdev/comments/u9ogin/til_9_out_of_10_devs_said_they_would_give_up_24/</a></p>\n</li>\n<li>\n<p>TIL about the \"Intent-Perception Gap\" in programming. Best exemplified when a\nCTO or manager casually suggests something to their developers they take it as\na new work commandment or direction for their team.\n<a href=\"https://www.reddit.com/r/programming/comments/u7dv5m/til_about_the_intentperception_gap_in_programming/\">https://www.reddit.com/r/programming/comments/u7dv5m/til_about_the_intentperception_gap_in_programming/</a></p>\n</li>\n<li>\n<p>TIL after auditing 2,000 dev teams, data scientists found that programmers are\nwaiting on average 4+ days for their review requests to be picked up by\nother ... (partial result from google, post super deleted\n<a href=\"https://www.reddit.com/r/gamedev/comments/xh649i/deleted_by_user/\">https://www.reddit.com/r/gamedev/comments/xh649i/deleted_by_user/</a>)</p>\n</li>\n</ul>\n<h3 id=\"cool-convos\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#cool-convos\"><a href=\"#cool-convos\" style=\"margin-right: 10px\">#</a></a>Cool convos</h3>\n<ul>\n<li>\n<p>\"Dev burnout drastically decreases when you actually ship things regularly.\nBurnout is caused by crap like toil, rework and spending too much mental\nenergy on bottlenecks.\" Cool conversation with the head engineer of Slack on\nhow burnout is caused by all the things that keep devs from coding.\n(<a href=\"https://www.reddit.com/r/programming/comments/vold1e/dev_burnout_drastically_decreases_when_you/\">https://www.reddit.com/r/programming/comments/vold1e/dev_burnout_drastically_decreases_when_you/</a>)</p>\n</li>\n<li>\n<p>\"Dev managers' most overlooked responsibility is to treat dev bandwidth as a\nvaluable, limited resource. It's the highest leverage for every\nsoftware-driven company and needs to be calculated as such.\" Cool convo with\nStripe's top engineer on how the dev org connects to the rest of the company\n<a href=\"https://www.reddit.com/r/webdev/comments/wwsrw5/dev_managers_most_overlooked_responsibility_is_to/\">https://www.reddit.com/r/webdev/comments/wwsrw5/dev_managers_most_overlooked_responsibility_is_to/</a></p>\n</li>\n<li>\n<p>\"Developers do nothing good after 45 hours of work.\" Fun conversation with\nhead developer of Netflix on the dumbest things engineering orgs do to kill\nproductivity - they really take a crap on retros. (Post deleted\n<a href=\"https://www.reddit.com/r/Python/comments/umhf4v/developers_do_nothing_good_after_45_hours_of_work/\">https://www.reddit.com/r/Python/comments/umhf4v/developers_do_nothing_good_after_45_hours_of_work/</a>)</p>\n</li>\n</ul>\n<h3 id=\"studies-and-interesting-cases\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#studies-and-interesting-cases\"><a href=\"#studies-and-interesting-cases\" style=\"margin-right: 10px\">#</a></a>Studies and interesting cases</h3>\n<ul>\n<li>\n<p>“The longer a developer assumes a code review will take, the longer they will\ntake to respond to it.” Interesting case for adding estimated review times to\npull requests (Post deleted after being called a sock puppet account\n<a href=\"https://www.reddit.com/r/programming/comments/z2bo70/comment/ixgfn2x/?utm_source=share&#x26;utm_medium=web2x&#x26;context=3\">https://www.reddit.com/r/programming/comments/z2bo70/comment/ixgfn2x/?utm_source=share&#x26;utm_medium=web2x&#x26;context=3</a>\n)</p>\n</li>\n<li>\n<p>Study: Developers spend over 2 days a week just waiting for other developers\nto review their code (Post deleted)\n<a href=\"https://www.reddit.com/r/java/comments/t5f6i7/study_developers_spend_over_2_days_a_week_just/\">https://www.reddit.com/r/java/comments/t5f6i7/study_developers_spend_over_2_days_a_week_just/</a></p>\n</li>\n<li>\n<p>\"The modern pull-request process has caused inefficiencies, particularly\nreview delays, as it isn't automated, so speed depends on the availability of\nthe right code reviewer.\" Interesting blog arguing for filtering pull requests\nbased on risk in order to promote \"continuous merge.\" (Post deleted, called\nout as a spammer account\n<a href=\"https://www.reddit.com/r/programming/comments/zdbtfr/the_modern_pullrequest_process_has_caused/\">https://www.reddit.com/r/programming/comments/zdbtfr/the_modern_pullrequest_process_has_caused/</a>)</p>\n</li>\n<li>\n<p>\"Too many companies treat dev burnout like a 24-hour flu where they can just\nsend a person home or tell them to take the day off.\" A trained\ntherapist-turned-engineer reveals how she diagnoses healthy dev teams from\nones doomed to fail.\n<a href=\"https://www.reddit.com/r/webdev/comments/wonkt6/too_many_companies_treat_dev_burnout_like_a/\">https://www.reddit.com/r/webdev/comments/wonkt6/too_many_companies_treat_dev_burnout_like_a/</a></p>\n</li>\n<li>\n<p>There was another highly upvoted post about \"cycle time\" posted to\n/r/programming probably that I cannot find now</p>\n</li>\n</ul>\n<h3 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h3>\n<p>The devinterrupted blog/podcast appears to be related to the linearB company,\nwho advocate a notion of \"cycle time\" (<a href=\"https://linearb.io/blog/cycle-time/\">https://linearb.io/blog/cycle-time/</a>) as a\ndeveloper metric engineering managers should look at, and they pontificate and\ninterview interesting people. It's not all bad. But, it's pretty much a ploy to\nget your clicks. They promote the \"gitStream\" product that linearB makes on all\nthe posts on devinterrupted. <a href=\"https://linearb.io/dev/gitstream/\">https://linearb.io/dev/gitstream/</a></p>\n<p>I'd recommend linearB stop posting these things, or pretending that they are not\nbehind these posts.</p>"},{"title":"The React tutorial I wish I had","date":"2022-11-20","slug":"2022-11-20-the-react-tutorial-i-wish-i-had","html":"<p>When I was learning React, I found it very challenging, and my eyes would glaze\nover any time I tried to learn (I wrote about my struggle here\n<a href=\"https://cmdcolin.github.io/posts/2020-07-04\">https://cmdcolin.github.io/posts/2020-07-04</a>)</p>\n<p>Here is a short tutorial that could help you get started. I wrote in my above\nblogpost that sitting down with a book was what finally helped me, but this\nblogpost aims to be a sort of TLDR for certain concepts.</p>\n<h3 id=\"the-simplest-react-component\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-simplest-react-component\"><a href=\"#the-simplest-react-component\" style=\"margin-right: 10px\">#</a></a>The simplest React component</h3>\n<p>Here is a \"React component\" that prints hello world in a div</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>I like to think of React components as \"functions that return HTML\". That is a\noversimplification, but it can be a helpful thinking tool to help you get\nstarted.</p>\n<h3 id=\"using-our-helloworld-component-in-another-component\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-our-helloworld-component-in-another-component\"><a href=\"#using-our-helloworld-component-in-another-component\" style=\"margin-right: 10px\">#</a></a>Using our <code>HelloWorld</code> component in another component</h3>\n<p>We said React can be thought of as \"functions that return HTML\" but we can also\ncombine these them together.</p>\n<p>For example, we can create a component named \"App\" that uses our \"HelloWorld\"\ncomponent</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">p</span><span style=\"color: #E4F0FB\">>This is my app&#x3C;/</span><span style=\"color: #5DE4C7\">p</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">HelloWorld</span><span style=\"color: #E4F0FB\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>It is common to have an \"App\" level component, that renders all the other\ncomponents in your page</p>\n<h3 id=\"how-do-these-components-get-rendered-to-html\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-do-these-components-get-rendered-to-html\"><a href=\"#how-do-these-components-get-rendered-to-html\" style=\"margin-right: 10px\">#</a></a>How do these components get rendered to HTML?</h3>\n<p>Typically, just once in your app, you use ReactDOM to render the \"App\" level\ncomponent to the page.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">ReactDOM</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react-dom</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">ReactDOM</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">render</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #E4F0FB\"> /></span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">document</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">getElementById</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">root</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">))</span></span></code></pre>\n<p>And in your index.html you have e.g.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;!</span><span style=\"color: #5DE4C7\">DOCTYPE</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #5FB3A1; font-style: italic\">html</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">html</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">body</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #5FB3A1; font-style: italic\">id</span><span style=\"color: #A6ACCD\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">root</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #D0679D\">/</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">&#x3C;/</span><span style=\"color: #5DE4C7\">body</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">&#x3C;/</span><span style=\"color: #5DE4C7\">html</span><span style=\"color: #E4F0FB\">></span></span></code></pre>\n<p>Note: in React 18, it's a little different than above (React 18 uses createRoot\ninstead of ReactDOM.render) but I'm going for brevity here</p>\n<h3 id=\"accepting-parameters-to-your-components\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#accepting-parameters-to-your-components\"><a href=\"#accepting-parameters-to-your-components\" style=\"margin-right: 10px\">#</a></a>Accepting parameters to your components</h3>\n<p>React components can accept \"props\" which are like parameters to your component</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">Hello</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">props</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">props</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello {name}!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>We then pass props using HTML like attributes</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">Hello</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">name</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">Colin</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This will print \"Hello Colin!\"</p>\n<h3 id=\"rendering-lists-of-items\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#rendering-lists-of-items\"><a href=\"#rendering-lists-of-items\" style=\"margin-right: 10px\">#</a></a>Rendering lists of items</h3>\n<p>The <code>{name}</code> inside the div is like a little snippet of plain-JS code. It can be\nused to do more complicated things. For example you can render a list of items</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">List</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">list</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Apples</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Oranges</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Pears</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">ul</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {list</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">item </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">li</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">key</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{item}>{item}&#x3C;/</span><span style=\"color: #5DE4C7\">li</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">))</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">ul</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Inside the \"list\" each item has a key prop that is specified. See\n<a href=\"https://reactjs.org/docs/lists-and-keys.html\">https://reactjs.org/docs/lists-and-keys.html</a> for more discussion on this</p>\n<h3 id=\"how-do-i-use-react-in-my-own-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how-do-i-use-react-in-my-own-app\"><a href=\"#how-do-i-use-react-in-my-own-app\" style=\"margin-right: 10px\">#</a></a>How do I use React in my own app?</h3>\n<p>Commonly, React is downloaded from npm using your package manager, but often\nrequires some extra steps to get JSX to compile which is often done by babel. I\nwill not cover a minimal React setup here, but I will recommend a couple setups\nthat make it easy for starting out.</p>\n<ul>\n<li>Use <code>create-react-app</code>. You run <code>npx create-react-app yourapp</code> on your command\nline, this creates a folder named <code>yourapp</code> on your computer, and then you\n<code>cd yourapp</code> to go into that directory and run <code>npm run start</code>. This starts a\n\"dev server\" that runs at <a href=\"http://localhost:3000\">http://localhost:3000</a>, and you can then change the\njs files, and the results are instantly updated in your web browser</li>\n<li>CodeSandbox: this is a 100% web based IDE that you can use to experiment with\nReact or other toolkits, visit <a href=\"https://codesandbox.io\">https://codesandbox.io</a> and run \"Create\" and\nthen click \"React app\", this is the React app that it creates\n<a href=\"https://codesandbox.io/s/cool-moon-7x96jk\">https://codesandbox.io/s/cool-moon-7x96jk</a></li>\n</ul>\n<p>If you are trying to incorporate React into a legacy or existing project, then I\nencourage you to experiment in these starter kit environments first. It can be\ndifficult to bolt on React to an existing environment in some ways and\nunderstanding the basics will help.</p>\n<h3 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h3>\n<p>I hope this helps you get started with React, let me know if you have any\nquestions.</p>\n<h3 id=\"footnote-1-class-based-components\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-class-based-components\"><a href=\"#footnote-1-class-based-components\" style=\"margin-right: 10px\">#</a></a>Footnote 1. Class based components</h3>\n<p>In the old days, React used \"class based components\", here is the Hello world\nexample as a class based component</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">class</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #ADD7FF\">render</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world!&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>The class based components had other \"lifecycle functions\" like\n\"componentDidMount\" and such that do not exist in function based components. In\nfunction components, React hooks are used instead.</p>\n<p>You will probably mostly see function components instead of class based\ncomponents these days</p>\n<h3 id=\"footnote-2-how-is-this-html-allowed-in-react\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-how-is-this-html-allowed-in-react\"><a href=\"#footnote-2-how-is-this-html-allowed-in-react\" style=\"margin-right: 10px\">#</a></a>Footnote 2. How is this HTML allowed in React?</h3>\n<p>The HTML-like syntax may look odd in JS code. It is called JSX. It get's\nconverted to code that is like this at runtime</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Hello world&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>would get converted to this by babel or other jsx transpiler to something like\nthis</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">HelloWorld</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">React</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">createElement</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #D0679D\">null</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Hello world</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>It's not common to write React without jsx, but as seen above, it can be done :)</p>\n<h3 id=\"footnote-4-things-that-sometimes-complicate-your-react-learning-experience\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-things-that-sometimes-complicate-your-react-learning-experience\"><a href=\"#footnote-4-things-that-sometimes-complicate-your-react-learning-experience\" style=\"margin-right: 10px\">#</a></a>Footnote 4. Things that sometimes complicate your React learning experience</h3>\n<p>The React learning experience, when it's good, is quite nice. But there can be\nmany roadblocks</p>\n<ul>\n<li>\n<p>You can be bogged down by many different sometimes conflicted learning\nresources - The new <a href=\"https://beta.reactjs.org\">https://beta.reactjs.org</a> are currently being implemented\nand hopefully will make the learning experience better.</p>\n</li>\n<li>\n<p>You can be bogged down by the difficulty in setting up your dev environment -\nthe need to get transpilers and compilers for the JSX syntax and such is not\neasy, and has led to an explosion of developer tooling that often needs to be\nrun on the command line to do any sort of programming for the web. This is a\nunfortunate consequence of the web becoming more complicated. Learning to be\ncomfortable with the command line is often an important stepping stone to\nbecoming comfortable with modern JS dev tooling.</p>\n</li>\n<li>\n<p>You can be bogged down by \"tangential\" concepts like state management</p>\n</li>\n<li>\n<p>You can be bogged down by Typescript or PropTypes - When I was learning React,\nI was confused by PropTypes in code. PropTypes are fully optional though, and\nare just used to check the types of props at runtime. TypeScript can be tricky\nalso, and does type checking at \"compile time\"</p>\n</li>\n</ul>"},{"title":"Handling component state with React...you gotta reset it sometimes","date":"2022-10-10","slug":"2022-10-10-reactstate","html":"<p>If you make a React component that has, say, a prop for a item id, and an async\naction in a <code>useEffect</code> to fetch data for that item from an API, then you\nprobably also have a <code>useState</code> to set data after you get results back from your\nAPI (or an error occurs). But, the interesting thing to me is</p>\n<p><strong>you have to remember to reset that state, including error state, when your\nprops change</strong></p>\n<p>It seems obvious, but I just wanted to write some working examples here</p>\n<h2 id=\"part-1-having-component-state-for-api-response-or-error\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-1-having-component-state-for-api-response-or-error\"><a href=\"#part-1-having-component-state-for-api-response-or-error\" style=\"margin-right: 10px\">#</a></a>Part 1: Having component state for API response or error</h2>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003\">https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003</a></p>\n<p>In the below example, we will handle fetching from the Pokemon API, and use a\n<code>useState</code> to handle the returned data or a returned error. The important thing\nto highlight is: when you go to refetch a new item from the API, you likely need\nto clear the state of what was previously there (unless you want to display\nstale results)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useState</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useEffect</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  type</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  types</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// util fetch function to throw if !response.ok, I use this util often</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">myfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #91B4D5\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">Error fetching </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\">: HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">ErrorMessage</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { error</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">style</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">background</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">red</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #E4F0FB\">}>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setError</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setPokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #767C9DB0; font-style: italic\">// important: reset the error and item state of the component!</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {error </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">ErrorMessage</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">error</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{error} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">className</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">htmlFor</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">>Pokemon name&#x3C;/</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">input</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">id</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">type</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">text</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">value</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">onChange</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{e </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #E4F0FBD0\">setValue</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">target</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h2 id=\"part-2-a-custom-hook\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#part-2-a-custom-hook\"><a href=\"#part-2-a-custom-hook\" style=\"margin-right: 10px\">#</a></a>Part 2: A custom hook?</h2>\n<p>Can we make a hook to make this easier? I don't often make custom hooks, but you\ncan try to \"encapsulate\" some of the multiple-related hooks (the useStates for\nerror, pokemonInfo, and useEffect) into a single hook. This does not drastically\naffect our approach, but in the below example, we can call\n<code>usePokemonInfo(pokemonName)</code> and error handling and fetching is handled for us</p>\n<p>Working codesandbox</p>\n<p><a href=\"https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234\">https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234</a></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useState</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">useEffect</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  type</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">interface</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  types</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">PokemonType</span><span style=\"color: #A6ACCD\">[]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #767C9DB0; font-style: italic\">// util fetch function to throw if !response.ok, I use this util often</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">myfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #91B4D5\">?:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">opts</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">Error fetching </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\">: HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setError</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setItemInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">PokemonInfo</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setItemInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #767C9DB0; font-style: italic\">// &#x3C;-- important to reset the state of the app</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #767C9DB0; font-style: italic\">// &#x3C;-- important to reset the state of the app</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setItemInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #E4F0FBD0\">setError</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">const</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">ErrorMessage</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { error</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">style</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">background</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">red</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #E4F0FB\">}>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {error </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">ErrorMessage</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">error</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{error} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">className</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">App</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">htmlFor</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">>Pokemon name&#x3C;/</span><span style=\"color: #5DE4C7\">label</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">input</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">id</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pokemon_name</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">type</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">text</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">value</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #91B4D5; font-style: italic\">onChange</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{e </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #E4F0FBD0\">setValue</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">target</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>I think it's sometimes common to forget error handling in async JS code\n(useEffect async or many other contexts, etc), and there aren't e.g. lint rules\nto really help, leaving errors uncaught or handled poorly. If you don't manually\nhandle the error in the <code>useEffect</code>, your user probably will not see that an\nerror occurred.</p>\n<p>In addition to this error handling rant, the other point of this article is you\nneed to reset your component state when props change, which in the code above,\nare the calls to setError(undefined) and setPokemonInfo(undefined) before I\nfetch a new Pokemon from the API.</p>\n<h2 id=\"footnote-0---web-perf-pontificating\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-0---web-perf-pontificating\"><a href=\"#footnote-0---web-perf-pontificating\" style=\"margin-right: 10px\">#</a></a>Footnote 0 - Web perf pontificating</h2>\n<p>I think sometimes, this manner of fetching data inside a component can lead to\nwhat some web-perf-experts refer to as waterfall. Can you get your state from\nyour parent? That might result in fewer individual requests made, but is also\nquite a different architecture.</p>\n<h2 id=\"footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\"><a href=\"#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error\" style=\"margin-right: 10px\">#</a></a>Footnote 1 - ErrorBoundaries don't automatically save you from manually handling error</h2>\n<p>You can also consider using an ErrorBoundary, but this does not automatically\ncatch errors that happen in e.g. a useEffect. If you want your ErrorBoundary to\nhandle your useEffect related error, then you can use something like this. This\nassumes a <code>react-error-boundary</code> type ErrorBoundary.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">ErrorBoundary</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">react-error-boundary</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">PokemonCard</span><span style=\"color: #A6ACCD\">({ </span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\"> }</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> { pokemonName</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">pokemonInfo</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">usePokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">error</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      {pokemonInfo </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name} is of type{</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">          {pokemonInfo</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">types</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">map</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">t </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> t</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">).</span><span style=\"color: #E4F0FBD0\">join</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">, </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>Loading...&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #E4F0FB\">}</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">export default </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">()</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">value</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FB\">setValue</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oddish</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">    </span><span style=\"color: #E4F0FB\">&#x3C;</span><span style=\"color: #5DE4C7\">ErrorBoundary</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">FallbackComponent</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{</span><span style=\"color: #A6ACCD\">({</span><span style=\"color: #E4F0FB\"> error </span><span style=\"color: #A6ACCD\">})</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #E4F0FB\"> &#x3C;</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>{</span><span style=\"color: #A6ACCD\">`${</span><span style=\"color: #E4F0FB\">error</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #E4F0FB\">}&#x3C;/</span><span style=\"color: #5DE4C7\">div</span><span style=\"color: #E4F0FB\">>}></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      &#x3C;</span><span style=\"color: #5DE4C7\">PokemonCard</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #91B4D5; font-style: italic\">pokemonName</span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\">{value} /></span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    &#x3C;/</span><span style=\"color: #5DE4C7\">ErrorBoundary</span><span style=\"color: #E4F0FB\">></span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">  </span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Another trick, instead of throwing in the body of the component is throwing in\nthe callback form of the useState-setter. Then you wouldn't necessarily need to\nhave a separate useState for the error state, but you would then need an\nErrorBoundary or something to help display a nice error.</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">false</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #767C9DB0; font-style: italic\">// important: reset the error and item state of the component!</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #D0679D\">undefined</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">myfetch</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">https://pokeapi.co/api/v2/pokemon/</span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">data</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setPokemonInfo</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">e</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        })</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  })()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">cancelled</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}, [</span><span style=\"color: #E4F0FB\">pokemonName</span><span style=\"color: #A6ACCD\">])</span></span></code></pre>\n<h2 id=\"footnote-2-the-future-with-react-data-fetching\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-the-future-with-react-data-fetching\"><a href=\"#footnote-2-the-future-with-react-data-fetching\" style=\"margin-right: 10px\">#</a></a>Footnote 2: The future with React data fetching</h2>\n<p>See <a href=\"https://github.com/reactjs/rfcs/pull/229\">https://github.com/reactjs/rfcs/pull/229</a></p>\n<p>This was just announced so there is a lot to unpack there, I can update this\nblog post if I come up with an analogous example using this RFC</p>\n<h2 id=\"footnote-3-using-react-query-or-swr\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-using-react-query-or-swr\"><a href=\"#footnote-3-using-react-query-or-swr\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Using react-query or swr</h2>\n<p>There are helper libraries that try to help</p>\n<p>One helper library suggested was called <code>react-query</code>, so I made a demo using\n<code>@tanstack/react-query</code> v4.</p>\n<p><a href=\"https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx\">https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx</a></p>\n<p>Another is <code>swr</code>, here is a demo for that library</p>\n<p><a href=\"https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx\">https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx</a></p>\n<p>These libraries definitely <strong>do</strong> a lot of things, so take on some more baggage\nthan the simple hooks described above, but may be helpful to you also.</p>\n<h2 id=\"footnote-4-fetching-is-just-one-aspect-of-this-blogpost\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-fetching-is-just-one-aspect-of-this-blogpost\"><a href=\"#footnote-4-fetching-is-just-one-aspect-of-this-blogpost\" style=\"margin-right: 10px\">#</a></a>Footnote 4: Fetching is just one aspect of this blogpost</h2>\n<p>Really, the thing I wanted to make more clear in general was also how \"sticky\"\nuseState can be. I find other patterns in my codebase besides just fetching\nwhere I have to \"reset\" the useState hook to a neutral state, sometimes related\nto controlled components.</p>\n<h2 id=\"footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\"><a href=\"#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state\" style=\"margin-right: 10px\">#</a></a>Footnote 5: You can also use the \"key\" prop as an alternative to manually resetting state</h2>\n<p>See <a href=\"https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx\">https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx</a></p>\n<p>I am not sure I recommend this as it basically forces the component to unmount,\nwhich may be ok in some cases but I don't know all the ramifications. A quote\nfrom <a href=\"https://kentcdodds.com/blog/understanding-reacts-key-prop\">https://kentcdodds.com/blog/understanding-reacts-key-prop</a> explains</p>\n<p>\"This allows you to return the exact same element type, but force React to\nunmount the previous instance, and mount a new one. This means that all state\nthat had existed in the component at the time is completely removed and the\ncomponent is \"reinitialized\" for all intents and purposes. \"</p>"},{"title":"Making an audio slideshow with ffmpeg","date":"2022-10-08","slug":"2022-10-08-ffmpeg-slideshow","html":"<p>Inspired by a new trend of posting \"playlists\" on youtube with visual\naccompaniment (<a href=\"https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s\">https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s</a>), I wanted to\ntry to make my own with a slideshow. I used ffmpeg as the heavy lifting tool</p>\n<h2 id=\"step-1---prepare-your-playlist\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-1---prepare-your-playlist\"><a href=\"#step-1---prepare-your-playlist\" style=\"margin-right: 10px\">#</a></a>Step 1 - prepare your playlist</h2>\n<p>I like foobar2000, because it can combine multiple files into a single output\nfile.</p>\n<p>Use right-click -> \"Convert ...\" in the foobar2000 playlist</p>\n<p><img src=\"/media/foobar1.png\" alt=\"\"></p>\n<p>Use \"Merge all tracks into one file\" in the \"Convert...\" dialog</p>\n<p><img src=\"/media/foobar2.png\" alt=\"\"></p>\n<p>Note: If you have a folder of mp3's only, you can directly concatenate them with\n<code>cat *.mp3 > out.mp3</code> or use ffmpeg to concatenate them for a pure command-line\nalternative.</p>\n<h2 id=\"step-2---prepare-the-slideshow\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-2---prepare-the-slideshow\"><a href=\"#step-2---prepare-the-slideshow\" style=\"margin-right: 10px\">#</a></a>Step 2 - prepare the slideshow</h2>\n<p>Use 10 seconds per picture. Note the glob pattern is in quotes</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">ffmpeg</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-framerate</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #ADD7FF\">/</span><span style=\"color: #5DE4C7\">10</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-pattern_type</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">glob</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">*.jpg</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">pics.mp4</span></span></code></pre>\n<h2 id=\"step-3---combine-the-slideshow-and-playlist\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-3---combine-the-slideshow-and-playlist\"><a href=\"#step-3---combine-the-slideshow-and-playlist\" style=\"margin-right: 10px\">#</a></a>Step 3 - combine the slideshow and playlist</h2>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">ffmpeg</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-stream_loop</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-1</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">pics.mp4</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">playlist.wav</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-shortest</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">-vcodec</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">copy</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">output.mp4</span></span></code></pre>\n<p>Using <code>-stream_loop -1</code> on pics.mp4 will loop the pics until playlist.wav ends,\nbut then limit itself to the length of the playlist.wav with <code>-shortest</code></p>\n<h2 id=\"step-4---upload-to-youtube\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-4---upload-to-youtube\"><a href=\"#step-4---upload-to-youtube\" style=\"margin-right: 10px\">#</a></a>Step 4 - upload to youtube</h2>\n<p>Done!</p>\n<h3 id=\"footnote-1-what-if-you-just-want-a-single-picture\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-what-if-you-just-want-a-single-picture\"><a href=\"#footnote-1-what-if-you-just-want-a-single-picture\" style=\"margin-right: 10px\">#</a></a>Footnote 1: What if you just want a single picture?</h3>\n<p>Common for posting an album to youtube, you post the album art and some audio,\nyou can try searching from stackoverflow for options related to this</p>\n<p>Example <a href=\"https://superuser.com/a/332867/415552\">https://superuser.com/a/332867/415552</a></p>\n<h3 id=\"footnote-2-distortion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-distortion\"><a href=\"#footnote-2-distortion\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Distortion</h3>\n<p>The pictures may get distorted to fit the video frame, I haven't experimented\nwith options that modify this behavior</p>"},{"title":"Creating a music player using Rust/GTK4 - fml9000","date":"2022-09-05","slug":"2022-09-05-rustmusicplayer","html":"<p>I have started endeavoring to learn Rust. I did the rustlings exercises but I\nknew the concepts would fade rapidly from my brain without some practice. I have\nnow started making a music player using Rust+GTK4.</p>\n<p>I chose GTK4 to have a linux native GUI music player. Particularly, I have a\nparticular <code>foobar2000</code> setup that I wanted to emulate. I have used <code>foobar2000</code>\nunder wine (windows emulator on linux) and it's not terrible, but it has\nbackground CPU consumption of about 15% idle and doesn't feel quite right\nsometimes. I have used a variety of other linux music players such as\n<code>quodlibet</code> (GUI/GTK based) and <code>cmus</code> (command line) but they didn't really\nfeel quite right.</p>\n<h3 id=\"choosing-a-tech-stack\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-a-tech-stack\"><a href=\"#choosing-a-tech-stack\" style=\"margin-right: 10px\">#</a></a>Choosing a tech stack</h3>\n<p>I started by attempting with <code>Relm4</code>, which I may return to at some point, but\ntrying to juggle learning Relm4-style widgets, GTK, and rust all at once was a\nbit much. I stepped to using <code>gtk4-rs</code> directly.</p>\n<h3 id=\"create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\"><a href=\"#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview\" style=\"margin-right: 10px\">#</a></a>Create a \"spreadsheet style\" data grid of tracks with <code>ColumnView</code></h3>\n<p>Then, I wanted to create a data grid showing to display e.g. a table with\nartist, track, album, etc. I chose to use the GTK\n<a href=\"https://docs.gtk.org/gtk4/class.ColumnView.html\"><code>ColumnView</code></a> to drive this. I\nstumbled around looking for example code, but there was none specifically for\nthe <code>ColumnView</code>. I also realized the <code>ListView</code> example from the <code>gtk4-rs</code>\nexamples with it's factory function had similar needs that the <code>ColumnView</code>.</p>\n<p>I found out that I basically needed to create a <code>ListStore</code>. I thought if I\ncould make my own <code>GObject</code> subclass, it would solve everything, but I had\ntrouble getting making this work (rust doesn't have the concept of extending a\nclass for one thing, you implement various traits instead). Finally, I randomly\nstumbled on this link using a <code>BoxedAnyObject</code> with a good example of storing\ndata in a ListStore\n<a href=\"https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html\">https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html</a></p>\n<p>The <code>BoxedAnyObject</code> is a <code>GObject</code>, so this was an good route to storing the\n<code>ListView</code> items. There was no example code for connecting the <code>ListStore</code> with\nthe <code>ColumnView</code>, so I stuggled for awhile before realizing that the <code>ListView</code>\nexample in the <code>gtk4-rs</code> codebase has similar concepts.</p>\n<p>See [1] for minimal usage of <code>ColumnView</code> that I contributed to the <code>gtk4-rs</code>\nrepo!</p>\n<h3 id=\"choosing-an-audio-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#choosing-an-audio-library\"><a href=\"#choosing-an-audio-library\" style=\"margin-right: 10px\">#</a></a>Choosing an audio library</h3>\n<p>To actually play audio, I looked at a couple options. There was even one option\ncalled GTK\n<a href=\"https://gtk-rs.org/gtk4-rs/git/docs/gtk4/struct.MediaFile.html\"><code>MediaFile</code></a>\nwhich should to be able to play e.g. mp3s, making my job of making a media\nplayer much simpler, but it produced an error\n<a href=\"https://www.google.com/search?q=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;oq=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;aqs=chrome..69i57.267j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8\">\"GTK could not find a media module. Check your installation.\"</a>\nwhich had very few references on the internet. I figured this could be difficult\nto solve or point to issues I could face later on making minimal executables for\nusers.</p>\n<p>So, next I tried out <code>symphonia</code> (<a href=\"https://github.com/pdeljanov/Symphonia/\">https://github.com/pdeljanov/Symphonia/</a>).\nSymphonia requires a lot more code to work (~1000 lines so far, copying from the\n<code>symphonia-play</code> example) but it has broad file format support, pure-rust audio\nstack, etc. I got confused about how to package it into an easy-to-use system\nthough, having to create a symphonia player on a separate thread, so I looked\nelsewhere...</p>\n<p>Next I turned to <code>rodio</code>. This works well, and automatically plays on a separate\nthread, but I found two issues 1) I have to initialize the rodio player in \"fn\nmain\" and not anywhere else, or it would just play a short blip of audio\n(<a href=\"https://github.com/RustAudio/rodio/issues/381\">https://github.com/RustAudio/rodio/issues/381</a>). Then, it turned out that the\n<code>rodio</code>\n<a href=\"https://docs.rs/rodio/0.14.0/rodio/struct.Sink.html#method.stop\"><code>Sink</code></a>\ninstance (which you pass audio to) cannot stop and then play new song xref\n(<a href=\"https://github.com/RustAudio/rodio/issues/315\">https://github.com/RustAudio/rodio/issues/315</a>). To workaround, I replace it\nwith a new <code>Sink</code>.</p>\n<p>This required me to learn about <code>RefCell</code>. I googled probably about 50 things\njust grasping at straws for awhile, but then landed on the solution of putting\nthe <code>Sink</code> in a <code>Rc&#x3C;RefCell&#x3C;Sink>></code>, then that allows me to pass it into my\ncallback that handles double clicking the songs in the <code>ColumnView</code>, and then I\nborrow the <code>RefCell</code> mutably to replace it with a new <code>Sink</code>.</p>\n<h3 id=\"reading-audio-metadata-into-an-sqlite-db\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#reading-audio-metadata-into-an-sqlite-db\"><a href=\"#reading-audio-metadata-into-an-sqlite-db\" style=\"margin-right: 10px\">#</a></a>Reading audio metadata into an <code>sqlite</code> DB</h3>\n<p>I also wanted to have the option of reading and writing audio metadata.\nSymphonia only reads metadata, so I found the <code>lofty</code> crate.</p>\n<p>I also realized that reading tens of thousands of file's metadata at each app\nstartup would be slow, so I endeavored to store that data in an <code>sqlite</code>\ndatabase. I found that music players like <code>foobar2000</code> and <code>0xdeadbeef</code> have\ndatabases of track metadata also (Example folder on <code>foobar2000</code> (1.x) for this\nsnap/foobar2000/433/foobar2000/profile/library/74E45640B1C695CC/meta-0001,\nmeta-0002, etc.)</p>\n<p>I used the <code>walkdir</code> crate to walk a directory for files, <code>lofty</code> to read the\nmetadata, and then finally inserted the data into the <code>sqlite</code> db. I am still\nworking out the schema for the database but it provisionally associates data\nwith a primary key of filename.</p>\n<h3 id=\"learning-about-reference-counting-and-move-semantics\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#learning-about-reference-counting-and-move-semantics\"><a href=\"#learning-about-reference-counting-and-move-semantics\" style=\"margin-right: 10px\">#</a></a>Learning about reference counting and move semantics</h3>\n<p>Originally I queried the sqlite database and stored a <code>Vec&#x3C;Track></code>, where\n<code>Track</code> is a struct with artist, album, song title, etc. I realized that this\ncauses issues passing this around to different functions, and storing them in\nthe <code>BoxedAnyObject</code>, (example thread discussing issue\n<a href=\"https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust\">https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust</a>)\nso I changed functions to accept slices of the Vec, and to make it a\n<code>Vec&#x3C;Rc&#x3C;Track>></code> instead of just <code>Vec&#x3C;Track></code> (another related thread\n<a href=\"https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3\">https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3</a>).</p>\n<h3 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#result\"><a href=\"#result\" style=\"margin-right: 10px\">#</a></a>Result</h3>\n<p>The current work is at <a href=\"https://github.com/cmdcolin/fml9000\">https://github.com/cmdcolin/fml9000</a></p>\n<p><img src=\"/media/fml9000_1.png\" alt=\"\"></p>\n<p>Screenshot shows the current look and feel. Some stuff in the screenshot is\nmocked and not fully functional, but it has been a great learning experience\nthus far</p>\n<h3 id=\"footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\"><a href=\"#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Creating a PR to the <code>gtk4-rs</code> repo to demonstrate example ColumnView usage</h3>\n<p>I created a PR (<a href=\"https://github.com/gtk-rs/gtk4-rs/pull/1111\">https://github.com/gtk-rs/gtk4-rs/pull/1111</a>) to demonstrate\nsimple <code>ColumnView</code> usage. The code review that was given on the PR was\nexcellent. They explained how to simplify the code I submitted so that each grid\ncell was very minimal (starting from a <code>gtk::Box</code> with a <code>gtk::Label</code> inside of\nit, to just being a <code>gtk::Inscription</code> which is very fast). Big thanks to the\nteam for helping out with this!</p>\n<p>After this hurdle was crossed, I felt much more comfortable in the GTK mindset,\nand I quickly fleshed out some more UI for the app</p>"},{"title":"Making a twitter bot in the year 2022 with node.js","date":"2022-08-26","slug":"2022-08-26-twitterbot","html":"<p>Recently, we made the logistic map fractal visualizer app, but, how do we keep\nUSER ENGAGEMENT METRICS up? Gotta make a twitter bot to post fractals, that's\nhow!</p>\n<p>I found it somewhat tricky to get this working, because there is a lot of odd\nlingo out there. There are libraries that may help you, but this post goes\nthrough making an OAuth client in node.js to post to the twitter API with fairly\nunabstracted code. OAuth still confuses me, but if you follow these steps, you\ncan make a bot!</p>\n<h3 id=\"step-1\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-1\"><a href=\"#step-1\" style=\"margin-right: 10px\">#</a></a>Step 1</h3>\n<p>Get your keys. I forget the exact procedure for this but go to\n<a href=\"https://developer.twitter.com\">https://developer.twitter.com</a> and sign up, register an \"app\" with them, and poke\naround for awhile. This github repo provides a couple more details about the\nprocess of registering\n<a href=\"https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal\">https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal</a></p>\n<p>After sometime, you should get a screen that looks like this. Keep this around\nfor Step 4. Note: I did not have to apply for any elevated access for this\narticle, just the basic level you get from the initial registration! I believe\nin twitter terms, this article only requires \"Essential\" access and not any\n\"Elevated\" access.</p>\n<p><img src=\"https://github.com/cmdcolin/twitter_fractal_bot/blob/master/img/devpanel.png?raw=true\" alt=\"\"></p>\n<h3 id=\"step-2\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-2\"><a href=\"#step-2\" style=\"margin-right: 10px\">#</a></a>Step 2</h3>\n<p>Make a repo with a couple dependencies</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">mkdir</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mybot</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">cd</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mybot</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">yarn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">init</span></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">yarn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">add</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">node-fetch</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">formdata-node</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">oauth</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">typescript</span></span></code></pre>\n<h3 id=\"step-3\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-3\"><a href=\"#step-3\" style=\"margin-right: 10px\">#</a></a>Step 3</h3>\n<p>Update <code>package.json</code> with a couple scripts to build these typescript files\n(alternatively use <code>ts-node</code> or similar to run the ts files directly)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">dependencies</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^16.0.1</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">formdata-node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^4.4.1</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">node-fetch</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^3.2.10</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">oauth</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^0.10.0</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">typescript</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^4.7.4</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  },</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">license</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">MIT</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">module</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">devDependencies</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">@types/node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^18.7.9</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">@types/oauth</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">^0.9.1</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  },</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">scripts</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">build</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">tsc</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">prepost</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">yarn build</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">post</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">node dist/bot.js</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>And <code>tsconfig.json</code> file</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">include</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">src</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">],</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">compilerOptions</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">target</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">esnext</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">outDir</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">dist</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">moduleResolution</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">node</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">declaration</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">strict</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #ADD7FF\">esModuleInterop</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This compiles the <code>src</code> folder and outputs js files to the <code>dist</code> directory, and\nwe can run the <code>node dist/bot.js</code> file with node to post the file</p>\n<h3 id=\"step-4\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-4\"><a href=\"#step-4\" style=\"margin-right: 10px\">#</a></a>Step 4</h3>\n<p>Create a .env file with your keys that you found in the above screenshot\ncorresponding to the box1 (which gives you API_KEY/API_SECRET, sometimes also\nreferred to as consumer keys in other documents) and box2 (which gives you\nACCESS_TOKEN and ACCESS_TOKEN_SECRET) from the above screenshot</p>\n<pre><code>API_KEY=\"xxxxxxxxxxxxxxxxxxxxxxxxx\"\nAPI_SECRET=\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"\nACCESS_TOKEN=\"aaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\nACCESS_TOKEN_SECRET=\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\"\n</code></pre>\n<p>Important: Also add the .env to your .gitignore, you don't want to commit this\nto github!</p>\n<h3 id=\"step-5\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-5\"><a href=\"#step-5\" style=\"margin-right: 10px\">#</a></a>Step 5</h3>\n<p>Make the bot! Create <code>src/bot.ts</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">fs</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">fs</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import * </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">dotenv</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">dotenv</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">OAuth</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">oauth</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #ADD7FF\">fetch</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">RequestInit</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">node-fetch</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">import </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">FormData</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #ADD7FF\">File</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">from</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">formdata-node</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">dotenv</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">config</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">params</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">RequestInit</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">fetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">params</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #91B4D5\">!</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ok</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">text</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">text</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #D0679D\">throw</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">`</span><span style=\"color: #5DE4C7\">HTTP </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">status</span><span style=\"color: #A6ACCD\">}</span><span style=\"color: #5DE4C7\"> </span><span style=\"color: #A6ACCD\">${</span><span style=\"color: #E4F0FB\">text</span><span style=\"color: #A6ACCD\">}`</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">json</span><span style=\"color: #A6ACCD\">() </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">Promise</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">Record</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCDC0\">unknown</span><span style=\"color: #A6ACCD\">>></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oauth</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">OAuth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #A6ACCDC0\">OAuth</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">oauth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">authHeader</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">url</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ACCESS_TOKEN</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">ACCESS_TOKEN_SECRET</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">post</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">OAuth</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">OAuth</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/oauth/request_token</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/oauth/access_token</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">API_KEY</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">env</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">API_SECRET</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">as</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">1.0A</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">null</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">HMAC-SHA1</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://upload.twitter.com/1.1/media/upload.json</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">https://api.twitter.com/2/tweets</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">v3CreateTweetJS</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">FormData</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">set</span><span style=\"color: #A6ACCD\">(</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">media</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">File</span><span style=\"color: #A6ACCD\">([</span><span style=\"color: #E4F0FB\">fs</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">readFileSync</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">yourpicture.png</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)], </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">yourpicture.png</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #767C9DB0; font-style: italic\">// first post a picture</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response1</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">headers</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">Authorization</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FBD0\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">picEndpoint</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">user-agent</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">method</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">POST</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #767C9DB0; font-style: italic\">//@ts-ignore</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">body</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">form</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #767C9DB0; font-style: italic\">// then post a tweet, referring to the media_id_string from response1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">response2</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">mfetch</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">headers</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">Authorization</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FBD0\">getAuthHeader</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">client</span><span style=\"color: #A6ACCD\">,</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">tweetEndpoint</span><span style=\"color: #A6ACCD\">),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">user-agent</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">clientName</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">content-type</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">application/json</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">accept</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">application/json</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">body</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> JSON</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">stringify</span><span style=\"color: #A6ACCD\">({</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">media</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #ADD7FF\">media_ids</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">response1</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">media_id_string</span><span style=\"color: #A6ACCD\">]</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">text</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Hello world!</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">}),</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #ADD7FF\">method</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">post</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">response2</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">process</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">exit</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #5DE4C7\">1</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">})()</span></span></code></pre>\n<h3 id=\"step-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-6\"><a href=\"#step-6\" style=\"margin-right: 10px\">#</a></a>Step 6</h3>\n<p>Now that you have the bot, you can run it locally with <code>yarn post</code> (runs the\n\"post\" script in <code>package.json</code>) to test it out</p>\n<h3 id=\"step-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-7\"><a href=\"#step-7\" style=\"margin-right: 10px\">#</a></a>Step 7</h3>\n<p>Now to create a github action to run the bot.</p>\n<p>Navigate to your repo's settings page, then go to Secrets->Actions and paste the\nkeys one by one, see below screenshot</p>\n<p><img src=\"https://user-images.githubusercontent.com/6511937/187038172-80b35e34-03dd-4613-b6f6-9f8e25d2fc34.png\" alt=\"\"></p>\n<h3 id=\"step-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#step-8\"><a href=\"#step-8\" style=\"margin-right: 10px\">#</a></a>Step 8</h3>\n<p>Create a file with the path <code>.github/workflows/post.yml</code> in your repo to make\nthe post</p>\n<p>You can use a cron/scheduled workflow in the github action, which the below\nexample does\n<a href=\"https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule\">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule</a></p>\n<p>The below github action posts every 5 hours on the hour (see\n<a href=\"https://crontab.guru/\">https://crontab.guru/</a> for more info on cron syntax)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">on</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7\">schedule</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    - </span><span style=\"color: #5DE4C7\">cron</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">0 */5 * * *</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">jobs</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7\">test</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">runs-on</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #5DE4C7\">steps</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">actions/checkout@v2</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Use Node.js 14.x</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">actions/setup-node@v2</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">with</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">node-version</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">14</span><span style=\"color: #A6ACCD\">'</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Install deps (with cache)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">uses</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">bahmutov/npm-install@v1</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      - </span><span style=\"color: #5DE4C7\">name</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">Post tweet</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">env</span><span style=\"color: #A6ACCD\">:</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">API_KEY</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.API_KEY }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">API_SECRET</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.API_SECRET }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">ACCESS_TOKEN</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.ACCESS_TOKEN }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">          </span><span style=\"color: #5DE4C7\">ACCESS_TOKEN_SECRET</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">${{ secrets.ACCESS_TOKEN_SECRET }}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #5DE4C7\">run</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #ADD7FF\">yarn post</span></span></code></pre>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>See <a href=\"https://github.com/cmdcolin/twitter_fractal_bot\">https://github.com/cmdcolin/twitter_fractal_bot</a> for working example. I could\nhave, in retrospect, used a library like <code>twit</code>\n(<a href=\"https://www.npmjs.com/package/twit\">https://www.npmjs.com/package/twit</a>) but this code sample is not substantially\nmore complicated than using the <code>twit</code> library.</p>\n<p>You can also adapt this to post only when you push to your repo, or release a\nnew version from your repo!</p>\n<h2 id=\"footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\"><a href=\"#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Examples of odd lingo or stumbling blocks you might come across</h2>\n<ul>\n<li>Bearer token - The Bearer token is an alternative method of authenticating,\nbut it cannot be used to post tweets</li>\n<li>Twitter API v1 vs v2 - We use a mix of v1 and v2, it's just the different URLs\nthat we are posting to and can be mixed in our example</li>\n<li>Consumer key vs API key - they are the same thing in our example. If you look\nclosely at the box 1 in the screenshot it says \"Consumer keys\" and then gives\nyou an API key below *</li>\n</ul>\n<h2 id=\"footnote-2-posting-on-release-with-a-github-action\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-posting-on-release-with-a-github-action\"><a href=\"#footnote-2-posting-on-release-with-a-github-action\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Posting on release with a github action</h2>\n<p>Replace the cron section of the github action with</p>\n<pre><code>on: release\n</code></pre>\n<h2 id=\"footnote-3-additional-reading\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-additional-reading\"><a href=\"#footnote-3-additional-reading\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Additional reading</h2>\n<p><a href=\"https://aaronparecki.com/oauth-2-simplified/\">https://aaronparecki.com/oauth-2-simplified/</a></p>"},{"title":"Using Rust/WASM in a monorepo with create-react-app","date":"2022-08-22","slug":"2022-08-22-rustwasm","html":"<p>Behold, the buzzwords:</p>\n<ul>\n<li>Rust / WASM / wasm-bindgen</li>\n<li>React</li>\n<li>Monorepo / Yarn workspaces</li>\n<li>Webpack 5 / create-react-app 5</li>\n<li>Typescript</li>\n</ul>\n<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>\n<p>TLDR: visit the final product!\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed\nlive here <a href=\"https://cmdcolin.github.io/rust_react_monorepo_template\">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>\n<h2 id=\"steps-to-create-this-type-of-integration-from-scratch\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#steps-to-create-this-type-of-integration-from-scratch\"><a href=\"#steps-to-create-this-type-of-integration-from-scratch\" style=\"margin-right: 10px\">#</a></a>Steps to create this type of integration from scratch</h2>\n<h3 id=\"create-repo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-repo\"><a href=\"#create-repo\" style=\"margin-right: 10px\">#</a></a>Create repo</h3>\n<pre><code>mkdir template\ncd template\ngit init\n</code></pre>\n<h3 id=\"create-root-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-root-packagejson\"><a href=\"#create-root-packagejson\" style=\"margin-right: 10px\">#</a></a>Create root <code>package.json</code></h3>\n<p>Then put this in the monorepo's root <code>package.json</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">private</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">workspaces</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">app</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This sets our repo up as a \"monorepo\" with two \"workspaces\". one will be the\nwasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>\n<h3 id=\"add-a-create-react-app-instance-inside-the-monorepo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-a-create-react-app-instance-inside-the-monorepo\"><a href=\"#add-a-create-react-app-instance-inside-the-monorepo\" style=\"margin-right: 10px\">#</a></a>Add a <code>create-react-app</code> instance inside the monorepo</h3>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">npx</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">create-react-app</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">--template</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">typescript</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">app</span></span></code></pre>\n<p>This will make an <code>app</code> subfolder inside our monorepo</p>\n<h3 id=\"download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\" style=\"margin-right: 10px\">#</a></a>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>\n<p>Download <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world\">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a>\nto the hello-wasm folder</p>\n<p>This link can help\n<a href=\"https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world\">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>\n<h3 id=\"add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\" style=\"margin-right: 10px\">#</a></a>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">version</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">1.0.0</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">files</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pkg</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">],</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">main</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pkg/index.js</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #D0679D\">...</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">rest</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h3 id=\"modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\" style=\"margin-right: 10px\">#</a></a>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>\n<p>I changed the rust code to return a String value instead of making an alert box</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">#[wasm_bindgen]</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">pub</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">fn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">greet</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x26;</span><span style=\"color: #A6ACCDC0\">str</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #91B4D5\">-></span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">String</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #ADD7FF\">format!</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">Hello </span><span style=\"color: #A6ACCD\">{}\"</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h3 id=\"build-the-hello-wasm-pkg\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-the-hello-wasm-pkg\"><a href=\"#build-the-hello-wasm-pkg\" style=\"margin-right: 10px\">#</a></a>Build the <code>hello-wasm</code> pkg</h3>\n<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory\nnamed <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>\nfolder is effectively a node package. We could publish this to <code>NPM</code> (see\nfootnote 1)</p>\n<h3 id=\"add-the-hello-wasm-package-to-the-app-dependencies\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-the-hello-wasm-package-to-the-app-dependencies\"><a href=\"#add-the-hello-wasm-package-to-the-app-dependencies\" style=\"margin-right: 10px\">#</a></a>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>\n<p>Add <code>\"hello-wasm\":\"^1.0.0\"</code> to the <code>dependencies</code> array in <code>app/package.json</code>.\nThis will refer to our local monorepo's rust wasm package!</p>\n<h3 id=\"create-craco-config-for-create-react-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-craco-config-for-create-react-app\"><a href=\"#create-craco-config-for-create-react-app\" style=\"margin-right: 10px\">#</a></a>Create craco config for <code>create-react-app</code></h3>\n<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize\nthe <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>\n<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this\n<code>craco.config.js</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #E4F0FB\">module</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">exports</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">  </span><span style=\"color: #ADD7FF\">webpack</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #ADD7FF\">configure</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">wasmExtensionRegExp</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5FB3A1\"> </span><span style=\"color: #A6ACCD\">/</span><span style=\"color: #5FB3A1\">\\.wasm</span><span style=\"color: #A6ACCD\">$/</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">resolve</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">extensions</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">push</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">.wasm</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">experiments</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">syncWebAssembly</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">module</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">rules</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">forEach</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">rule</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">        </span><span style=\"color: #A6ACCD\">;(</span><span style=\"color: #E4F0FB\">rule</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">||</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">[]).</span><span style=\"color: #E4F0FBD0\">forEach</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">          </span><span style=\"color: #A6ACCD\">if</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">===</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">asset/resource</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">            </span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">exclude</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">push</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">wasmExtensionRegExp</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">          </span><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">        </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">config</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">    </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">  </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Note: this thread helped me to create the craco config\n<a href=\"https://github.com/Emurgo/cardano-serialization-lib/issues/295\">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>\n<p>Also see footnote 2 for more info</p>\n<h3 id=\"final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\" style=\"margin-right: 10px\">#</a></a>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>\n<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our\nrust function, <code>greet</code>, from javascript!</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setGreeting</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">import</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">greet</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Colin</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setGreeting</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    &#x3C;</span><span style=\"color: #A6ACCDC0\">div</span><span style=\"color: #A6ACCD\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      &#x3C;</span><span style=\"color: #A6ACCDC0\">h1</span><span style=\"color: #A6ACCD\">></span><span style=\"color: #E4F0FB\">rust</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">monorepo</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">demo</span><span style=\"color: #91B4D5\">&#x3C;/</span><span style=\"color: #E4F0FB\">h1</span><span style=\"color: #91B4D5\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      &#x3C;</span><span style=\"color: #A6ACCDC0\">h2</span><span style=\"color: #A6ACCD\">></span><span style=\"color: #E4F0FB\">Greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {!</span><span style=\"color: #A6ACCDC0\">greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Loading...</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">greeting</span><span style=\"color: #A6ACCD\">}&#x3C;/</span><span style=\"color: #A6ACCDC0\">h2</span><span style=\"color: #A6ACCD\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">&#x3C;/</span><span style=\"color: #E4F0FB\">div</span><span style=\"color: #91B4D5\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>In order to greet an arbitrary person, I modified this slightly in the live\ndemo. See\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx\">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>\n<h3 id=\"run-the-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#run-the-app\"><a href=\"#run-the-app\" style=\"margin-right: 10px\">#</a></a>Run the app!</h3>\n<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>\n<h2 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#result\"><a href=\"#result\" style=\"margin-right: 10px\">#</a></a>Result!</h2>\n<p>A screenshot of the app, showing the string \"Hello Colin\" which is generated via\nrust and wasm</p>\n<p><img src=\"/media/rust_wasm_demo.png\" alt=\"\"></p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>My main aim was to demonstrate creating a \"simple\" monorepo setup showing how\nyou can integrate Rust+WASM and React. Feel free to ask me any questions and go\ncheck out the repo!</p>\n<p><a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>\n<h2 id=\"other-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#other-resources\"><a href=\"#other-resources\" style=\"margin-right: 10px\">#</a></a>Other resources</h2>\n<p>This article is quite helpful also, but uses a file:/ reference in their\n<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite\nsimilar though!\n<a href=\"https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm\">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>\n<h2 id=\"footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\" style=\"margin-right: 10px\">#</a></a>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>\n<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of the\npackage import the module, they would receive <code>pkg/index.js</code> from the <code>main</code>\nfield in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the\n<code>index.wasm</code> file. Then it is up to the consumers bundler to package that\ncorrectly.</p>\n<h2 id=\"footnote-2-bundlers-and-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-bundlers-and-wasm\"><a href=\"#footnote-2-bundlers-and-wasm\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Bundlers and wasm</h2>\n<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which\nhas \"native support\" for wasm. Still, it is hidden behind a flag called\n\"experiments\" (see first google result for webpack wasm here\n<a href=\"https://webpack.js.org/configuration/experiments/\">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to\nmodify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>\n<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a\nslightly different workflow (used a special <code>webpack</code> loader called\n<code>wasm-loader</code>)</p>\n<p>You can also likely use similar techniques described in this article to\nincorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on how\nother bundlers use wasm, feel free to leave a comment.</p>\n<h2 id=\"footnote-3-why-do-i-have-to-use-async-imports\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-why-do-i-have-to-use-async-imports\"><a href=\"#footnote-3-why-do-i-have-to-use-async-imports\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Why do I have to use async imports?</h2>\n<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can\nbe run (it is not in my experience e.g. embedded as binary data inside a js\nfile) which means it would be difficult to use the wasm code as a synchronous\nimport.</p>\n<p>There are hints that this may be possible but it would rely on the bundler\nembedding the wasm code in the js itself, or maybe top-level-await. If anyone\nhas more info, feel free to leave a comment!</p>\n<h2 id=\"footnote-4-build-setup\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-build-setup\"><a href=\"#footnote-4-build-setup\" style=\"margin-right: 10px\">#</a></a>Footnote 4: Build setup</h2>\n<p>The <code>hello-wasm</code> package does not automatically recompile when we are running\ne.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires\nyou to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to\nbe aware of</p>\n<h2 id=\"footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\" style=\"margin-right: 10px\">#</a></a>Footnote 5: My first experience with trying to make this work was rocky!</h2>\n<p>I first created an example of rust+wasm+react almost two years ago when creating\na fractal viewer <a href=\"https://github.com/cmdcolin/logistic_chaos_map\">https://github.com/cmdcolin/logistic_chaos_map</a> and it has some\ndevelopment notes on the stumbling blocks I faced\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md\">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>\n<h2 id=\"footnote-6-i-thought-you-said-typescript-too\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6-i-thought-you-said-typescript-too\"><a href=\"#footnote-6-i-thought-you-said-typescript-too\" style=\"margin-right: 10px\">#</a></a>Footnote 6: I thought you said typescript too</h2>\n<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the\n<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a\nbuilt-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is\nproduced in the <code>hello-wasm</code> build to help understand the details. I also\nrecommend reading the <a href=\"https://rustwasm.github.io/wasm-bindgen/\">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you\nare getting started with rust, read the Rust Book along with doing rustlings\n<a href=\"https://github.com/rust-lang/rustlings\">https://github.com/rust-lang/rustlings</a></p>\n<h2 id=\"footnote-7-another-resource\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-7-another-resource\"><a href=\"#footnote-7-another-resource\" style=\"margin-right: 10px\">#</a></a>Footnote 7: Another resource</h2>\n<p>This article was posted on reddit and is also a great resource especially about\nsync vs async webpack loading schemes for wasm</p>\n<p><a href=\"https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/\">https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/</a></p>"},{"title":"Photos of vacation","date":"2022-08-21","slug":"2022-08-21-vacation","html":"<p>From Aug 1st->Aug 18 I did a road trip from the South Carolina to New Mexico. I\nflew out and met my partner who had driven there earlier to help her mom out at\nthe house.</p>\n<p>It was a great trip</p>\n<p>Route stops</p>\n<ul>\n<li>Charleston, SC (Several days)</li>\n<li>Charlotte, NC (Several days, Wedding)</li>\n<li>Montgomery, AL (One night)</li>\n<li>New Orleans, LA (Several days)</li>\n<li>Houston, TX (One night)</li>\n<li>Junction, TX (One night)</li>\n<li>Alpine, TX (One night)</li>\n<li>Valentine, TX (One night)</li>\n<li>Truth or Consequences, NM (One night)</li>\n<li>Albuquerque, NM (Home)</li>\n</ul>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220803_155653295.resized.jpg\" alt=\"\"></p>\n<p>amazing results from the sea turtle rescue at the charleston, SC aquarium</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_145459605_HDR.resized.jpg\" alt=\"\"></p>\n<p>my partner Leah at edisto beach state park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151340018_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto, the beach has many dead and standing dead trees on the beach</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151800531_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151805593_HDR.resized.jpg\" alt=\"\"></p>\n<p>more edisto</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_093129359.resized.jpg\" alt=\"\"></p>\n<p>wetlands near bowen's island SC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_094813656_HDR.resized.jpg\" alt=\"\"></p>\n<p>a worn down house with a mural, and fallen traffic signal in SC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220807_173529613_HDR.resized.jpg\" alt=\"\"></p>\n<p>photo of a butterfly from wedding site near charlotte, NC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220808_103832831_HDR.resized.jpg\" alt=\"\"></p>\n<p>our weird airbnb cabin in near charlotte, SC which was a civil war era cabin\nfrom virginia moved in it's entirety to NC</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_174740904_HDR.resized.jpg\" alt=\"\"></p>\n<p>new orleans skyline from a weird industrial art park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_182035943_HDR.resized.jpg\" alt=\"\"></p>\n<p>care bear in new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_190950114.resized.jpg\" alt=\"\"></p>\n<p>reality continues to ruin my life</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220810_121137729.resized.jpg\" alt=\"\"></p>\n<p>wild \"surf n turf po boy\" (right) and a more conventional muffalata sandwich\n(left) in new orleans, had while hiding from a rain storm</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140043783_HDR.resized.jpg\" alt=\"\"></p>\n<p>city park, new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140543522_HDR.resized.jpg\" alt=\"\"></p>\n<p>large oak, new orleans city park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_142427022.resized.jpg\" alt=\"\"></p>\n<p>apple snail eggs in new orleans city park, an invasive species\n<a href=\"https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html\">https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html</a></p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_153012540.resized.jpg\" alt=\"\"></p>\n<p>placard describing \"pit beef\", a baltimore sandwich from the southern museum of\ncooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154040098.resized.jpg\" alt=\"\"></p>\n<p>engraving describing some native american beach early \"bbq\" method (gator and\ndog possibly visible) from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154404713.resized.jpg\" alt=\"\"></p>\n<p>history of bbq from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154549161.resized.jpg\" alt=\"\"></p>\n<p>hot brown sandwich, placard from the southern museum of cooking</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_110617743.resized.jpg\" alt=\"\"></p>\n<p>our airbnb in new orleans, in a very cool mansion in the garden district</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113038243.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113224854.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113234259.resized.jpg\" alt=\"\"></p>\n<p>more airbnb</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220813_211534759.resized.jpg\" alt=\"\"></p>\n<p>our airbnb hosts in junction, TX gave us tickets to the rodeo there, a one night\nonly event. lot's of cowboy hats</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_133823204_HDR.resized.jpg\" alt=\"\"></p>\n<p>goats near socorro caverns</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_135951677_HDR.resized.jpg\" alt=\"\"></p>\n<p>peacocks (including an albino?) near socorro caverns</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_092445801_HDR.resized.jpg\" alt=\"\"></p>\n<p>mule ears, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_101452396_HDR.resized.jpg\" alt=\"\"></p>\n<p>dung beetle, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_102214238_HDR.resized.jpg\" alt=\"\"></p>\n<p>canyon at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_191014795_HDR.resized.jpg\" alt=\"\"></p>\n<p>fire in valentine, tx. note, my feet are very muddy from trying to wade in the\nrio grande</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_203037340.resized.jpg\" alt=\"\"></p>\n<p>cooking on the fire in valentine, TX</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220816_125951579_HDR.resized.jpg\" alt=\"\"></p>\n<p>metal grave placard, el paso, TX</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220817_092022789_HDR.resized.jpg\" alt=\"\"></p>\n<p>duck pond, truth or consequences, NM</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_20220820_185137107.resized.jpg\" alt=\"\"></p>\n<p>back in ABQ, fermenting some hot peppers we got on trip</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7091.jpg\" alt=\"\"></p>\n<p>me in city park, new orleans</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7378.jpg\" alt=\"\"></p>\n<p>me at the mule ears, big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7384.JPG\" alt=\"\"></p>\n<p>cows at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7391.jpg\" alt=\"\"></p>\n<p>(wild?) horses at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7403.jpg\" alt=\"\"></p>\n<p>me in the canyon at big bend nat'l park</p>\n<p><img src=\"https://cmdcolinphotos.s3.amazonaws.com/IMG_7663.jpg\" alt=\"\"></p>\n<p>beezle celebrating my birthday (8/17) on return to ABQ</p>"}]},"__N_SSG":true}