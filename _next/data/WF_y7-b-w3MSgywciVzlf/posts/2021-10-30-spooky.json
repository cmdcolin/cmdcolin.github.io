{"pageProps":{"post":{"title":"A spooky error when you have a string bigger than 512MB in Chrome","date":"2021-10-30","slug":"2021-10-30-spooky","content":"<p>Now gather round for a spooky story</p>\n<p>Late one night... in the haunted office space castle (hindenbugs cackling in\nthe background amongst the dusty technical books) the midnight candles were\nburning bright and we entered data for a user file</p>\n<p>A simple 52MB gzipped datafile that we want to process in the browser. We unzip\nit, decode it, and ...an error</p>\n<p>ERROR: data not found</p>\n<p><img src=\"/media/pumpkin-dark.jpg\" alt=\"\"></p>\n<p>But... our code is so simple (we of course abide by the religion of writing \"simple code\" you know)...what could be happening?</p>\n<p>The code looks like this</p>\n<pre><code>const buf = unzip(file)\nconst str = new TextDecoder().decode(buf)\n</code></pre>\n<p>We trace it back and run a console.log(str)</p>\n<p>It looks empty. We try running console.log(str.length) ... it prints out 0</p>\n<p>But if we console.log(buffer.length) we get 546,483,710 bytes...</p>\n<p>What could be happening?</p>\n<p>We see in the TextDecoder documentation that it has a note called \"fatal\". We try</p>\n<pre><code>const buf = unzip(file)\nconst str = new TextDecoder('utf8', { fatal: true }).decode(buf)\n</code></pre>\n<p>This doesn't change the results though</p>\n<p>Then it dawns on us while the lightning hits and the thunderclap booms and the\nwind blows through the rattly windows</p>\n<p>We have hit...the maximum string length in Chrome</p>\n<p>BWAHAHAHAHA</p>\n<p>The maximum string length!!! Nooooooo</p>\n<p>It is 512MB on the dot... 536,870,888 bytes. We test this to be sure</p>\n<pre><code>const len = 536_870_888;\nconst buf = new Uint8Array(len);\nfor (let i = 0; i &#x3C; len; i++) {\n  buf[i] = \"a\".charCodeAt(0);\n}\nconst str = new TextDecoder().decode(buf);\nconsole.log(str.length);\n\n</code></pre>\n<p>This is correct, outputs 536,870,888</p>\n<p>With anything, even one byte more, it fails and outputs 0</p>\n<p>happy halloween!!</p>\n<p>pumpkin photo source: http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html</p>\n<p>chrome 95 tested</p>\n<p>nodejs 15 - at 512MB+1 bytes it prints an error message <code>Error: Cannot create a string longer than 0x1fffffe8 characters</code> for significantly greater than 512MB\ne.g. 600MB it actually prints a different error <code>TypeError [ERR_ENCODING_INVALID_ENCODED_DATA]: The encoded data was not valid for encoding utf-8</code>)</p>\n<p>firefox 93 - goes up to ~1GB but then gives Exception { name: \"NS_ERROR_OUT_OF_MEMORY\", message: \"\", result: 2147942414</p>\n<p>midori 6 (safari-alike/webkit) - goes up to ~2GB fine! will have to test more</p>\n"}},"__N_SSG":true}