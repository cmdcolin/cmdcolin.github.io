{"pageProps":{"post":{"title":"Basic command line productivity tricks and learning experiences","date":"2016-04-06","slug":"2016-04-06","content":"<ul>\n<li>dd deletes line in vim</li>\n<li>Ctrl+d scrolls down in vim</li>\n<li>Learn to love your package manager. Homebrew, NPM, gem, cpanm,\ngvm/sdkman, etc. these all do amazing things</li>\n<li>Once you learn bash, try zsh and oh-my-zsh, they have things like\ncase-insensitive tab completion</li>\n<li>Don't make scripts that hardcode paths, make reusable command line\nscripts. Use bash as your \"REPL\", not R.</li>\n<li>git log -p helps analyze your log files in full details (make sure\nautocoloring is turned on in your terminal)</li>\n<li>There are keys to jump forward and backwards on the command line\ntext editor, learn them...don't scroll one char at a time</li>\n<li>Learn how \"PATH\" works. Generally it is just a set of directories\nconnected by \":\" separators. You can add things to the path by\nsaying \"export PATH=$PATH:/new/directory/to/add\" and you can add\nthis to ~/.bashrc for example</li>\n<li>When your install process for a command line tool seems like\nnonsense, try homebrew instead. barring that, learn PATH, and how to\nrun \"make install\", etc. Most of your headbashing from installing\nprograms is 90% can be explained by not understanding how the\ndeveloper is intending it to be used, 10% of the tool's install\nprocess being wrong</li>\n<li>Get a static analyzer and basic tests going on your codebase and run\nit on travis-ci. Getting started with travis-ci is kind of a\nlearning curve, but it is worth it</li>\n<li>Use cpanm instead of cpan for package management</li>\n<li>Vocabulary learning curve: catalina is the same thing as tomcat.\nCATALINA_HOME is the same thing as the tomcat folder</li>\n<li>alias ll=\"ls -l\", because I type \"ll\" hundreds of times a day.</li>\n<li>For irc productivity, run irssi on a server in a \"screen\"\ne.g. \"screen irssi\" and then you can come back to conversations\nlater by just logging into the server with ssh</li>\n<li>Edit ~/.ssh/config to include your hostnames so you don't have to type out\nlong ssh\ncommands http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/</li>\n<li>Use spaces instead of tabs in your source code (>:( yes I think\nthis is the one true way)</li>\n<li>Try out nodejs and browserify in your spare time to make a \"npm\"\nbased app in the browser. it's fun.</li>\n<li>Similarly, try making a simple \"api\" endpoint on the server side\nwith express.js or similar. can get started very quickly.</li>\n<li>Learn how to get a mindset of writing tests. You can write tests\nproactively (i.e. Test driven development), but you can also write\nthem \"reactively\" too (i.e. if have a bug that you fix, you can make\na test to make sure this doesn't happen anymore)</li>\n<li>Similar to above, tests in this sense are more \"sanity checks\" than\nthey are formal proofs. Take \"assert\" logic and \"debugging\" code out\nof main codebase and put them in tests</li>\n<li>Minimize comments in your code, and also don't comment out code and\nleave it present. Find a way to delete it and move on!</li>\n<li>When you have a bunch of .orig files after doing a git merge, just\nuse git clean -f to get rid of them. Similarly, to get rid of\neverythng, including things in your gitignore file (i.e. a super\nclean) use git clean -fdx. It has a --exclude argument too</li>\n</ul>\n<p>::: {#footer}\n[ April 6th, 2016 4:23pm ]{#timestamp}\n:::</p>\n<p>export default ({ children }) => {children}</p>\n"}},"__N_SSG":true}