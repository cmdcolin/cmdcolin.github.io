{"pageProps":{"post":{"title":"Creating a testing framework for JBrowse plugins","date":"2016-04-19","slug":"2016-04-19","mdxSource":{"compiledSource":"var h=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var p=(e,t,s)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,a=(e,t)=>{for(var s in t||(t={}))o.call(t,s)&&p(e,s,t[s]);if(r)for(var s of r(t))n.call(t,s)&&p(e,s,t[s]);return e},c=(e,t)=>m(e,d(t));var l=(e,t)=>{var s={};for(var i in e)o.call(e,i)&&t.indexOf(i)<0&&(s[i]=e[i]);if(e!=null&&r)for(var i of r(e))t.indexOf(i)<0&&n.call(e,i)&&(s[i]=e[i]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var i=s,{components:e}=i,t=l(i,[\"components\"]);return mdx(MDXLayout,c(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`Testing client side apps requires a couple of tedious steps: Organizing\nthe git clone, the dependencies, wrangling up a web server, the test\nframework, etc.`),mdx(\"p\",null,`When testing a plugin for jbrowse, the dependency tree is interesting\nbecause the plugin \"depends\" on JBrowse to run, but we will use\ntravis-CI and bower inside the git repo for our plugin to accomplish\nthis.`),mdx(\"p\",null,\"In this scenario, we will\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},`Use bower to install jasmine and JBrowse (our platform that we write\nthe plugin for)`)),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},\"Use nginx to launch a webserver on travis-CI\")),mdx(\"li\",{parentName:\"ol\"},mdx(\"p\",{parentName:\"li\"},`Use the phantomjs run-jasmine.js script to check jasmine test\nresults`))),mdx(\"p\",null,\"Without further ado\"),mdx(\"p\",null,\"Here is the .travis.yml\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`sudo: false\naddons:\n  apt:\n    packages:\n    - nginx\ncache:\n  apt: true\n  directories:\n  - $HOME/.cache/bower\nbefore_install:\n  - npm install -g jshint bower\ninstall:\n  - bower install\nbefore_script:\n  - cat test/travis.conf | envsubst > test/travis-envsubst.conf\n  - nginx -c \\`pwd\\`/test/travis-envsubst.conf\nscript:\n  - phantomjs test/run-jasmine.js http://localhost:9000/test/\n  - jshint js\n`)),mdx(\"p\",null,`Refer to\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2\"}),\"http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2\"),`\nfor details on the nginx setup`),mdx(\"p\",null,\"Here is the bower.json\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`{\n  \"name\": \"sashimiplot\",\n  \"homepage\": \"https://github.com/cmdcolin/sashimiplot\",\n  \"description\": \"Sashimi track type for jbrowse\",\n  \"main\": \"js/main.js\",\n  \"keywords\": [\n    \"bioinformatics\",\n    \"jbrowse\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"src\",\n    \"test\",\n    \"tests\"\n  ],\n  \"devDependencies\": {\n    \"jasmine-core\": \"jasmine#^2.4.1\",\n    \"jbrowse\": \"git://github.com/GMOD/jbrowse.git#master\"\n  }\n}\n`)),mdx(\"p\",null,`The key thing here is that it installs jasmine and JBrowse. I set\n.bowerrc to install both jasmine and JBrowse to the \"test\" directory`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`{\n    \"directory\": \"test\"\n}\n`)),mdx(\"p\",null,`With this setup, bower will make a \"flat dependency tree\" in the test\ndirectory, so it will look like this`),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`$ ls -1 test\nFileSaver\ndbind\ndgrid\ndijit\ndojo\ndojox\n*index.html*\njDataView\njasmine-core\njbrowse\njson-schema\njszlib\nlazyload\nput-selector\n*run-jasmine.js*\n*spec*\n*travis.conf*\nutil\nxstyle\n`)),mdx(\"p\",null,`Here the asterisks indicate things that are part of our app, other's are\nautomatically installed by bower (jbrowse, jasmine-core, the dojo\ndependencies, and other things)`),mdx(\"p\",null,\"Then we can create the jasmine test/index.html to be something like this\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{}),`<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n\n\n  <meta>\n  Jasmine Spec Runner\n\n  <link rel=\"stylesheet\" href=\"jasmine-core/lib/jasmine-core/jasmine.css\"><script src=\"jasmine-core/lib/jasmine-core/jasmine.js\"><\\/script><script src=\"jasmine-core/lib/jasmine-core/boot.js\"><\\/script><script type=\"text/javascript\" src=\"dojo/dojo.js\" data-dojo-config=\"async: 1\"><\\/script><script type=\"text/javascript\">\n    require( { baseUrl: '.',\n               packages: [\n                   'dojo',\n                   'dijit',\n                   'dojox',\n                   'jszlib',\n                   { name: 'lazyload', location: 'lazyload', main: 'lazyload' },\n                   'dgrid',\n                   'xstyle',\n                   'put-selector',\n                   'FileSaver',\n                   { name: 'jDataView', location: 'jDataView/src', main: 'jdataview' },\n                   { name: 'JBrowse', location: 'jbrowse/src/JBrowse' },\n                   { name: 'SashimiPlot', location: '../js' }\n               ]\n    });\n  <\\/script><script type=\"text/javascript\" src=\"spec/SashimiPlot.spec.js\"><\\/script><div id=\"sandbox\" style=\"overflow:hidden; height:1px;\"></div>\n`)),mdx(\"p\",null,`The \"packages\" in the require statement puts all these packages in the\nright \"namespace\" for the AMD includes, and the \"specs\" are defined like\n`,mdx(\"inlineCode\",{parentName:\"p\"},'<script type=\"text/javascript\" src=\"spec/Projection.spec.js\"><\\/script>')),mdx(\"p\",null,`Finally, run-jasmine.js is used to check the results of the jasmine\ntests (it is run via phantomjs in the travis-CI script). It is a special\nversion for the most recent version of jasmine (2.4)\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://gist.github.com/vmeln/b6cbb319d9a0efc816be\"}),\"https://gist.github.com/vmeln/b6cbb319d9a0efc816be\")),mdx(\"p\",null,`For an example of the project using this, see\n`,mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/cmdcolin/sashimiplot\"}),\"https://github.com/cmdcolin/sashimiplot\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}