{"pageProps":{"post":{"title":"Notes on performance profiling JS applications","date":"2022-05-10","slug":"2022-05-10-performanceprofiling","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      h1: \"h1\",\n      ul: \"ul\",\n      li: \"li\",\n      h2: \"h2\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Keeping your program fast is important for user satisfation in everyday apps,\\nand in other areas such as science, having fast code and algorithms can be the\\ndifference for making certain problems tractable.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I am not doing a lot of algorithmic analysis, but our javascript data\\nvisualization app sometimes chugs through some large-ish datasets, so here are\\nsome performance profiling notes\"\n      }), \"\\n\", _jsx(_components.h1, {\n        children: \"Look at the performance profiling\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"It is really critical to look at the profiling results when determining what to\\nspeed up. You can make hypotheses about what is slow all day, but the profiler\\nwill tell you what your program is spending time on.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I use the Chrome DevTools \\\"Performance\\\" profiler, which is a\\nstatistical/sampling profiler\\nhttps://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This means it samples at some rate and see's where in the callstack the program\\nis executing.\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"If you see large rectangles in the profiler, you may have a long running\\nfunction\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"If you see many small rectangles, your small function may be called many\\ntimes\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Just because it is the rectangles are small (e.g. time taken by a function is\\nsmall) does not mean it can't be sped up though. If you speed up a small\\nfunction, your function can become so fast the sampling profiler can miss it\\nand you will see it rarely in your profiling result.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: sometimes, it is also useful to see the results as a \\\"flamegraph\\\" (see\\nhttps://www.brendangregg.com/flamegraphs.html)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The website https://www.speedscope.app/ can create \\\"flamegraph\\\" style figures\\nfor Chrome profiling results\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Stacking up many small optimizations\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Working with large datasets, sometimes your program will take a long time to\\ncomplete. Especially if you work with javascript in the browser, it is a\\nchallenge to make things go fast. But you can use micro optimizations to help\\nimprove performance over time.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For example, say a program takes 30 seconds to run on a certain dataset\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you do profiling and find a couple microoptimizations that give you a 15%,\\n10% and 5% performance improvement, then you program now takes 20 seconds to\\nrun. That is still not instantaneous, but it is saving your a good 10 seconds.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Examples of micro optimizations\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Using Map instead of Object, can often get small performance boosts\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Comparing value against \", _jsx(_components.code, {\n            children: \"undefined\"\n          }), \" e.g. \", _jsx(_components.code, {\n            children: \"if(val===undefined)\"\n          }), \" vs just\\ncomparing against falsy e.g. \", _jsx(_components.code, {\n            children: \"if(!val)\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Using TypedArray/Uint8Array natively instead of Buffer polyfill on node.js.\\nThis one is a kicker for me because we relied on Buffer polyfill for awhile,\\nand webpack 5 stopped bundling polyfills by default which made us wake up to\\nthis\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"When converting Uint8Array to String, use \", _jsx(_components.code, {\n            children: \"TextDecoder\"\n          }), \" for large strings, and\\njust small string concatenations of \", _jsx(_components.code, {\n            children: \"String.fromCharCode\"\n          }), \" for small ones.\\nThere is an inflection point for string size where one is faster\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"for\"\n          }), \" loops instead of \", _jsx(_components.code, {\n            children: \"Array.prototype.forEach\"\n          }), \"/\", _jsx(_components.code, {\n            children: \"Array.prototype.map\"\n          }), \". I\\nthink similar to above, there is an inflection point (not where it gets\\nfaster in the forEach/map case, but where you can choose to care whether the\\nsmall performance diff matters) based on number of elements in your array\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Pre-allocate an array with \\\"new Array(N)\\\" instead of just \\\"[]\\\" if possible\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I have tried to keep track of more microoptimizations here, but they are pretty\\nspecific to small examples and may not generalize across browsers or browser\\nversions https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Examples of macro optimizations\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Oftentimes, large scale re-workings of your code or \\\"macro\\\" optimizations are\\nthe way to make progress.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"A macro optimization may be revealed if you are looking at your performance\\nprofiling result and you think: this entire section of the program could be\\nreworked to remove this overhead\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this case, it is hard to advise on because most of these will be very\\nspecific to your particular app.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Just as a specific example of a macro optimization I undertook:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"We use web workers, and had to serialize a lot of data from the web worker to\\nthe main thread. I did a large re-working of the codebase to allow, in\\nparticular examples, the main thread to request smaller snippets of data from\\nthe web worker thread on-demand (the web worker is kept alive indefinitely)\\ninstead of serializing all the web worker data and sending to the main thread.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This change especially pays off with large datasets, where all that\\nserialization/data duplication is computationally and memory expensive. Fun\\nfact: I remember sitting at a table at a conference in Jan 2020 talking with my\\nteam at the Plant and Animal Genome conference, thinking that we should make\\nthis change -- finally did it, just took 2 years. [1]\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"End-to-end optimization testing\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In order to comprehensively measure whether micro or macro optimizations are\\nactually improving your real world performance, it can be useful to create an\\nend-to-end test\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"For our app, I created a \", _jsx(_components.code, {\n          children: \"puppeteer\"\n        }), \" based test where I loaded the website and\\nwaited for a \\\"DONE\\\" condition. I created a variety of different tests which\\nallowed me to see e.g. some optimizations may only affect certain conditions.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Developing the end-to-end test suite tool awhile to develop (read: weeks to\\nmature, though some earlier result were available), but it let me compare the\\ncurrent release vs experimental branches, and over time, the experimental\\nbranches were merged and things got faster.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Memory usage profiling\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I have not found a great way to profile memory usage with puppeteer (you can\\ngrab process.memory but this does not get webworker memory usage for example,\\nwhich was important for me. see\\nhttps://github.com/puppeteer/puppeteer/issues/8258 for possible xref) but using\\nthe Chrome Profiler, I can look at memory usage. If the blue line is going up,\\nthat means memory is being allocated! I have found that not all the things you\\nmight expect to increase memory usage\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note that memory usage can be very important to your programs performance.\\nExcessive allocations will increase \\\"GC pressure\\\" (the garbage collector will\\ninvoke more Minor and Major GC, which you will see in your performance\\nprofiling reuslts as yellow boxes)\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnotes\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"[1] Note that things like SharedArrayBuffer also offer a means to share data\\nbetween worker and main thread, but these come with many security limitations\\nfrom the browser (and was even removed for a time while these security\\nimplications were sussed out, due to Spectre/Meltdown vulnerabilities)\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}