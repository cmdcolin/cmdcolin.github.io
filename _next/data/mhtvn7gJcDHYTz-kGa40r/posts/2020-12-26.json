{"pageProps":{"post":{"title":"Making a serverless website for photo and video upload pt. 2","date":"2020-12-26","slug":"2020-12-26","html":"<p>This post follows\nonhttps://cmdcolin.github.io/2020-12-24.html</p>\n<p>It is possible I zoomed ahead too fast to make this a continuous tutorial, but\noverall I just wanted to post an update</p>\n<p>In pt. 1 I learned how to use the <code>aws-sam</code> CLI tool. This was a great insight\nfor me about automating deployments. I can now simply run <code>sam deploy</code> and it\nwill create new dynamodb tables, lambda functions, etc.</p>\n<p>After writing pt 1. I converted the existing vue-js app that was in the aws\ntutorial and converted it to react. Then I extended the app to allow</p>\n<ul>\n<li>Posting comments on photos</li>\n<li>Uploading multiple files</li>\n<li>Uploading videos etc.</li>\n</ul>\n<p>It will be hard to summarize all the changes since now the app has taken off a\nlittle bit but it looks like this:</p>\n<p>Repo structure</p>\n<div class=\"highlight highlight-shell\"><pre>./frontend\n./frontend/src/App.tsx\n./lambdas/\n./lambdas/postFile\n./lambdas/getFiles\n./lambdas/postComment\n./lambdas/getComments\n</pre></div>\n<p>Here is a detailed code for uploading the file. We upload one file at a time,\nbut the client code post to the lambda endpoint individually for each file</p>\n<p>This generates a pre-signed URL to allow the client-side JS (not the lambda\nitself) to directly upload to S3, and also posts a row in the S3 to the\nfilename that will. It is very similar code in\nto <a href=\"https://cmdcolin.github.io/2020-12-24.html\">https://cmdcolin.github.io/2020-12-24.html</a></p>\n<p>./lambdas/postFile/app.js</p>\n<div class=\"highlight highlight-js\"><pre><span class=\"pl-s\"><span class=\"pl-pds\">'</span>use strict<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">AWS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aws-sdk<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">multipart</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>./multipart<span class=\"pl-pds\">'</span></span>)\n<span class=\"pl-c1\">AWS</span>.<span class=\"pl-smi\">config</span>.<span class=\"pl-en\">update</span>({ region<span class=\"pl-k\">:</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-c1\">AWS_REGION</span> })\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">s3</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AWS.S3</span>()\n\n<span class=\"pl-c\">// Change this value to adjust the signed URL's expiration</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">URL_EXPIRATION_SECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">300</span>\n\n<span class=\"pl-c\">// Main Lambda entry point</span>\n<span class=\"pl-c1\">exports</span>.<span class=\"pl-smi\">handler</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-smi\">event</span> <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getUploadURL</span>(<span class=\"pl-c1\">event</span>)\n}\n\n<span class=\"pl-k\">const</span> { AWS_REGION<span class=\"pl-k\">:</span> <span class=\"pl-c1\">region</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">dynamodb</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AWS.DynamoDB</span>({ apiVersion<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2012-08-10<span class=\"pl-pds\">'</span></span>, region })\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">uploadPic</span>({\n  timestamp,\n  filename,\n  message,\n  user,\n  date,\n  contentType,\n}) {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">params</span> <span class=\"pl-k\">=</span> {\n    Item<span class=\"pl-k\">:</span> {\n      timestamp<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">N</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">timestamp</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span>,\n      },\n      filename<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">S</span><span class=\"pl-k\">:</span> filename,\n      },\n      message<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">S</span><span class=\"pl-k\">:</span> message,\n      },\n      user<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">S</span><span class=\"pl-k\">:</span> user,\n      },\n      date<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">S</span><span class=\"pl-k\">:</span> date,\n      },\n      contentType<span class=\"pl-k\">:</span> {\n        <span class=\"pl-c1\">S</span><span class=\"pl-k\">:</span> contentType,\n      },\n    },\n    TableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>files<span class=\"pl-pds\">'</span></span>,\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">dynamodb</span>.<span class=\"pl-en\">putItem</span>(params).<span class=\"pl-en\">promise</span>()\n}\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">getUploadURL</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> (<span class=\"pl-c1\">event</span>) {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">data</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">multipart</span>.<span class=\"pl-c1\">parse</span>(<span class=\"pl-c1\">event</span>)\n    <span class=\"pl-k\">const</span> { <span class=\"pl-c1\">filename</span>, <span class=\"pl-c1\">contentType</span>, <span class=\"pl-c1\">user</span>, <span class=\"pl-c1\">message</span>, <span class=\"pl-c1\">date</span> } <span class=\"pl-k\">=</span> data\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">timestamp</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">+</span><span class=\"pl-c1\">Date</span>.<span class=\"pl-en\">now</span>()\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">Key</span> <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">timestamp</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span>-<span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">filename</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span> <span class=\"pl-c\">// Get signed URL from S3</span>\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">s3Params</span> <span class=\"pl-k\">=</span> {\n      Bucket<span class=\"pl-k\">:</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>.<span class=\"pl-smi\">UploadBucket</span>,\n      Key,\n      Expires<span class=\"pl-k\">:</span> <span class=\"pl-c1\">URL_EXPIRATION_SECONDS</span>,\n      ContentType<span class=\"pl-k\">:</span> contentType,\n      <span class=\"pl-c\">// This ACL makes the uploaded object publicly readable. You must also</span>\n      <span class=\"pl-c\">// uncomment the extra permission for the Lambda function in the SAM</span>\n      <span class=\"pl-c\">// template.</span>\n\n      <span class=\"pl-c1\">ACL</span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>public-read<span class=\"pl-pds\">'</span></span>,\n    }\n\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">uploadURL</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-smi\">s3</span>.<span class=\"pl-en\">getSignedUrlPromise</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>putObject<span class=\"pl-pds\">'</span></span>, s3Params)\n\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">uploadPic</span>({\n      timestamp,\n      filename<span class=\"pl-k\">:</span> Key,\n      message,\n      user,\n      date,\n      contentType,\n    })\n\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>({\n      uploadURL,\n      Key,\n    })\n  } <span class=\"pl-k\">catch</span> (e) {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> {\n      statusCode<span class=\"pl-k\">:</span> <span class=\"pl-c1\">500</span>,\n      body<span class=\"pl-k\">:</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>({ message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">e</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span> }),\n    }\n    <span class=\"pl-k\">return</span> response\n  }\n}\n</pre></div>\n<p>./lambdas/getFiles/app.js</p>\n<div class=\"highlight highlight-js\"><pre><span class=\"pl-c\">// eslint-disable-next-line import/no-unresolved</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">AWS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>aws-sdk<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-k\">const</span> { AWS_REGION<span class=\"pl-k\">:</span> <span class=\"pl-c1\">region</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">process</span>.<span class=\"pl-smi\">env</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">docClient</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AWS.DynamoDB.DocumentClient</span>()\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">getItems</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">params</span> <span class=\"pl-k\">=</span> {\n    TableName<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>files<span class=\"pl-pds\">'</span></span>,\n  }\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-smi\">docClient</span>.<span class=\"pl-en\">scan</span>(params).<span class=\"pl-en\">promise</span>()\n}\n\n<span class=\"pl-c1\">exports</span>.<span class=\"pl-smi\">handler</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">async</span> <span class=\"pl-smi\">event</span> <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">const</span> <span class=\"pl-c1\">result</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">getItems</span>()\n    <span class=\"pl-k\">return</span> {\n      statusCode<span class=\"pl-k\">:</span> <span class=\"pl-c1\">200</span>,\n      body<span class=\"pl-k\">:</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>(result),\n    }\n  } <span class=\"pl-k\">catch</span> (e) {\n    <span class=\"pl-k\">return</span> {\n      statusCode<span class=\"pl-k\">:</span> <span class=\"pl-c1\">400</span>,\n      body<span class=\"pl-k\">:</span> <span class=\"pl-c1\">JSON</span>.<span class=\"pl-c1\">stringify</span>({ message<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">e</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span> }),\n    }\n  }\n}\n</pre></div>\n<p>./frontend/src/App.tsx (excerpt)</p>\n<div class=\"highlight highlight-text-xml\"><pre>async function myfetch(params: string, opts?: any) {\n  const response = await fetch(params, opts)\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\nfunction UploadDialog({\n  open,\n  onClose,\n}: {\n  open: boolean\n  onClose: () => void\n}) {\n  const [images, setImages] = useState&#x3C;<span class=\"pl-ent\">FileList</span>>()\n  const [error, setError] = useState&#x3C;<span class=\"pl-ent\">Error</span>>()\n  const [loading, setLoading] = useState(false)\n  const [total, setTotal] = useState(0)\n  const [completed, setCompleted] = useState(0)\n  const [user, setUser] = useState('')\n  const [message, setMessage] = useState('')\n  const classes = useStyles()\n\n  const handleClose = () => {\n    setError(undefined)\n    setLoading(false)\n    setImages(undefined)\n    setCompleted(0)\n    setTotal(0)\n    setMessage('')\n    onClose()\n  }\n\n  return (\n    &#x3C;<span class=\"pl-ent\">Dialog</span> <span class=\"pl-e\">onClose</span>={handleClose} <span class=\"pl-e\">open</span>={open}>\n      &#x3C;<span class=\"pl-ent\">DialogTitle</span>>upload a file (supports picture or video)&#x3C;/<span class=\"pl-ent\">DialogTitle</span>>\n      &#x3C;<span class=\"pl-ent\">DialogContent</span>>\n        &#x3C;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">htmlFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>>name (optional) &#x3C;/<span class=\"pl-ent\">label</span>>\n        &#x3C;<span class=\"pl-ent\">input</span>\n          <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>\n          <span class=\"pl-e\">value</span>={user}\n          <span class=\"pl-e\">onChange</span>={event => setUser(event.target.value)}\n          id=\"user\"\n        />\n        &#x3C;<span class=\"pl-ent\">br</span> /> &#x3C;<span class=\"pl-ent\">label</span> <span class=\"pl-e\">htmlFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>user<span class=\"pl-pds\">\"</span></span>>message (optional) &#x3C;/<span class=\"pl-ent\">label</span>>\n        &#x3C;<span class=\"pl-ent\">input</span>\n          <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>text<span class=\"pl-pds\">\"</span></span>\n          <span class=\"pl-e\">value</span>={message}\n          <span class=\"pl-e\">onChange</span>={event => setMessage(event.target.value)}\n          id=\"message\"\n        />\n        &#x3C;<span class=\"pl-ent\">br</span> />\n        &#x3C;<span class=\"pl-ent\">input</span>\n          multiple\n          <span class=\"pl-e\">type</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>file<span class=\"pl-pds\">\"</span></span>\n          <span class=\"pl-e\">onChange</span>={e => {\n            let files = e.target.files\n            if (files <span class=\"pl-ii\">&#x26;&#x26;</span> files.length) {\n              setImages(files)\n            }\n          }}\n        /> {error ? (\n          &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">className</span>={classes.error}>{`${error}`}&#x3C;/<span class=\"pl-ent\">div</span>>\n        ) : loading ? (\n          `Uploading...${completed}/${total}`\n        ) : completed ? (\n          &#x3C;<span class=\"pl-ent\">h2</span>>Uploaded &#x3C;/<span class=\"pl-ent\">h2</span>>\n        ) : null} &#x3C;<span class=\"pl-ent\">DialogActions</span>>\n          &#x3C;<span class=\"pl-ent\">Button</span>\n            <span class=\"pl-e\">style</span>={{ textTransform: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>none<span class=\"pl-pds\">'</span></span> }}\n            <span class=\"pl-e\">onClick</span>={async () => {\n              try {\n                if (images) {\n                  setLoading(true)\n                  setError(undefined)\n                  setCompleted(0)\n                  setTotal(images.length)\n                  await Promise.all(\n                    Array.from(images).map(async image => {\n                      const data = new FormData()\n                      data.append('message', message)\n                      data.append('user', user)\n                      data.append('date', new Date().toLocaleString())\n                      data.append('filename', image.name)\n                      data.append('contentType', image.type)\n                      const res = await myfetch(API_ENDPOINT + '/postFile', {\n                        method: 'POST',\n                        body: data,\n                      })\n\n                      await myfetch(res.uploadURL, {\n                        method: 'PUT',\n                        body: image,\n                      })\n\n                      setCompleted(completed => completed + 1)\n                    }),\n                  )\n                  setTimeout(() => {\n                    handleClose()\n                  }, 500)\n                }\n              } catch (e) {\n                setError(e)\n              }\n            }}\n            color=\"primary\"\n          >\n            upload\n          &#x3C;/<span class=\"pl-ent\">Button</span>>\n          &#x3C;<span class=\"pl-ent\">Button</span>\n            <span class=\"pl-e\">onClick</span>={handleClose}\n            <span class=\"pl-e\">color</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>primary<span class=\"pl-pds\">\"</span></span>\n            <span class=\"pl-e\">style</span>={{ textTransform: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>none<span class=\"pl-pds\">'</span></span> }}\n          >\n            cancel\n          &#x3C;/<span class=\"pl-ent\">Button</span>>\n        &#x3C;/<span class=\"pl-ent\">DialogActions</span>>\n      &#x3C;/<span class=\"pl-ent\">DialogContent</span>>\n    &#x3C;/<span class=\"pl-ent\">Dialog</span>>\n  )\n}\n</pre></div>\n<p>template.yaml for AWS</p>\n<div class=\"highlight highlight-yaml\"><pre><span class=\"pl-ent\">AWSTemplateFormatVersion</span>: <span class=\"pl-c1\">2010-09-09</span>\n<span class=\"pl-ent\">Transform</span>: <span class=\"pl-s\">AWS::Serverless-2016-10-31</span>\n<span class=\"pl-ent\">Description</span>: <span class=\"pl-s\">S3 Uploader</span>\n\n<span class=\"pl-ent\">Resources</span>:\n  <span class=\"pl-ent\">filesDynamoDBTable</span>:\n    <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">AWS::DynamoDB::Table</span>\n    <span class=\"pl-ent\">Properties</span>:\n      <span class=\"pl-ent\">AttributeDefinitions</span>:\n        - <span class=\"pl-ent\">AttributeName</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>timestamp<span class=\"pl-pds\">'</span></span>\n          <span class=\"pl-ent\">AttributeType</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>N<span class=\"pl-pds\">'</span></span>\n      <span class=\"pl-ent\">KeySchema</span>:\n        - <span class=\"pl-ent\">AttributeName</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>timestamp<span class=\"pl-pds\">'</span></span>\n          <span class=\"pl-ent\">KeyType</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>HASH<span class=\"pl-pds\">'</span></span>\n      <span class=\"pl-ent\">ProvisionedThroughput</span>:\n        <span class=\"pl-ent\">ReadCapacityUnits</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>5<span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-ent\">WriteCapacityUnits</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>5<span class=\"pl-pds\">'</span></span>\n      <span class=\"pl-ent\">TableName</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>files<span class=\"pl-pds\">'</span></span>\n\n  <span class=\"pl-c\"># HTTP API</span>\n  <span class=\"pl-ent\">MyApi</span>:\n    <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">AWS::Serverless::HttpApi</span>\n    <span class=\"pl-ent\">Properties</span>:\n      <span class=\"pl-c\"># CORS configuration - this is open for development only and should be restricted in prod.</span>\n      <span class=\"pl-c\"># See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html</span>\n      <span class=\"pl-ent\">CorsConfiguration</span>:\n        <span class=\"pl-ent\">AllowMethods</span>:\n          - <span class=\"pl-s\">GET</span>\n          - <span class=\"pl-s\">POST</span>\n          - <span class=\"pl-s\">DELETE</span>\n          - <span class=\"pl-s\">OPTIONS</span>\n        <span class=\"pl-ent\">AllowHeaders</span>:\n          - <span class=\"pl-s\"><span class=\"pl-pds\">'</span>*<span class=\"pl-pds\">'</span></span>\n        <span class=\"pl-ent\">AllowOrigins</span>:\n          - <span class=\"pl-s\"><span class=\"pl-pds\">'</span>*<span class=\"pl-pds\">'</span></span>\n\n  <span class=\"pl-ent\">UploadRequestFunction</span>:\n    <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">AWS::Serverless::Function</span>\n    <span class=\"pl-ent\">Properties</span>:\n      <span class=\"pl-ent\">CodeUri</span>: <span class=\"pl-s\">lambdas/postFile/</span>\n      <span class=\"pl-ent\">Handler</span>: <span class=\"pl-s\">app.handler</span>\n      <span class=\"pl-ent\">Runtime</span>: <span class=\"pl-s\">nodejs12.x</span>\n      <span class=\"pl-ent\">Timeout</span>: <span class=\"pl-c1\">3</span>\n      <span class=\"pl-ent\">MemorySize</span>: <span class=\"pl-c1\">128</span>\n      <span class=\"pl-ent\">Environment</span>:\n        <span class=\"pl-ent\">Variables</span>:\n          <span class=\"pl-ent\">UploadBucket</span>: <span class=\"pl-s\">!Ref S3UploadBucket</span>\n      <span class=\"pl-ent\">Policies</span>:\n        - <span class=\"pl-s\">AmazonDynamoDBFullAccess</span>\n        - <span class=\"pl-ent\">S3WritePolicy</span>:\n            <span class=\"pl-ent\">BucketName</span>: <span class=\"pl-s\">!Ref S3UploadBucket</span>\n        - <span class=\"pl-ent\">Statement</span>:\n            - <span class=\"pl-ent\">Effect</span>: <span class=\"pl-s\">Allow</span>\n              <span class=\"pl-ent\">Resource</span>: <span class=\"pl-s\">!Sub 'arn:aws:s3:::${S3UploadBucket}/'</span>\n              <span class=\"pl-ent\">Action</span>:\n                - <span class=\"pl-s\">s3:putObjectAcl</span>\n      <span class=\"pl-ent\">Events</span>:\n        <span class=\"pl-ent\">UploadAssetAPI</span>:\n          <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">HttpApi</span>\n          <span class=\"pl-ent\">Properties</span>:\n            <span class=\"pl-ent\">Path</span>: <span class=\"pl-s\">/postFile</span>\n            <span class=\"pl-ent\">Method</span>: <span class=\"pl-s\">post</span>\n            <span class=\"pl-ent\">ApiId</span>: <span class=\"pl-s\">!Ref MyApi</span>\n\n  <span class=\"pl-ent\">FileReadFunction</span>:\n    <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">AWS::Serverless::Function</span>\n    <span class=\"pl-ent\">Properties</span>:\n      <span class=\"pl-ent\">CodeUri</span>: <span class=\"pl-s\">lambdas/getFiles/</span>\n      <span class=\"pl-ent\">Handler</span>: <span class=\"pl-s\">app.handler</span>\n      <span class=\"pl-ent\">Runtime</span>: <span class=\"pl-s\">nodejs12.x</span>\n      <span class=\"pl-ent\">Timeout</span>: <span class=\"pl-c1\">3</span>\n      <span class=\"pl-ent\">MemorySize</span>: <span class=\"pl-c1\">128</span>\n      <span class=\"pl-ent\">Policies</span>:\n        - <span class=\"pl-s\">AmazonDynamoDBFullAccess</span>\n      <span class=\"pl-ent\">Events</span>:\n        <span class=\"pl-ent\">UploadAssetAPI</span>:\n          <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">HttpApi</span>\n          <span class=\"pl-ent\">Properties</span>:\n            <span class=\"pl-ent\">Path</span>: <span class=\"pl-s\">/getFiles</span>\n            <span class=\"pl-ent\">Method</span>: <span class=\"pl-s\">get</span>\n            <span class=\"pl-ent\">ApiId</span>: <span class=\"pl-s\">!Ref MyApi</span>\n\n  <span class=\"pl-c\">## S3 bucket</span>\n  <span class=\"pl-ent\">S3UploadBucket</span>:\n    <span class=\"pl-ent\">Type</span>: <span class=\"pl-s\">AWS::S3::Bucket</span>\n    <span class=\"pl-ent\">Properties</span>:\n      <span class=\"pl-ent\">CorsConfiguration</span>:\n        <span class=\"pl-ent\">CorsRules</span>:\n          - <span class=\"pl-ent\">AllowedHeaders</span>:\n              - <span class=\"pl-s\"><span class=\"pl-pds\">'</span>*<span class=\"pl-pds\">'</span></span>\n            <span class=\"pl-ent\">AllowedMethods</span>:\n              - <span class=\"pl-s\">GET</span>\n              - <span class=\"pl-s\">PUT</span>\n              - <span class=\"pl-s\">HEAD</span>\n            <span class=\"pl-ent\">AllowedOrigins</span>:\n              - <span class=\"pl-s\"><span class=\"pl-pds\">'</span>*<span class=\"pl-pds\">'</span></span>\n\n<span class=\"pl-c\">## Take a note of the outputs for deploying the workflow templates in this sample application</span>\n<span class=\"pl-ent\">Outputs</span>:\n  <span class=\"pl-ent\">APIendpoint</span>:\n    <span class=\"pl-ent\">Description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>HTTP API endpoint URL<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-ent\">Value</span>: <span class=\"pl-s\">!Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com'</span>\n  <span class=\"pl-ent\">S3UploadBucketName</span>:\n    <span class=\"pl-ent\">Description</span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>S3 bucket for application uploads<span class=\"pl-pds\">'</span></span>\n    <span class=\"pl-ent\">Value</span>: <span class=\"pl-s\">!Ref 'S3UploadBucket'</span>\n</pre></div>\n<p>To display all the pictures I use a switch from video or img tag based\non contentType.startsWith('video'). I also use the \"figcaption\" HTML tag\nto have a little caption on the pics/videos</p>\n<p>./frontend/src/App.tsx</p>\n<div class=\"highlight highlight-text-xml\"><pre>function Media({\n  file,\n  style,\n  onClick,\n  children,\n}: {\n  file: File\n  onClick?: Function\n  style?: React.CSSProperties\n  children?: React.ReactNode\n}) {\n  const { filename, contentType } = file\n  const src = `${BUCKET}/${filename}`\n  return (\n    &#x3C;<span class=\"pl-ent\">figure</span> <span class=\"pl-e\">style</span>={{ display: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>inline-block<span class=\"pl-pds\">'</span></span> }}>\n      &#x3C;<span class=\"pl-ent\">picture</span>>\n        {contentType.startsWith('video') ? (\n          &#x3C;<span class=\"pl-ent\">video</span> <span class=\"pl-e\">style</span>={style} <span class=\"pl-e\">src</span>={src} controls <span class=\"pl-e\">onClick</span>={onClick as any} />\n        ) : (\n          &#x3C;<span class=\"pl-ent\">img</span> <span class=\"pl-e\">style</span>={style} <span class=\"pl-e\">src</span>={src} <span class=\"pl-e\">onClick</span>={onClick as any} />\n        )}\n      &#x3C;/<span class=\"pl-ent\">picture</span>>\n      &#x3C;<span class=\"pl-ent\">figcaption</span>>{children}&#x3C;/<span class=\"pl-ent\">figcaption</span>>\n    &#x3C;/<span class=\"pl-ent\">figure</span>>\n  )\n}\n</pre></div>\n<p>Now the really fun part: if you get an image of a picture frame\nlike <a href=\"https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T\">https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T</a></p>\n<p>You can make it a border for any image or video using border-image CSS</p>\n<div class=\"highlight highlight-js\"><pre>style <span class=\"pl-k\">=</span> {\n  border<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>30px solid<span class=\"pl-pds\">'</span></span>,\n  borderImage<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span>url(borders/<span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-s1\">border</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span>) 30 round<span class=\"pl-pds\">`</span></span>,\n}\n</pre></div>\n<p><img src=\"/media/638602799897329664_0.png\" alt=\"\"></p>\n<h2 id=\"summary\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#summary\"><a href=\"#summary\" style=\"margin-right: 10px\">#</a></a>Summary</h2>\n<p>The template.yaml automatically deploys the lambdas for postFile/getFile\nand the files table in dynamoDB</p>\n<p>The React app uses postFile for each file in an <code>&#x3C;input type=\"file\"/></code>,\nthe code uses React hooks and functional components but is hopefully not\ntoo complex</p>\n<p>I also added commenting on photos. The code is not shown here but you\ncan look in the source code for details</p>\n<p><img src=\"/media/638602799897329664_1.png\" alt=\"\"></p>\n<p>Overall this has been a good experience learning to develop this app and\nlearning to automate the cloud deployment is really good for ensuring\nreliability and fast iteration.</p>\n<p>Also quick note on serverless CLI vs aws-sam. I had tried a serverless\nCLI tutorial from another user but it didn't click with me, while the\naws-sam tutorial from\n<a href=\"https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1\">https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1</a> was\na great kick start for me. I am sure the serverless CLI is great too and\nit ensures a bit less vendor lock in, but then is also a little bit\nremoved from the native aws config schemas. Probably fine though</p>\n<h2 id=\"source-code\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#source-code\"><a href=\"#source-code\" style=\"margin-right: 10px\">#</a></a>Source code</h2>\n<p><a href=\"https://github.com/cmdcolin/aws_photo_gallery/\">https://github.com/cmdcolin/aws_photo_gallery/</a></p>"}},"__N_SSG":true}