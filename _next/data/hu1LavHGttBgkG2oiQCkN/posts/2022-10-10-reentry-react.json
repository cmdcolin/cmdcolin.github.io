{"pageProps":{"post":{"title":"Handling async errors with React","date":"2022-10-10","slug":"2022-10-10-reentry-react","html":"<p>If you make a React component that has, say, a prop for a item id, and an async\naction in a useEffect to fetch data for that item from an API, then you will\nlikely implement error handling on it most likely. That error handling may be a\nuseState. It is important to note that the itemId may change</p>\n<p><a href=\"https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx\">https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx</a></p>\n<div class=\"highlight highlight-text-xml\"><pre>interface ItemInfo {\n  price: string\n  name: string\n}\n\nasync function myfetch(url, opts) {\n  const response = await fetch(url, opts)\n  if (!response.ok) {\n    throw new Error(\n      `Error fetching ${url}: HTTP ${response.status} ${await response.text()}`,\n    )\n  }\n  return response.json()\n}\n\nfunction Error({ error }: { error: unknown }) {\n  return &#x3C;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">style</span>={{ background: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>red<span class=\"pl-pds\">'</span></span> }}>{`${error}`}&#x3C;/<span class=\"pl-ent\">div</span>>\n}\n\nfunction MyComponent({ pokemonName }: { pokemonName: string }) {\n  const [error, setError] = useState&#x3C;<span class=\"pl-ent\">unknown</span>>()\n  const [pokemonInfo, setItemInfo] = useState&#x3C;<span class=\"pl-ent\">ItemInfo</span>>()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        // important to reset the error state of the // app. iteminfo will\n        // always be reset so not as important, but error very can be easily\n        // forgotten\n        setError(undefined)\n\n        const data = await myfetch(`https://pokeapi.co/api/v2/${pokemon}`)\n        if (!cancelled) {\n          setItemInfo(pokemonInfo)\n        }\n      } catch (e) {\n        console.error(e)\n        if (!cancelled) {\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [itemId])\n\n  return (\n    &#x3C;<span class=\"pl-ent\">div</span>>\n      {error ? (\n        &#x3C;<span class=\"pl-ent\">Error</span> <span class=\"pl-e\">error</span>={error} />\n      ) : pokemonInfo ? (\n        &#x3C;<span class=\"pl-ent\">div</span>>\n          {pokemonInfo.name} costs {itemInfo.price}\n        &#x3C;/<span class=\"pl-ent\">div</span>>\n      ) : (\n        &#x3C;<span class=\"pl-ent\">div</span>>Loading...&#x3C;/<span class=\"pl-ent\">div</span>>\n      )}\n    &#x3C;/<span class=\"pl-ent\">div</span>>\n  )\n}\n</pre></div>\n<p>Can we make a hook to make this easier? Hooks are claimed to allow lots of re-usable code but the amount of instances I actually take advantage of this are low. Here, let's try</p>\n<div class=\"highlight highlight-text-xml\"><pre>function useRequest(url) {\n  const [error, setError] = useState&#x3C;<span class=\"pl-ent\">unknown</span>>()\n  const [pokemonInfo, setItemInfo] = useState&#x3C;<span class=\"pl-ent\">ItemInfo</span>>()\n  useEffect(() => {\n    ;(async () => {\n      try {\n        setItemInfo(undefined) // &#x3C;<span class=\"pl-ent\">--</span> important to reset the state of the app\n        setError(undefined) // &#x3C;-- important to reset the state of the app\n        const data = await myfetch(`/v1/myapi/getItem?id=${itemId}`)\n        if (!cancelled) {\n          setItemInfo(pokemonInfo)\n        }\n      } catch (e) {\n        console.error(e)\n        if (!cancelled) {\n          setError(e)\n        }\n      }\n    })()\n\n    return () => {\n      cancelled = true\n    }\n  }, [itemId])\n}\n</pre></div>"}},"__N_SSG":true}