{"pageProps":{"post":{"title":"You may not need a bundler for your NPM library","date":"2022-05-27","slug":"2022-05-27-youmaynotneedabundler","html":"<p>I have seen a couple threads on twitter where people complain about the\ndifficulty with publishing NPM libraries or ask what starter kit they should\nuse (or, people recommended starter packs anyways)</p>\n<p>Example threads</p>\n<ul>\n<li><a href=\"https://twitter.com/cramforce/status/1513903035197526017\">https://twitter.com/cramforce/status/1513903035197526017</a></li>\n<li><a href=\"https://twitter.com/oleg008/status/1510006191296061441\">https://twitter.com/oleg008/status/1510006191296061441</a></li>\n<li><a href=\"https://twitter.com/iansu/status/1524860613943382017\">https://twitter.com/iansu/status/1524860613943382017</a></li>\n<li><a href=\"https://twitter.com/mpocock1/status/1525075901905522691\">https://twitter.com/mpocock1/status/1525075901905522691</a></li>\n</ul>\n<p>One thing that is notable to me in these threads is that people often recommend\nthat you use a bundler (a program that combines multiple src files into a\nsingle or fewer output files) when developing a library</p>\n<p>Examples of starter packs suggested in these threads that use bundlers</p>\n<ul>\n<li><code>microbundle</code> - <a href=\"https://github.com/developit/microbundle\">https://github.com/developit/microbundle</a> - uses rollup</li>\n<li><code>esno</code> - <a href=\"https://www.npmjs.com/package/esno\">https://www.npmjs.com/package/esno</a> - uses esbuild</li>\n<li><code>unbuild</code> - <a href=\"https://github.com/unjs/unbuild\">https://github.com/unjs/unbuild</a> - uses rollup</li>\n<li><code>preconstruct</code> - <a href=\"https://github.com/preconstruct/preconstruct\">https://github.com/preconstruct/preconstruct</a> - uses rollup</li>\n<li><code>tsup</code> - <a href=\"https://github.com/egoist/tsup\">https://github.com/egoist/tsup</a> - uses esbuild</li>\n<li><code>tsdx</code> - <a href=\"https://github.com/jaredpalmer/tsdx\">https://github.com/jaredpalmer/tsdx</a> - uses rollup</li>\n<li><code>vite library mode</code> - <a href=\"https://vitejs.dev/guide/build.html#library-mode\">https://vitejs.dev/guide/build.html#library-mode</a> - uses rollup</li>\n<li><code>packemon</code> - <a href=\"https://github.com/milesj/packemon\">https://github.com/milesj/packemon</a> - uses rollup</li>\n<li><code>ts-library-template</code> - <a href=\"https://github.com/shortercode/ts-library-template\">https://github.com/shortercode/ts-library-template</a> - uses rollup</li>\n<li><code>parcel</code> - <a href=\"https://twitter.com/devongovett/status/1524944991402999810\">https://twitter.com/devongovett/status/1524944991402999810</a> - uses parcel</li>\n<li><code>dts</code> - <a href=\"https://weiran-zsd.github.io/dts-cli/\">https://weiran-zsd.github.io/dts-cli/</a> - uses rollup</li>\n<li><code>pkgroll</code> - <a href=\"https://github.com/privatenumber/pkgroll\">https://github.com/privatenumber/pkgroll</a> - uses rollup</li>\n<li><code>mkdist</code> - <a href=\"https://github.com/unjs/mkdist\">https://github.com/unjs/mkdist</a> - referenced by <code>unbuild</code>, uses esbuild</li>\n</ul>\n<p>Not using bundlers</p>\n<ul>\n<li><code>gts</code> - <a href=\"https://github.com/google/gts\">https://github.com/google/gts</a></li>\n<li><code>ts-react-toolbox</code> - <a href=\"https://github.com/zzarcon/ts-react-toolbox/\">https://github.com/zzarcon/ts-react-toolbox/</a></li>\n</ul>\n<p>In summary 2/15 do not use a bundler, 13/15 do use a bundler. Sidenote: webpack notably absent</p>\n<h2 id=\"why-would-you-not-want-a-bundler-for-your-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#why-would-you-not-want-a-bundler-for-your-library\"><a href=\"#why-would-you-not-want-a-bundler-for-your-library\" style=\"margin-right: 10px\">#</a></a>Why would you <em>NOT</em> want a bundler for your library?</h2>\n<p>My main argument is that the consumer of your library is the one that should\nuse a bundler if it is relevant to them. If the library uses a bundler:</p>\n<ul>\n<li>in the best case, it has no impact on the consumer</li>\n<li>in the worst case, it affects the complexity of your library and makes\npossible limitations for your consumers also.</li>\n</ul>\n<p>An example where it can actually create limitations, you might consider code\nsplitting with async <code>import()</code>. If you create a single file bundle, then the\nconsumer of your library may not be able to do code splitting properly via\nasync <code>import()</code></p>\n<h2 id=\"why-would-you-maybe-want-a-bundler-for-your-library\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#why-would-you-maybe-want-a-bundler-for-your-library\"><a href=\"#why-would-you-maybe-want-a-bundler-for-your-library\" style=\"margin-right: 10px\">#</a></a>Why would you <em>MAYBE</em> want a bundler for your library</h2>\n<p>If you really care about producing a <code>UMD</code> bundle that can be used in a script\ntag, maybe you want a bundler, but the future does not seem to be in <code>UMD</code>.\nOne other possible bundle type is maybe you like the idea of a single file\n<code>ESM</code> module. It is similar where you could maybe reference this from a script\ntag with type module, but this seems like a niche usage. For example, you\nwould still have to consider:</p>\n<ul>\n<li>If you are not bundling dependencies, then what is the benefit of using a\nbundler?</li>\n<li>If you are bundling dependencies, you are not allowing people to get updates\nto your sub-dependencies with semver!</li>\n</ul>\n<p>Add-on: Another concern brought up by users in discussion thread: There is a\ncost to having many small files, e.g. in app startup cost on serverless or any\nnodejs application to loading many small files off disk. To me, this is an app\nlevel concern, similar to bundling for the browser though.</p>\n<h2 id=\"my-suggestion-no-bundler-no-starter-pack-just-tsc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#my-suggestion-no-bundler-no-starter-pack-just-tsc\"><a href=\"#my-suggestion-no-bundler-no-starter-pack-just-tsc\" style=\"margin-right: 10px\">#</a></a>My suggestion: no bundler, no starter pack, just <code>tsc</code></h2>\n<p>I'd recommend just compiling your code with <code>tsc</code>, no bundler involved. This\nway, you can develop with typescript, it will output <code>js</code> files, and you can\ndirectly deploy a <code>dist</code> folder of <code>js</code> files to NPM.</p>\n<h3 id=\"example-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-packagejson\"><a href=\"#example-packagejson\" style=\"margin-right: 10px\">#</a></a>Example <code>package.json</code></h3>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>yourlib<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.0.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"main\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/index.js<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"scripts\"</span>: {\n    <span class=\"pl-ent\">\"clean\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>rimraf dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"prebuild\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>npm run clean<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"build\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>tsc<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"preversion\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>npm run build<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"postversion\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>git push --follow-tags<span class=\"pl-pds\">\"</span></span>\n  },\n  <span class=\"pl-ent\">\"files\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"devDependencies\"</span>: {\n    <span class=\"pl-ent\">\"rimraf\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^3.0.2<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"typescript\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>^4.6.2<span class=\"pl-pds\">\"</span></span>\n  }\n}\n</pre></div>\n<h4 id=\"features-of-the-above-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#features-of-the-above-packagejson\"><a href=\"#features-of-the-above-packagejson\" style=\"margin-right: 10px\">#</a></a>Features of the above <code>package.json</code></h4>\n<ul>\n<li>We can use a single command, <code>yarn publish</code> to publish to npm</li>\n<li>The single <code>yarn publish</code> automatically runs <code>clean</code> and <code>build</code> via\n<code>preversion</code>, then <code>postversion</code>, which pushes the tag to the remote repo</li>\n<li>The <code>\"files\": [\"dist\", \"src\"]</code> refers to publishing the <code>dist</code> and <code>src</code>\ndirectories, and src is used for the <code>sourceMap</code></li>\n</ul>\n<h3 id=\"example-tsconfigjson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#example-tsconfigjson\"><a href=\"#example-tsconfigjson\" style=\"margin-right: 10px\">#</a></a>Example<code> tsconfig.json</code></h3>\n<div class=\"highlight highlight-json\"><pre>{\n  <span class=\"pl-ent\">\"include\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src<span class=\"pl-pds\">\"</span></span>],\n  <span class=\"pl-ent\">\"compilerOptions\"</span>: {\n    <span class=\"pl-ent\">\"target\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es2018<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"outDir\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"lib\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dom<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>esnext<span class=\"pl-pds\">\"</span></span>],\n    <span class=\"pl-ent\">\"declaration\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"moduleResolution\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"sourceMap\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"strict\"</span>: <span class=\"pl-c1\">true</span>,\n    <span class=\"pl-ent\">\"esModuleInterop\"</span>: <span class=\"pl-c1\">true</span>\n  }\n}\n</pre></div>\n<h4 id=\"features-of-the-above-tsconfigjson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#features-of-the-above-tsconfigjson\"><a href=\"#features-of-the-above-tsconfigjson\" style=\"margin-right: 10px\">#</a></a>Features of the above <code>tsconfig.json</code></h4>\n<ul>\n<li>Uses <code>\"moduleResolution\": \"node\"</code> - this is not pure-ESM because pure-ESM\nexpects you to import filenames with their file extension, while node module\nresolution can import extensionless paths, but node module resolution\ngenerally works well with consumers that use bundlers themselves</li>\n<li>Uses <code>\"target\": \"es2018\"</code> - This is does a small amount of transpilation of\nsuper modern features, but would generally not require your users to\nbabel-ify their <code>node_modules</code> if they consume your library</li>\n</ul>\n<h2 id=\"what-about-testing\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-about-testing\"><a href=\"#what-about-testing\" style=\"margin-right: 10px\">#</a></a>What about testing?</h2>\n<p>Adding testing is not immediately solved by the above, but bundling doesn't\nreally help testing anyways. It's just a starter pack feature we can add on.\nSome options you have include</p>\n<ul>\n<li>Use <code>ts-jest</code></li>\n<li>Use <code>jest</code> on it's own, plus a <code>babel</code> config with <code>@babel/preset-typescript</code></li>\n<li>Use <code>jest</code> on it's own, run over the compiled output without a <code>babel</code> config</li>\n<li>Use <code>vitest</code></li>\n<li>Possibly something else? Node now has a built-in test runner. It will be a\nslow road to adoption but might become more popular over time\n<a href=\"https://fusebit.io/blog/node-testing-comes-to-core/\">https://fusebit.io/blog/node-testing-comes-to-core/</a></li>\n</ul>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>It is tempting to have nice zero-config solutions and starter kits, but to me,\nit is not really beneficial to use the bundler aspect of many of these for\npublishing to NPM. Am I wrong? Let me know if I am.</p>\n<p>Also, these starter kits may not be maintained for perpetuity. Our team used\n<code>tsdx</code> for some time, but it was not maintained well, and used old typescript\nversion 3.x, and it ended up being hard to remove from our codebase. Learning\nthe basic tools like <code>tsc</code> will help</p>\n<h2 id=\"footnote-1-shipping-pure-esm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-shipping-pure-esm\"><a href=\"#footnote-1-shipping-pure-esm\" style=\"margin-right: 10px\">#</a></a>Footnote 1: Shipping \"pure-ESM\"</h2>\n<p>Do you want to make a pure-ESM package? Then you do not want to use\n<code>\"moduleResolution\": \"node\"</code> in <code>tsconfig.json</code>, and you will want to set\n<code>\"type\": \"module\"</code> in <code>package.json</code>. You may also need to explicitly import\nwith <code>.js</code> extensions in your source code, even if you write <code>.ts</code>. This is\nawkward, and something the community is still grappling with.</p>\n<p>If you have ever stumbled on this topic, you will probably want to see this\nlink\n<a href=\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>\n<h2 id=\"footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\"><a href=\"#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Shipping ESM and CommonJS side by side without going \"pure-ESM\"</h2>\n<p>It can be tricky to go pure-ESM, but you can go most of the way there by using\nboth the \"main\" and \"module\" fields in package.json</p>\n<ul>\n<li>Compile with tsc with <code>tsc --module commonjs --outDir dist</code></li>\n<li>Compile with tsc again with <code>tsc --module esnext --outDir esm</code></li>\n<li>Then set \"main\":\"dist/index.js\" for node and <code>\"module\":\"esm/index.js\"</code> for\nbundlers</li>\n</ul>\n<p>The \"module\" field is a field only bundlers recognizes\n<a href=\"https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for\">https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for</a></p>\n<p>Note: This is different from the \"type\":\"module\" which marks your module as\npure-ESM!</p>\n<p>I have found this technique can go a long ways towards keeping your package\ncompatible with nodeJS and bundlers and it does not require \"export maps\" or\nanything which I have found to be difficult to configure</p>\n<h2 id=\"footnote-3-learning-your-tools\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-learning-your-tools\"><a href=\"#footnote-3-learning-your-tools\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Learning your tools</h2>\n<p>Several people on the\n<a href=\"https://cmdcolin.github.io/posts/2022-05-04-findseddangerous\">my recent post</a>\npost suggested that I did not understand my tools, and that I should just learn\nthe tools correctly and I wouldn't have the problem I had.</p>\n<p>Indeed, what I am now telling people to do in this post is similar: I am saying\n\"just use <code>tsc</code> by itself! Understand you tools! You may have to do more\nresearch and create more boilerplate, but it's <strong>better</strong>\".</p>\n<p>Ultimately though, it's up to you to choose your tools and starter packs and\nwhatnot.</p>\n<h2 id=\"footnote-4-what-does-it-look-like-when-you-compile-with-tsc\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-what-does-it-look-like-when-you-compile-with-tsc\"><a href=\"#footnote-4-what-does-it-look-like-when-you-compile-with-tsc\" style=\"margin-right: 10px\">#</a></a>Footnote 4: What does it look like when you compile with tsc?</h2>\n<p>When I refer to compiling with tsc above, I compile a <code>src</code> directory into a\n<code>dist</code> directory</p>\n<p>So if I have:</p>\n<pre><code>src/index.ts\nsrc/util.ts\nsrc/components/Button.ts\n</code></pre>\n<p>Running <code>tsc</code> will output:</p>\n<pre><code>dist/index.js\ndist/index.d.ts\ndist/index.js.map\ndist/util.js\ndist/util.d.ts\ndist/util.js.map\ndist/components/Button.js\ndist/components/Button.d.ts\ndist/components/Button.js.map\n</code></pre>\n<p>Then, the <code>dist</code> and <code>src</code> directories are published to npm which enables the\n<code>sourceMaps</code> to work.</p>\n<p>Note: We do not need to explicitly say where the typescript types are with\n\"types\" in <code>package.json</code>, many starter packs do this but it is unneeded for\nthis package as the d.ts files are automatically found.</p>\n<p>See\n<a href=\"https://cmdcolin.github.io/posts/2021-12-31-npm-package\">https://cmdcolin.github.io/posts/2021-12-31-npm-package</a>\nfor my article on creating a typescript package for npm</p>\n<h2 id=\"footnote-5-other-things-people-recommend\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-other-things-people-recommend\"><a href=\"#footnote-5-other-things-people-recommend\" style=\"margin-right: 10px\">#</a></a>Footnote 5: Other things people recommend</h2>\n<p>Other things people recommend in the starter pack threads</p>\n<ul>\n<li><code>deno</code> - not clear to me how this helps when deploying to npm, but I still gotta try deno</li>\n<li><code>ts-node </code> - not clear to me how this helps when deploying to npm</li>\n<li><code>nx</code> - heavy monorepo-based solution</li>\n<li><code>elm</code> - that's just a different thing</li>\n<li><code>Typescript-Node-Starter</code> - <a href=\"https://github.com/microsoft/TypeScript-Node-Starter\">https://github.com/microsoft/TypeScript-Node-Starter</a> - not a library, full stack framework</li>\n<li><code>joystick</code> - <a href=\"https://github.com/CheatCode/joystick\">https://github.com/CheatCode/joystick</a> - not a library, full stack framework</li>\n</ul>\n<h2 id=\"footnote-6\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6\"><a href=\"#footnote-6\" style=\"margin-right: 10px\">#</a></a>Footnote 6:</h2>\n<p>Similar things happen if you take on dependencies of starter kits like\n<code>create-react-app</code>. You become very committed to their particular way of doing\nthings, and can only modify their config with things like <code>rescripts</code>, <code>craco</code>\nor <code>rewired</code>. If you crafted your setup with just <code>webpack</code>, you may not be so\ntied down. But, I still use things like <code>create-react-app</code> because they do seem\nto help me significantly. Now though, the tide seems to be turning other\ndirections like next.js which can do static site generation at a basic level\nand extend to multiple pages more easily.</p>\n<h2 id=\"footnote-7\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-7\"><a href=\"#footnote-7\" style=\"margin-right: 10px\">#</a></a>Footnote 7:</h2>\n<p>You may not even need <code>tsc</code> to compile your dist folder. You can literally\npublish your source <code>.js</code> files as-is to NPM. This suggestion comes from\n@trevmanz <a href=\"https://twitter.com/trevmanz/status/1534962190008172545\">1</a>\n<a href=\"https://twitter.com/trevmanz/status/1534962940348092417\">2</a>. I don't\npersonally use this technique yet but there are many users with this workflow</p>\n<p>An interesting thing is you can write in <code>.js</code> but still get <code>typescript</code> to\nget type checking using <code>jsdoc</code>, just use <code>allowJs</code>/<code>checkJs</code> flags in\n<code>tsconfig.json</code></p>\n<h2 id=\"footnote-8\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-8\"><a href=\"#footnote-8\" style=\"margin-right: 10px\">#</a></a>Footnote 8:</h2>\n<p>What about React? Bundlers not needed, and not even babel is needed: you can\ncode your library as in <code>jsx</code> or <code>tsx</code> files and use <code>tsc</code> to compile it to\nReact.createElement statements or other jsx transforms.</p>"}},"__N_SSG":true}