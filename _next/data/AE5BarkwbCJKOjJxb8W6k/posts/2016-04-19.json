{"pageProps":{"post":{"title":"Creating a testing framework for JBrowse plugins","date":"2016-04-19","slug":"2016-04-19","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      ol: \"ol\",\n      li: \"li\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Testing client side apps requires a couple of tedious steps: Organizing\\nthe git clone, the dependencies, wrangling up a web server, the test\\nframework, etc.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"When testing a plugin for jbrowse, the dependency tree is interesting\\nbecause the plugin \\\"depends\\\" on JBrowse to run, but we will use\\ntravis-CI and bower inside the git repo for our plugin to accomplish\\nthis.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In this scenario, we will\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Use bower to install jasmine and JBrowse (our platform that we write\\nthe plugin for)\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Use nginx to launch a webserver on travis-CI\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"Use the phantomjs run-jasmine.js script to check jasmine test\\nresults\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Without further ado\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here is the .travis.yml\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"    sudo: false\\n    addons:\\n      apt:\\n        packages:\\n        - nginx\\n    cache:\\n      apt: true\\n      directories:\\n      - $HOME/.cache/bower\\n    before_install:\\n      - npm install -g jshint bower\\n    install:\\n      - bower install\\n    before_script:\\n      - cat test/travis.conf | envsubst > test/travis-envsubst.conf\\n      - nginx -c `pwd`/test/travis-envsubst.conf\\n    script:\\n      - phantomjs test/run-jasmine.js http://localhost:9000/test/\\n      - jshint js\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Refer to\\nhttp://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2\\nfor details on the nginx setup\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here is the bower.json\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"    {\\n      \\\"name\\\": \\\"sashimiplot\\\",\\n      \\\"homepage\\\": \\\"https://github.com/cmdcolin/sashimiplot\\\",\\n      \\\"description\\\": \\\"Sashimi track type for jbrowse\\\",\\n      \\\"main\\\": \\\"js/main.js\\\",\\n      \\\"keywords\\\": [\\n        \\\"bioinformatics\\\",\\n        \\\"jbrowse\\\"\\n      ],\\n      \\\"license\\\": \\\"MIT\\\",\\n      \\\"ignore\\\": [\\n        \\\"**/.*\\\",\\n        \\\"node_modules\\\",\\n        \\\"bower_components\\\",\\n        \\\"src\\\",\\n        \\\"test\\\",\\n        \\\"tests\\\"\\n      ],\\n      \\\"devDependencies\\\": {\\n        \\\"jasmine-core\\\": \\\"jasmine#^2.4.1\\\",\\n        \\\"jbrowse\\\": \\\"git://github.com/GMOD/jbrowse.git#master\\\"\\n      }\\n    }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The key thing here is that it installs jasmine and JBrowse. I set\\n.bowerrc to install both jasmine and JBrowse to the \\\"test\\\" directory\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"    {\\n        \\\"directory\\\": \\\"test\\\"\\n    }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With this setup, bower will make a \\\"flat dependency tree\\\" in the test\\ndirectory, so it will look like this\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"    $ ls -1 test\\n    FileSaver\\n    dbind\\n    dgrid\\n    dijit\\n    dojo\\n    dojox\\n    *index.html*\\n    jDataView\\n    jasmine-core\\n    jbrowse\\n    json-schema\\n    jszlib\\n    lazyload\\n    put-selector\\n    *run-jasmine.js*\\n    *spec*\\n    *travis.conf*\\n    util\\n    xstyle\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Here the asterisks indicate things that are part of our app, other's are\\nautomatically installed by bower (jbrowse, jasmine-core, the dojo\\ndependencies, and other things)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then we can create the jasmine test/index.html to be something like this\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"    <!DOCTYPE HTML PUBLIC \\\"-//W3C//DTD HTML 4.01 Transitional//EN\\\"\\n      \\\"http://www.w3.org/TR/html4/loose.dtd\\\">\\n\\n\\n      <meta>\\n      Jasmine Spec Runner\\n\\n      <link rel=\\\"stylesheet\\\" href=\\\"jasmine-core/lib/jasmine-core/jasmine.css\\\"><script src=\\\"jasmine-core/lib/jasmine-core/jasmine.js\\\"></script><script src=\\\"jasmine-core/lib/jasmine-core/boot.js\\\"></script><script type=\\\"text/javascript\\\" src=\\\"dojo/dojo.js\\\" data-dojo-config=\\\"async: 1\\\"></script><script type=\\\"text/javascript\\\">\\n        require( { baseUrl: '.',\\n                   packages: [\\n                       'dojo',\\n                       'dijit',\\n                       'dojox',\\n                       'jszlib',\\n                       { name: 'lazyload', location: 'lazyload', main: 'lazyload' },\\n                       'dgrid',\\n                       'xstyle',\\n                       'put-selector',\\n                       'FileSaver',\\n                       { name: 'jDataView', location: 'jDataView/src', main: 'jdataview' },\\n                       { name: 'JBrowse', location: 'jbrowse/src/JBrowse' },\\n                       { name: 'SashimiPlot', location: '../js' }\\n                   ]\\n        });\\n      </script><script type=\\\"text/javascript\\\" src=\\\"spec/SashimiPlot.spec.js\\\"></script><div id=\\\"sandbox\\\" style=\\\"overflow:hidden; height:1px;\\\"></div>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \\\"packages\\\" in the require statement puts all these packages in the\\nright \\\"namespace\\\" for the AMD includes, and the \\\"specs\\\" are defined like\\n\", _jsx(_components.code, {\n          children: \"<script type=\\\"text/javascript\\\" src=\\\"spec/Projection.spec.js\\\"></script>\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Finally, run-jasmine.js is used to check the results of the jasmine tests (it\\nis run via phantomjs in the travis-CI script). It is a special version for the\\nmost recent version of jasmine (2.4)\\nhttps://gist.github.com/vmeln/b6cbb319d9a0efc816be\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"For an example of the project using this, see\\nhttps://github.com/cmdcolin/sashimiplot\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}