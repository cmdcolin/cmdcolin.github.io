{"pageProps":{"post":{"title":"Detecting structural variants and the SAM format","date":"2022-02-06","slug":"2022-02-06-whatdoreadsmean","mdxSource":{"compiledSource":"var d=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,t,n)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,i=(e,t)=>{for(var n in t||(t={}))r.call(t,n)&&p(e,n,t[n]);if(o)for(var n of o(t))s.call(t,n)&&p(e,n,t[n]);return e},l=(e,t)=>m(e,c(t));var h=(e,t)=>{var n={};for(var a in e)r.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&o)for(var a of o(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=h(a,[\"components\"]);return mdx(MDXLayout,l(i(i({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` specification is pretty amazing\n`,mdx(\"a\",i({parentName:\"p\"},{href:\"https://samtools.github.io/hts-specs/SAMv1.pdf\"}),\"https://samtools.github.io/hts-specs/SAMv1.pdf\"),` but it is also fairly terse and\nabstract. Really understanding the may require playing with real world data`),mdx(\"p\",null,`I am not even by any means a an expert at looking at alignments, but there are\nsome things that you can pick up from looking at them a lot (either in text\nform or in a genome browser), and also, if you need to write code to interpret\nthem, actually interpreting`),mdx(\"h2\",null,\"Basics\"),mdx(\"h3\",null,\"What is a \",mdx(\"inlineCode\",{parentName:\"h3\"},\"SAM\"),\" file and how does it relate to BAM and CRAM\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file contains \"reads\" from a sequencer. The \"reads\" often come in the\nform fastq files. The reads from `,mdx(\"inlineCode\",{parentName:\"p\"},\"fastq\"),` format are inputted into an aligner\nsuch as `,mdx(\"inlineCode\",{parentName:\"p\"},\"bwa\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"bowtie\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"minimap2\"),`, which map the reads to a reference genome,\nand output SAM format.`),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\" is a text format that you can read with your text editor. \",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),\" are compressed representations of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` format, and you can use\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"samtools view yourfile.bam\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"samtools view yourfile.cram\"),` to convert them\nback to SAM (or pipe to `,mdx(\"inlineCode\",{parentName:\"p\"},\"less\"),` to just read snippets of it without a full\nconversion)`),mdx(\"h3\",null,\"What is a \",mdx(\"inlineCode\",{parentName:\"h3\"},\"CIGAR\"),\" string\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` string is a \"compact idiosyncratic gapped alignment report\". Yes,\nthat's an acronym. It can tell you where insertions and deletions are in an\nalignment. Some CIGAR strings tell you where mismatches are, but often, the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),\" string does not tell you this.\"),mdx(\"h3\",null,\"What is an \",mdx(\"inlineCode\",{parentName:\"h3\"},\"MD\"),\" string\"),mdx(\"p\",null,\"An \",mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),\" string is a tag in \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file that helps tell you where the mismatches\nare, and can be combined with a `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` to get the position of the mismatches\nwithout looking at a reference genome. The `,mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),` string is commonly seen in BAM\nfiles. However, the `,mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),` string has some limitations, and if you have a\nreference genome file and a `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` string, you can calculate where the\nmismatches are without the `,mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),\" tag\"),mdx(\"p\",null,\"See \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://github.com/samtools/hts-specs/issues/505\"}),\"https://github.com/samtools/hts-specs/issues/505\"),` for some complaints about\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),\" string format\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),` tag contains information about deletions (including the bases of the\nreference genome, which would otherwise not be indicated) and mismatches (same,\nindicating the base of the reference genome at a SNPs position), but not\ninsertions`),mdx(\"h2\",null,\"What are split alignments?\"),mdx(\"p\",null,`Split alignments, or chimeric-alignments are alignments where part of the read\naligns to perhaps chr1, and part of it maps to perhaps chr4. It is worth\nreading the definition of \"Chimeric alignment\" from SAMv1.pdf (not reproduced\nhere)`),mdx(\"p\",null,mdx(\"a\",i({parentName:\"p\"},{href:\"https://samtools.github.io/hts-specs/SAMv1.pdf\"}),\"https://samtools.github.io/hts-specs/SAMv1.pdf\")),mdx(\"p\",null,`There is no limitation on how many splits might occur so the split can align to\n3, 4, or more different places. Each part of the split puts a new line in the\nSAM file. As SAMv1.pdf tells us, one read is marked as \"representative\", I call\nthis the \"primary\" read, while the other components of the split read are maked\nsupplementary, given the 2048 flag (0x80). Only the \"primary\" read generally\nhas a `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\" field (column 10)\"),mdx(\"p\",null,`Split alignments are especially common with long reads, and it can indicate\nthat there may be a structural variant where the two chromosomes are fused\ntogether (which may create gene fusions, or other types of phenomena).`),mdx(\"p\",null,`note: split alignments are different from \"multi-mappers\" where the entire read\nmaps maps equally well to, say, chr4 and chr1. Split reads maps part to chr1,\nand part to chr4`),mdx(\"p\",null,\"See again the SAMv1.pdf for the definition of multi-mapping\"),mdx(\"h3\",null,\"The SA tag can result in a 'quadratic explosion of data'\"),mdx(\"p\",null,\"Read mappers output the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag on each part of the split read, indicating\nwhere the other parts of the split read. Interestingly, this could lead to a\nquadratic explosion of data, because if a read is split into 4 pieces, then\neach read would would have an SA tag with 3 segments, so 3`,\"*\",`4 segments will be\ndocumented in the SA tag.`),mdx(\"h3\",null,\"Reconstructing a split alignment given the primary alignment\"),mdx(\"p\",null,`If we are given the the primary alignment of an arbitrary split read, then we\ncan construct what that split looks like compared to the reference genome.`),mdx(\"p\",null,`If we are not given the primary alignment (e.g. we are starting from a\nsupplementary alignment) then we can search the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` list for the one that is\nprimary, because at least one will be.`),mdx(\"p\",null,\"Now that we have the primary alignment, it will have the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\" and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag\ncontaining the `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` of all the different parts of the split. Therefore, we\ncan piece together the complete picture of the entire split alignment.`),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"/media/linear-alignment.png\",alt:null})),`\nFigure showing JBrowse 2 piecing together a long read vs the reference genome from a single read`),mdx(\"p\",null,`I can take the CIGAR strings of the primary alignment and each of the segments\nof the SA tag, sort them by the amount of softclipping in them, and then this\ntells me where each piece of the split alignment came from in the original\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\")),mdx(\"h3\",null,\"Reconstructing the derived genome is easier with SAM than with VCF breakends?\"),mdx(\"p\",null,`An interesting outcome of this is that from a single record in a BAM file, I\ncan reconstruct the \"derived\" genome around a region of interest from a single\nread.`),mdx(\"p\",null,`If I was to try to do this with the VCF Breakend specification, it may actually\nbe more challenging than from a SAM read. This is because a Breakend in VCF\nformat is only an edge in a graph (and the sequences are nodes). Therefore, in\norder to properly reconstruct a structural variant from a VCF with Breakends, I\nwould have to construct the graph,`),mdx(\"p\",null,`Now, this has caveats: a single read is noisy and does not contain as aggregate\nevidence as looking at all the reads in a region. But still, interpretation of\nthe VCF breakend specification is challenging due to imposing a sequence graph\non the genome, while the SA tag remains just a simple set of linear alignments\nthat can easily be pieces together`),mdx(\"h2\",null,\"How do you detect SVs with paired-end reads?\"),mdx(\"p\",null,`Paired-end reads are short reads, e.g. 150bp each. This makes them unable to\nrecover some large structural variants.`),mdx(\"p\",null,`However, paired-end reads have a number of attributes that can be used to\ndetect paired end reads`),mdx(\"h3\",null,\"Distance between pairs being abnormally large or short\"),mdx(\"p\",null,\"The distance between pairs is encoded by the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),\" column in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` format.\nThe distance between pairs with good mapping is relatively constant and called\nthe \"insert length\". This comes from how the sequencing is done: paired-end\nsequencing performs sequencing on both ends of a fragment.`),mdx(\"p\",null,`But, if you are mapping reads vs the reference genome, and you observe that\nthey are abnormally far apart, say 50kb apart instead of 1kb apart, this may\nindicate there your sample contains a deletion relative to the reference.`),mdx(\"h3\",null,'An abundance of reads being \"clipped\" at a particular position'),mdx(\"p\",null,`This can indicate that part of the reads map well, but then there was an abrupt\nstop to the mapping. This might mean that there is a sequence that was an\ninsertion at that position, or a deletion, or a translocation.`),mdx(\"p\",null,`The clipping is indicated by the CIGAR string, either at the start or end of it\nby an S or an H`),mdx(\"p\",null,`The S indicates \"soft clipping\", and indicates that the sequence of the clipped\nportion can be found in the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\" field of the primary alignment.\"),mdx(\"h3\",null,\"Unexpected pair orientation\"),mdx(\"p\",null,\"With standard paired end sequencing, the pairs normally point at each other\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{}),`forward reverse\n --->    <---\n`)),mdx(\"p\",null,\"If the stranded-ness of the pair is off, then it could indicate a structural variant\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-typescript\"}),`// rnext: rnext column in sam\n// ref: refname column in sam\n// flags: flag integer in sam\n// tlen: tlen column in sam\n// code adapted from IGV\nfunction getPairOrientation(\n  flags: number,\n  ref: string,\n  rnext: string,\n  tlen: number,\n) {\n  // this read is not unmapped &&\n  // this read's mate is also not unmapped &&\n  // this read's mate is on the same reference genome\n  if (!flags & 4 && !flags & 8 && ref === rnext) {\n    const s1 = flags & 16 ? 'R' : 'F'\n    const s2 = flags & 32 ? 'R' : 'F'\n    let o1 = ' '\n    let o2 = ' '\n\n    // if first in pair\n    if (flags & 64) {\n      o1 = '1'\n      o2 = '2'\n    }\n\n    // else if second in pair\n    else if (flags & 128) {\n      o1 = '2'\n      o2 = '1'\n    }\n\n    const tmp = []\n    if (tlen > 0) {\n      tmp[0] = s1\n      tmp[1] = o1\n      tmp[2] = s2\n      tmp[3] = o2\n    } else {\n      tmp[2] = s1\n      tmp[3] = o1\n      tmp[0] = s2\n      tmp[1] = o2\n    }\n    return tmp.join('')\n  }\n  return null\n}\n`)),mdx(\"p\",null,\"If you have standard paired end reads, it will return \",mdx(\"inlineCode\",{parentName:\"p\"},\"FR\"),\" forward-reverse, similar to the text diagram\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{}),`forward reverse\n --->    <---\n`)),mdx(\"p\",null,`This guide from IGV is helpful for interpreting the pair directionality with\npatterns of SVs using \"Color by pair orientation\"`),mdx(\"p\",null,mdx(\"a\",i({parentName:\"p\"},{href:\"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"}),\"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\")),mdx(\"h3\",null,\"Caveat about TLEN\"),mdx(\"p\",null,\"Note that \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),` is a field in the SAM format that is somewhat ill defined,\nat least in the sense that different tools may use it differently\n`,mdx(\"a\",i({parentName:\"p\"},{href:\"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\"}),\"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\")),mdx(\"p\",null,\"If needed, you can calculate \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),` yourself if process the file yourself\n(process all reads, get the actual records for the pairs, and calculate\ndistance) but I have not had trouble with basic usage of tools that rely on the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),\" from the data files themselves\"),mdx(\"h2\",null,\"How does clipping work?\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}