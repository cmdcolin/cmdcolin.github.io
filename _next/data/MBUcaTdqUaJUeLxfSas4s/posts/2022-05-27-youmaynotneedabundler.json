{"pageProps":{"post":{"title":"You may not need a bundler for your NPM library","date":"2022-05-27","slug":"2022-05-27-youmaynotneedabundler","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      ul: \"ul\",\n      li: \"li\",\n      a: \"a\",\n      code: \"code\",\n      h2: \"h2\",\n      em: \"em\",\n      h3: \"h3\",\n      pre: \"pre\",\n      h4: \"h4\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Very often on twitter, people complain about the difficulty with publishing NPM\\nlibraries or ask what \\\"starter kit\\\" they should use (or otherwise get\\nrecommended starter packs by people trying to make it easier for them)\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Example threads\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://twitter.com/cramforce/status/1513903035197526017\",\n            children: \"https://twitter.com/cramforce/status/1513903035197526017\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://twitter.com/oleg008/status/1510006191296061441\",\n            children: \"https://twitter.com/oleg008/status/1510006191296061441\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://twitter.com/iansu/status/1524860613943382017\",\n            children: \"https://twitter.com/iansu/status/1524860613943382017\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://twitter.com/mpocock1/status/1525075901905522691\",\n            children: \"https://twitter.com/mpocock1/status/1525075901905522691\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I'm not trying to criticize the posters in these threads, but one thing that is\\nnotable to me in these threads is that people often recommend that you use a\\nbundler, e.g. a program that combines the multiple files of your codebase, when\\ndeveloping a library\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Examples of programs suggested in these threads that use bundlers\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"microbundle\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/developit/microbundle\",\n            children: \"https://github.com/developit/microbundle\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"esno\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://www.npmjs.com/package/esno\",\n            children: \"https://www.npmjs.com/package/esno\"\n          }), \" - uses esbuild\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"unbuild\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/unjs/unbuild\",\n            children: \"https://github.com/unjs/unbuild\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"preconstruct\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/preconstruct/preconstruct\",\n            children: \"https://github.com/preconstruct/preconstruct\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"tsup\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/egoist/tsup\",\n            children: \"https://github.com/egoist/tsup\"\n          }), \" - uses esbuild\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"tsdx\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/jaredpalmer/tsdx\",\n            children: \"https://github.com/jaredpalmer/tsdx\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"vite library mode\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://vitejs.dev/guide/build.html#library-mode\",\n            children: \"https://vitejs.dev/guide/build.html#library-mode\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"packemon\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/milesj/packemon\",\n            children: \"https://github.com/milesj/packemon\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"ts-library-template\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/shortercode/ts-library-template\",\n            children: \"https://github.com/shortercode/ts-library-template\"\n          }), \" - uses rollup\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"parcel\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://twitter.com/devongovett/status/1524944991402999810\",\n            children: \"https://twitter.com/devongovett/status/1524944991402999810\"\n          }), \" - uses parcel\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"dts\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://weiran-zsd.github.io/dts-cli/\",\n            children: \"https://weiran-zsd.github.io/dts-cli/\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pkgroll\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/privatenumber/pkgroll\",\n            title: \"uses rollup\",\n            children: \"https://github.com/privatenumber/pkgroll\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Not using bundlers\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"gts\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/google/gts\",\n            children: \"https://github.com/google/gts\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"ts-react-toolbox\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/zzarcon/ts-react-toolbox/\",\n            children: \"https://github.com/zzarcon/ts-react-toolbox/\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"mkdist\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/unjs/mkdist\",\n            children: \"https://github.com/unjs/mkdist\"\n          }), \" - referenced by \", _jsx(_components.code, {\n            children: \"unbuild\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Other things people recommend\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"deno\"\n          }), \" - not clear to me how this helps when deploying to npm\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"ts-node \"\n          }), \" - not clear to me how this helps when deploying to npm\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"nx\"\n          }), \" - heavy monorepo-based solution\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"elm\"\n          }), \" - that's just a different thing\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"Typescript-Node-Starter\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/microsoft/TypeScript-Node-Starter\",\n            children: \"https://github.com/microsoft/TypeScript-Node-Starter\"\n          }), \" - not a library, full stack framework\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"joystick\"\n          }), \" - \", _jsx(_components.a, {\n            href: \"https://github.com/CheatCode/joystick\",\n            children: \"https://github.com/CheatCode/joystick\"\n          }), \" - not a library, full stack framework\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        children: [\"Why would you \", _jsx(_components.em, {\n          children: \"NOT\"\n        }), \" want a bundler for your library?\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The consumer of your library is the one that should use a bundler if it is\\nrelevant to them. Adding a bundler to your library will not have any effect if\\nthe consumers of your library do bundling.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"in the best case, it has no impact on the consumer\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"in the worst case, it affects the complexity of your library and makes\\nunnecessary complexity for your consumers also.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h2, {\n        children: [\"Why would you \", _jsx(_components.em, {\n          children: \"MAYBE\"\n        }), \" want a bundler for your library\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you really care about producing a \", _jsx(_components.code, {\n          children: \"UMD\"\n        }), \" bundle that can be used in a script\\ntag, maybe you want a bundler, but the future does not seem to be in \", _jsx(_components.code, {\n          children: \"UMD\"\n        }), \".\\nOne other possible bundle type is maybe you like the idea of a single file\\n\", _jsx(_components.code, {\n          children: \"ESM\"\n        }), \" module. It is similar where you could maybe reference this from a script\\ntag with type module, but this seems like a niche usage. For example, you\\nwould still have to consider\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"So:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"If you are not bundling dependencies, then what is the benefit of using a\\nbundler?\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"If you are bundling dependencies, you are not allowing people to get updates\\nto your sub-dependencies with semver!\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"My suggestion: just compile with tsc\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I'd recommend just compiling your individual files with \", _jsx(_components.code, {\n          children: \"tsc\"\n        }), \" (if using\\ntypescript). This way, you can develop with typescript, it will output \", _jsx(_components.code, {\n          children: \"js\"\n        }), \"\\nfiles, and you can directly deploy a folder of \", _jsx(_components.code, {\n          children: \"js\"\n        }), \" files to NPM.\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"Example \", _jsx(_components.code, {\n          children: \"package.json\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"name\\\": \\\"yourlib\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"main\\\": \\\"dist/index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"clean\\\": \\\"rimraf dist\\\",\\n    \\\"prebuild\\\": \\\"npm run clean\\\",\\n    \\\"build\\\": \\\"tsc\\\",\\n    \\\"preversion\\\": \\\"npm run build\\\",\\n    \\\"postversion\\\": \\\"git push --follow-tags\\\"\\n  },\\n  \\\"files\\\": [\\\"dist\\\"],\\n  \\\"devDependencies\\\": {\\n    \\\"rimraf\\\": \\\"^3.0.2\\\",\\n    \\\"typescript\\\": \\\"^4.6.2\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h4, {\n        children: [\"Features of the above \", _jsx(_components.code, {\n          children: \"package.json\"\n        })]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Single command \", _jsx(_components.code, {\n            children: \"yarn publish\"\n          }), \" to put to npm. Automatically runs preversion,\\nwhich instantiates clean and build, then postversion, which pushes to github\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"Example\", _jsx(_components.code, {\n          children: \" tsconfig.json\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"include\\\": [\\\"src\\\"],\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es2018\\\",\\n    \\\"outDir\\\": \\\"dist\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"esnext\\\"],\\n    \\\"declaration\\\": true,\\n    \\\"moduleResolution\\\": \\\"node\\\",\\n    \\\"strict\\\": true,\\n    \\\"esModuleInterop\\\": true\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h4, {\n        children: [\"Features of the above \", _jsx(_components.code, {\n          children: \"tsconfig.json\"\n        })]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Uses node moduleResolution: this is not pure-ESM because pure-ESM expects you\\nto import with the filenames\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Uses target es2018: This is does a small amount of transpilation of super\\nmodern features, but would generally not require your users to babel-ify\\ntheir node_modules if they consume your library\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"What about testing?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Adding testing is not immediately solved by the above, but bundling doesn't\\nreally help testing. It's just that you might get something a little more\\nzero-config if you adopted the above. But, taking control of your own tools,\\nsome options you have include:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"ts-jest\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"jest\"\n          }), \" on it's own, plus a \", _jsx(_components.code, {\n            children: \"babel\"\n          }), \" config with \", _jsx(_components.code, {\n            children: \"@babel/preset-typescript\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"jest\"\n          }), \" on it's own, run over the compiled output without a \", _jsx(_components.code, {\n            children: \"babel\"\n          }), \" config\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Use \", _jsx(_components.code, {\n            children: \"vitest\"\n          })]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Possibly something else?\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"You may not need a bundler or a starter kit when developing NPM libraries.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It is tempting to have a nice zero-config solutions and starter kits, but you\\nwill benefit from understanding your tools: specifically, using \", _jsx(_components.code, {\n          children: \"tsc\"\n        }), \" by\\nitself. The starter kits may not be maintained for perpetuity. Our team used\\n\", _jsx(_components.code, {\n          children: \"tsdx\"\n        }), \" for some time, but it was not maintained well, and used old typescript\\nversion 3.x, and it ended up being hard to remove from our codebase.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Similar things happen if you take on dependencies like \", _jsx(_components.code, {\n          children: \"create-react-app\"\n        }), \". You\\nbecome very committed to their particular way of doing things, and can only\\nmodify their config with things like \", _jsx(_components.code, {\n          children: \"rescripts\"\n        }), \", \", _jsx(_components.code, {\n          children: \"craco\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"rewired\"\n        }), \". If you\\ncrafted your setup with just \", _jsx(_components.code, {\n          children: \"webpack\"\n        }), \", you may not be so tied down.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"There is a nice speed to these starter kits, but I do think it is valuable to\\nlearn your tools\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 1: Shipping pure-ESM\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Do you want to make a pure-ESM package? Then you do not want to use\\nmoduleResolution:node, and you will want to set \\\"type\\\":\\\"module\\\" in\\npackage.json. You may also need to explicitly import with .js extensions in\\nyour source code, even if you write .ts. This is awkward, and something the\\ncommunity is still grappling with.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you have ever stumbled on this topic, you will probably want to see this\\nlink\\n\", _jsx(_components.a, {\n          href: \"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\",\n          children: \"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Footnote 2: Learning your tools\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Several people on the\\n\", _jsx(_components.a, {\n          href: \"https://cmdcolin.github.io/posts/2022-05-04-findseddangerous\",\n          children: \"my recent post\"\n        }), \"\\npost suggested that I did not understand my tools and that I should just learn\\nthe tools correctly and I wouldn't have a problem. The vibe of this very post\\nmight be similar: I am saying \\\"just use tsc by itself! Understand you tools!\\nYou may have to type more and research more but it's better\\\". We are sometimes\\nthe crotchety old man yelling at cloud, and we are sometimes the neophyte just\\nwanting something to work.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}