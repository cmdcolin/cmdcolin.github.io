{"pageProps":{"allPosts":[{"title":"Detecting structural variants and the SAM format - the long (reads) and short (reads) of it","date":"2022-02-06","slug":"2022-02-06-sv-sam","mdxSource":{"compiledSource":"var h=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(n,a,i)=>a in n?h(n,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[a]=i,e=(n,a)=>{for(var i in a||(a={}))r.call(a,i)&&p(n,i,a[i]);if(o)for(var i of o(a))s.call(a,i)&&p(n,i,a[i]);return n},l=(n,a)=>m(n,c(a));var d=(n,a)=>{var i={};for(var t in n)r.call(n,t)&&a.indexOf(t)<0&&(i[t]=n[t]);if(n!=null&&o)for(var t of o(n))a.indexOf(t)<0&&s.call(n,t)&&(i[t]=n[t]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var t=i,{components:n}=t,a=d(t,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),a),{components:n,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` specification is pretty amazing\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://samtools.github.io/hts-specs/SAMv1.pdf\"}),\"https://samtools.github.io/hts-specs/SAMv1.pdf\"),` but it is also fairly terse and\nabstract, and true understanding comes from playing with real world data but I\nwill try to explain some stuff I have learned about reads, especially as they\nrelate to structural variants.`),mdx(\"p\",null,`Disclaimer: I'm a developer of JBrowse 2. This document has some screenshots\nand links for it, feel free to try it at `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://jbrowse.org\"}),\"https://jbrowse.org\")),mdx(\"p\",null,\"Also note: When I refer to a \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` record in this document, it could come from\na `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),\", or \",mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),\" file as \",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),` are just alternative\nencodings of `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\")),mdx(\"h2\",null,\"Basics\"),mdx(\"h3\",null,\"What is a \",mdx(\"inlineCode\",{parentName:\"h3\"},\"SAM\"),\" file and how does it relate to \",mdx(\"inlineCode\",{parentName:\"h3\"},\"BAM\"),\" and \",mdx(\"inlineCode\",{parentName:\"h3\"},\"CRAM\"),\"?\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file contains \"reads\" from a sequencer. The \"reads\" often originally\nare from `,mdx(\"inlineCode\",{parentName:\"p\"},\"FASTQ\"),\" format files. The reads from \",mdx(\"inlineCode\",{parentName:\"p\"},\"FASTQ\"),` format are inputted into\nan aligner such as `,mdx(\"inlineCode\",{parentName:\"p\"},\"bwa\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"bowtie\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"minimap2\"),` (there are many others) which\nmap the reads to a reference genome, and output `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\" format.\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\" is a text format that you can read with your text editor. \",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),\" are compressed representations of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` format, and you can use\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"samtools view -g yourfile.bam\"),\" or \",mdx(\"inlineCode\",{parentName:\"p\"},\"samtools view -h yourfile.cram\"),` to convert\nthem back to `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\".\"),mdx(\"h3\",null,\"Converting \",mdx(\"inlineCode\",{parentName:\"h3\"},\"SAM\"),\" to \",mdx(\"inlineCode\",{parentName:\"h3\"},\"BAM\"),\" or \",mdx(\"inlineCode\",{parentName:\"h3\"},\"CRAM\")),mdx(\"p\",null,\"Quick tip:\"),mdx(\"p\",null,\"Convert SAM to BAM\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`samtools view file.sam -o file.bam\n`)),mdx(\"p\",null,\"Convert SAM to CRAM\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`samtools view -T reference.fa file.sam -o file.cram\n`)),mdx(\"h3\",null,\"What is in a \",mdx(\"inlineCode\",{parentName:\"h3\"},\"SAM\"),\" file\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\" file contains a header and series of records. \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` record is a single\nline in the file. A `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` record generally corresponds to a single read, but as\nwe will see, a split alignment may produce multiple `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` records that refer to\nthe same source read.`),mdx(\"p\",null,\"Note: you can also store unaligned data in \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),` (so-called uBAM\nfor example) but most of the time, the reads in `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` format are aligned to a\nreference genome.`),mdx(\"p\",null,`Also note: if a read failed to align to the reference genome, it may still be\nin your `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file, it will just be marked as unmapped. Sometimes, \"dumpster\ndiving\" (looking at the unmapped reads from a `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file) can reveal structural\nvariants.`),mdx(\"h3\",null,\"What is a \",mdx(\"inlineCode\",{parentName:\"h3\"},\"CIGAR\"),\" string\"),mdx(\"p\",null,\"A \",mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` string is a \"compact idiosyncratic gapped alignment report\". Yes,\nthat's an acronym. It can tell you where insertions and deletions are in an\nalignment. Some `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` strings tell you where mismatches are (so-called\nextended CIGAR, with the `,mdx(\"inlineCode\",{parentName:\"p\"},\"X\"),\" letter), but I don't often see this.\"),mdx(\"h3\",null,\"What is an \",mdx(\"inlineCode\",{parentName:\"h3\"},\"MD\"),\" string\"),mdx(\"p\",null,\"An \",mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),\" string is a tag in \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file that helps tell you where the mismatches\nare, and can be combined with a `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` to get the position of the mismatches\nwithout looking at a reference genome.`),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),\" string is commonly seen in \",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),\" files (not generally \",mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),` because\nit already uses reference compression and requires a reference sequence to\ndecode).`),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"MD\"),` tag contains information about deletions (including the bases of the\nreference genome, which would otherwise not be indicated) and mismatches (same,\nindicating the base of the reference genome at a SNPs position), but not\ninsertions.`),mdx(\"h2\",null,\"Detecting SVs from long reads\"),mdx(\"h3\",null,\"What are split alignments?\"),mdx(\"p\",null,`Split alignments, or chimeric-alignments are alignments where part of the read\naligns to perhaps chr1, and part of it maps to perhaps chr4. It is worth\nreading the definition of \"Chimeric alignment\" from SAMv1.pdf (not reproduced\nhere)`),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://samtools.github.io/hts-specs/SAMv1.pdf\"}),\"https://samtools.github.io/hts-specs/SAMv1.pdf\")),mdx(\"p\",null,`There is no limitation on how many splits might occur so the split can align to\n3, 4, or more different places. Each part of the split puts a new line in the\nSAM file. As SAMv1.pdf tells us, one read is marked as \"representative\", I call\nthis the \"primary\" read, while the other components of the split read are maked\nsupplementary, given the 2048 flag (0x80). Only the \"primary\" read generally\nhas a `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\" field (column 10)\"),mdx(\"p\",null,`Split alignments are especially common with long reads, and it can indicate\nthat there may be a structural variant where the two chromosomes are fused\ntogether (which may create gene fusions, or other types of phenomena).`),mdx(\"p\",null,`note: split alignments are different from \"multi-mappers\" where the entire read\nmaps maps equally well to, say, chr4 and chr1. Split reads maps part to chr1,\nand part to chr4`),mdx(\"p\",null,\"See again the SAMv1.pdf for the definition of multi-mapping\"),mdx(\"h3\",null,\"What is the \",mdx(\"inlineCode\",{parentName:\"h3\"},\"SA\"),\" tag?\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag is outputted on each part of the split alignment, e.g. the primary\ncontains an `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),\" tag that refers to all the locations, \",mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` strings, and\nmore for all the supplementary reads, and each of the supplementary reads also\ncontains an `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag that refers to the primary alignment and each other\nsupplementary alignment.`),mdx(\"p\",null,\"Fun fact: The \",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag conceptually can result in a 'quadratic explosion' of\ndata, because each part of the split contains references to every other part.\nFor example, if a read is split into 4 pieces, then each read would would have\nan SA tag with 3 segments, so 3`,\"*\",\"4 segments will be documented in the\",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),\" tag.\"),mdx(\"h3\",null,\"Reconstructing a split alignment given the primary alignment\"),mdx(\"p\",null,`If we are given the the primary alignment of an arbitrary split read, then we\ncan construct what that split looks like compared to the reference genome.`),mdx(\"p\",null,`If we are not given the primary alignment (e.g. we are starting from a\nsupplementary alignment) then we can search the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` list for the one that is\nprimary, because at least one will be.`),mdx(\"p\",null,\"Now that we have the primary alignment, it will have the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),` (of the entire\nread, the supplementary alignments typically have a blank `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\"!) and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),`\ntag containing the `,mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` of all the different parts of the split. We can then\nconstruct how the entire read, not just a particular record of the split\nalignment, compares to the genome. In JBrowse 2 we implemented this and it uses\na synteny-style rendering. This functionality also exists in GenomeRibbon\n(`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://genomeribbon.org\"}),\"https://genomeribbon.org\"),\")\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/linear_alignment.png\",alt:null}))),mdx(\"p\",null,\"Figure showing JBrowse 2 piecing together a long read vs the reference genome from a single read\"),mdx(\"p\",null,\"In order to do this reconstruction, it takes the \",mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` strings of the primary\nalignment and each of the pieces of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag (it is a semi-colon separated\nlist of chunks), sort them by the amount of softclipping (the softclipping\nvalues will progressively trim off more of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),` telling you it aligned\nfurther and further on in the long read), and then this tells me where each\npiece of the split alignment came from in the original `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),`, so we can plot\nthe alignments of the read vs the reference genome using synteny style display.`),mdx(\"h3\",null,\"SAM vs VCF - Breakends vs split alignments\"),mdx(\"p\",null,\"An interesting outcome (to me) is that from a single record in a \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file, I\ncan reconstruct the \"derived\" genome around a region of interest from a single\nread.`),mdx(\"p\",null,\"If I was to try to do this with the \",mdx(\"inlineCode\",{parentName:\"p\"},\"VCF\"),` Breakend specification (section 5.4\nof VCF4.3.pdf), it may actually be more challenging than from a `,mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` read.\nThis is because a Breakend in `,mdx(\"inlineCode\",{parentName:\"p\"},\"VCF\"),` format is only an edge in a graph (and the\nsequences are nodes). Therefore, in order to properly reconstruct a structural\nvariant from a `,mdx(\"inlineCode\",{parentName:\"p\"},\"VCF\"),\" with Breakends, I would have to construct the graph,\"),mdx(\"p\",null,`Now, this has caveats: a single read is noisy and does not contain as aggregate\nevidence as looking at all the reads in a region. But still, interpretation of\nthe `,mdx(\"inlineCode\",{parentName:\"p\"},\"VCF\"),` breakend specification is challenging due to imposing a sequence graph\non the genome, while the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SA\"),` tag remains just a simple set of linear alignments\nthat can easily be pieces together.`),mdx(\"p\",null,`I am not aware of a lot of tools that work on the VCF Breakend graph, and\nexpect more will need to be created to truly work with this standard. An\ninversion for example may create 4 record in the VCF file (see section 5.4 in\nthe VCF4.3.pdf for example), and needs careful interpretation`),mdx(\"h3\",null,\"Haplotype tagged reads\"),mdx(\"p\",null,\"A new trend has been to create \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"BAM\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"CRAM\"),` files with tagged reads,\nwhich tells us which haplotype a read was inferred to have come from. This is\ncommonly done with the `,mdx(\"inlineCode\",{parentName:\"p\"},\"HP\"),\" tag, which might have \",mdx(\"inlineCode\",{parentName:\"p\"},\"HP=0\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"HP=1\"),` for a\ndiploid genome. Tools like `,mdx(\"inlineCode\",{parentName:\"p\"},\"whatshap\"),\" can add these tags to a \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` file, and\nIGV and JBrowse 2 can color and sort by these tags.`),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/color_by_tag.png\",alt:null}))),mdx(\"p\",null,`Screenshot of JBrowse 2 with the \"Color by tag\" and \"Sort by tag\" setting\nenabled (coloring and sorting by the HP tag) letting us see that only one\nhaplotype has a deletion. Tutorial for how to do this in JBrowse 2 here\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag\"}),\"https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag\")),mdx(\"h2\",null,\"How do you detect SVs with paired-end reads?\"),mdx(\"p\",null,`Paired-end reads are short reads, e.g. 150bp each. This makes them unable to\nrecover some large structural variants.`),mdx(\"p\",null,`However, paired-end reads have a number of attributes that can be used to\ndetect paired end reads`),mdx(\"h3\",null,\"Distance between pairs being abnormally large or short\"),mdx(\"p\",null,\"The distance between pairs is encoded by the \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),\" column in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` format.\nThe distance between pairs with good mapping is relatively constant and called\nthe \"insert length\". This comes from how the sequencing is done: paired-end\nsequencing performs sequencing on both ends of a fragment.`),mdx(\"p\",null,`But, if you are mapping reads vs the reference genome, and you observe that\nthey are abnormally far apart, say 50kb apart instead of 1kb apart, this may\nindicate there your sample contains a deletion relative to the reference.`),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/aberrant_size.png\",alt:null}))),mdx(\"p\",null,`Screenshot of JBrowse 1 with \"View as pairs\" enabled, and large insert size\ncolored as red (from `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://jbrowse.org/docs/paired_reads.html\"}),\"https://jbrowse.org/docs/paired_reads.html\"),`). Note that\nsome of JBrowse 1's View as pairs features are not yet available in JBrowse 2`),mdx(\"h3\",null,'An abundance of reads being \"clipped\" at a particular position'),mdx(\"p\",null,`This can indicate that part of the reads map well, but then there was an abrupt\nstop to the mapping. This might mean that there is a sequence that was an\ninsertion at that position, or a deletion, or a translocation.`),mdx(\"p\",null,\"The clipping is indicated by the \",mdx(\"inlineCode\",{parentName:\"p\"},\"CIGAR\"),` string, either at the start or end of\nit by an `,mdx(\"inlineCode\",{parentName:\"p\"},\"S\"),\" or an \",mdx(\"inlineCode\",{parentName:\"p\"},\"H\"),\". The \",mdx(\"inlineCode\",{parentName:\"p\"},\"S\"),` indicates \"soft clipping\", and indicates that\nthe sequence of the clipped portion can be found in the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),` field of the\nprimary alignment. The `,mdx(\"inlineCode\",{parentName:\"p\"},\"H\"),` is hard clipped, and the sequence that is hard\nclipped will not appear in the `,mdx(\"inlineCode\",{parentName:\"p\"},\"SEQ\"),\".\"),mdx(\"p\",null,`You can visualize an excess of clipping in JBrowse 2, which creates an inverted\nhistogram at a particular position`),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/clipping_pileup.png\",alt:null}))),mdx(\"p\",null,'Screenshot of JBrowse 2 showing blue clipping indicator with a \"pileup\" of soft-clipping at a particular position shown in blue.'),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/show_soft_clipping.png\",alt:null}))),mdx(\"p\",null,`Screenshot of JBrowse 2 showing an insertion with both long reads and short\nreads. With long reads, the read may completely span the insertion, so the\nCIGAR string simply indicates a large `,mdx(\"inlineCode\",{parentName:\"p\"},\"I\"),` operator (purple indicator on track),\nbut for short reads, the reads near the insertion will be clipped since they\nwill not properly map to the reference genome. The \"Show soft clipping\" setting\nin JBrowse 2 and IGV can be used to show visually the bases that extend into\nthe insertion (shown on the bottom track).`),mdx(\"h3\",null,\"Unexpected pair orientation\"),mdx(\"p\",null,\"With standard paired end sequencing, the pairs normally point at each other\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`forward reverse\n --->    <---\n`)),mdx(\"p\",null,\"If the stranded-ness of the pair is off, then it could indicate a structural variant\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),`// rnext: rnext column in sam\n// ref: refname column in sam\n// flags: flag integer in sam\n// tlen: tlen column in sam\n// code adapted from IGV\nfunction getPairOrientation(\n  flags: number,\n  ref: string,\n  rnext: string,\n  tlen: number,\n) {\n  // this read is not unmapped &&\n  // this read's mate is also not unmapped &&\n  // this read's mate is on the same reference genome\n  if (!flags & 4 && !flags & 8 && ref === rnext) {\n    const s1 = flags & 16 ? 'R' : 'F'\n    const s2 = flags & 32 ? 'R' : 'F'\n    let o1 = ' '\n    let o2 = ' '\n\n    // if first in pair\n    if (flags & 64) {\n      o1 = '1'\n      o2 = '2'\n    }\n\n    // else if second in pair\n    else if (flags & 128) {\n      o1 = '2'\n      o2 = '1'\n    }\n\n    const tmp = []\n    if (tlen > 0) {\n      tmp[0] = s1\n      tmp[1] = o1\n      tmp[2] = s2\n      tmp[3] = o2\n    } else {\n      tmp[2] = s1\n      tmp[3] = o1\n      tmp[0] = s2\n      tmp[1] = o2\n    }\n    return tmp.join('')\n  }\n  return null\n}\n`)),mdx(\"p\",null,\"If you have standard paired end reads, it will return \",mdx(\"inlineCode\",{parentName:\"p\"},\"FR\"),\" forward-reverse, similar to the text diagram\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`forward reverse\n --->    <---\n`)),mdx(\"p\",null,`This guide from IGV is helpful for interpreting the pair directionality with\npatterns of SVs using \"Color by pair orientation\"`),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"}),\"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\")),mdx(\"p\",null,\"Example of an inverted duplication using JBrowse 2's \",mdx(\"inlineCode\",{parentName:\"p\"},\"Color by pair orientation\"),\" setting (very similar to IGV)\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/inverted_duplication.png\",alt:null}))),mdx(\"p\",null,`Figure: This shows an inverted (tandem) duplication in 1000 genomes data. The\ntandem duplication can produce green arrows which have reads pointing in\nopposite directions e.g. `,mdx(\"inlineCode\",{parentName:\"p\"},\"<--\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"-->\"),`, while blue arrows which can indicate\nan inversion point in the same direction e.g. `,mdx(\"inlineCode\",{parentName:\"p\"},\"-->\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"-->\")),mdx(\"h3\",null,\"Caveat about TLEN\"),mdx(\"p\",null,\"Note that \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),` is a field in the SAM format that is somewhat ill defined,\nat least in the sense that different tools may use it differently\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\"}),\"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\")),mdx(\"p\",null,\"If needed, you can calculate \",mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),` yourself if process the file yourself\n(process all reads, get the actual records for the pairs, and calculate\ndistance) but I have not had trouble with basic usage of tools that rely on the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"TLEN\"),\" from the data files themselves\"),mdx(\"h2\",null,\"Calling copy number variants with your short or long reads\"),mdx(\"p\",null,\"Another type of SV that you can get from your \",mdx(\"inlineCode\",{parentName:\"p\"},\"SAM\"),` files are copy number\nvariants (CNVs). By looking at the depth-of-coverage for your data files, you\ncan look for abnormalities that may indicate copy number variants. By using a\ntool like `,mdx(\"inlineCode\",{parentName:\"p\"},\"mosdepth\"),`, you can quickly get a file showing the coverage across\nthe genome.`),mdx(\"p\",null,`Be aware that if you are comparing the coverage counts from different tools,\nthat they have different defaults that may affect comparison. Some discard\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"QC_FAIL\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"DUP\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"SECONDARY\"),` flagged reads. This is probably appropriate,\nand corresponds to what most genome browsers will display (see\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af\"}),\"https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af\"),` for a short\nsummary of depth calculated from different tools)`),mdx(\"p\",null,`Note that both long and short reads can be used for CNV detection. Long reads\nmay give more accurate measurements also, with their better ability to map\nsmoothly through difficult regions of the genome.`),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/media/coverage_cnv.png\",alt:null}))),mdx(\"p\",null,`Screenshot showing coverage in BigWig format from nanopore reads on normal and\ntumor tissue from a melanoma cancer cell line plotted using JBrowse 2\n(`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://jbrowse.org/code/jb2/v1.6.4/?config=test_data%2Fconfig_demo.json&session=share-MZj3d18lzH&password=3X7bS\"}),\"demo\"),\" and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://jbrowse.org/jb2/docs/user_guide/#viewing-whole-genome-coverage-for-profiling-cnv\"}),\"tutorial\"),\")\"),mdx(\"h2\",null,\"Future of SVs\"),mdx(\"p\",null,`Currently, SV visualization is highly based on comparing data versus a\nreference genome (and the SAM format is a signature of this: it stores data in\nterms of reference genome coordinates). In the future, SV visualization may\nlook more similar to comparative genomics, where we compare the an SV to a\npopulation specific reference or something like this. As cheap de-novo\nassembled genomes and graph genomes are more widespread, the tools and data\nformats may keep evolving to support these use cases.`),mdx(\"h2\",null,\"Conclusion\"),mdx(\"p\",null,`Algorithms that actually call structural variants face many challenges, but\nunderstanding how the reads are encoded in SAM format, and seeing what they\nlook like in the genome browser is a useful first step to gaining a better\nunderstanding.`),mdx(\"p\",null,\"In summary, some of the signatures of SVs may include:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Aberrant insert size (TLEN) detection (longer for deletion, shorter for insertion)\"),mdx(\"li\",{parentName:\"ul\"},\"Split-read detection\"),mdx(\"li\",{parentName:\"ul\"},\"CIGAR string processing (D operator for deletions, I operator for insertions)\"),mdx(\"li\",{parentName:\"ul\"},\"Over-abundance of clipping (S or H operators in CIGAR)\"),mdx(\"li\",{parentName:\"ul\"},\"Depth of coverage changes for CNVs\")),mdx(\"p\",null,\"If you have any ideas that you want to contribute to this blog post let me know!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"How to make your own npm package with typescript","date":"2021-12-31","slug":"2021-12-31-npm-package","mdxSource":{"compiledSource":"var c=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var p=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var s=(a,n,t)=>n in a?c(a,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[n]=t,e=(a,n)=>{for(var t in n||(n={}))p.call(n,t)&&s(a,t,n[t]);if(o)for(var t of o(n))r.call(n,t)&&s(a,t,n[t]);return a},l=(a,n)=>u(a,m(n));var d=(a,n)=>{var t={};for(var i in a)p.call(a,i)&&n.indexOf(i)<0&&(t[i]=a[i]);if(a!=null&&o)for(var i of o(a))n.indexOf(i)<0&&r.call(a,i)&&(t[i]=a[i]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:a}=i,n=d(i,[\"components\"]);return mdx(MDXLayout,l(e(e({},layoutProps),n),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"There is a lot of mystery around making your own \",mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),` package. Every package\nlikely does it a bit differently, and it can be tricky to get a setup you like.\nShould you use a \"starter kit\" or a boilerplate example? Or just roll your own?\nShould you use a bundler? How do you use typescript?`),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"*\",\"Record scratch \",\"*\",\"*\")),mdx(\"p\",null,\"Why don't we try starting from scratch and seeing where we can get?\"),mdx(\"p\",null,`TLDR: here is a github repo with a template package\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cmdcolin/npm-package-tutorial/\"}),\"https://github.com/cmdcolin/npm-package-tutorial/\")),mdx(\"h2\",null,\"Introduction\"),mdx(\"p\",null,\"An \",mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),` package can be very bare bones. In some sense, npmjs.com is just an\narbitrary file host, and you can upload pretty much anything you want to it.`),mdx(\"p\",null,\"The magic is in the package.json file, which tells npm:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"what files are part of your package\"),mdx(\"li\",{parentName:\"ul\"},`what to use as the \"entry point\" (e.g. the file that should be referenced\nwhen you say `,mdx(\"inlineCode\",{parentName:\"li\"},\"const lib = require('mypackage')\"),\")\"),mdx(\"li\",{parentName:\"ul\"},`what pre- and post- processing steps should be done when the package is being\npublished`),mdx(\"li\",{parentName:\"ul\"},\"and more!\")),mdx(\"p\",null,\"Let's try an experiment...\"),mdx(\"h2\",null,\"Initializing a package\"),mdx(\"p\",null,\"Open up a terminal, and run\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`mkdir mypackage\ncd mypackage\ngit init # make mypackage version controlled\nnpm init\n# or\nyarn init\n`)),mdx(\"p\",null,\"This init command outputs something like this, and we accept the defaults\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`This utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee \\`npm help init\\` for definitive documentation on these fields\nand exactly what they do.\n\nUse \\`npm install <pkg>\\` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (mypackage)\nversion: (1.0.0)\ndescription:\nentry point: (index.js)\ntest command:\ngit repository:\nkeywords:\nlicense: (ISC)\nAbout to write to /home/cdiesh/mypackage/package.json:\n\n{\n  \"name\": \"mypackage\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  },\n  \"author\": \"Colin\",\n  \"license\": \"ISC\"\n}\n\n`)),mdx(\"p\",null,\"Then, you can create a file named \",mdx(\"inlineCode\",{parentName:\"p\"},\"index.js\"),` (in your package.json it says\n`,mdx(\"inlineCode\",{parentName:\"p\"},'\"main\": \"index.js\"'),\" to refer to this file, the entrypoint)\"),mdx(\"p\",null,\"In your \",mdx(\"inlineCode\",{parentName:\"p\"},\"index.js\"),` file, generally, you would do things like export a function\nor functions. I will use commonjs exports here for maximum compatibility:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`module.exports = {\n  hello: () => {\n    console.log('hello world')\n  },\n}\n`)),mdx(\"h2\",null,\"Publishing a package\"),mdx(\"p\",null,\"This npm package, \",mdx(\"inlineCode\",{parentName:\"p\"},\"mypackage\"),\" can now be published to \",mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),` with a simple\ncommand.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm publish\n# or\nyarn publish\n`)),mdx(\"p\",null,`This will prompt you for your npmjs.com username, password, email, and if\nneeded, 2FA token (highly recommended)`),mdx(\"h2\",null,\"Using your package after it is published\"),mdx(\"p\",null,`Once it is published, you can use it in your create-react-app app or other npm\npackage.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm install mypackage\n# or\nyarn add mypackage\n`)),mdx(\"p\",null,\"Then you can use\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-js\"}),`import { hello } from 'mypackage'\n`)),mdx(\"p\",null,\"in any of your other codebases\"),mdx(\"h2\",null,\"Summary of the simplest NPM package\"),mdx(\"p\",null,\"This all seems pretty boring thus far but it tells us a couple things\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"packages can be very very bare bones\"),mdx(\"li\",{parentName:\"ol\"},\"no transpiler or bundler is needed for publishing an npm package\"),mdx(\"li\",{parentName:\"ol\"},`our package can consist of a single file and it is uploaded to npm, and the\n\"main\" field in package.json provides an entry point`),mdx(\"li\",{parentName:\"ol\"},`the filename index.js is not special, probably it is a hangover from the\nname index.html. you can use whatever name you want`)),mdx(\"h2\",null,\"Adding typescript\"),mdx(\"p\",null,\"Let's try adding typescript\"),mdx(\"p\",null,`To do this, we will use the typescript compiler to compile a directory of files\nin our \"src\" directory and output the compiled files to a directory named\n\"dist\"`),mdx(\"p\",null,\"To start, let's add typescript\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm install --save-dev typescript\n# or\nyarn add -D typescript\n`)),mdx(\"p\",null,\"Our package.json now will have \",mdx(\"inlineCode\",{parentName:\"p\"},\"typescript\"),\" in it's \",mdx(\"inlineCode\",{parentName:\"p\"},\"devDependencies\"),` (this\nmeans that when someone installs your package, it they don't get typescript as\na dependency, it is just a dependency for while you are developing the library\nlocally).`),mdx(\"p\",null,\"Then we need to create a tsconfig.json for typescript to use\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`yarn tsc --init\n# or\nnpx tsc --init\n`)),mdx(\"p\",null,\"This will generate a \",mdx(\"inlineCode\",{parentName:\"p\"},\"tsconfig.json\"),\" file (needed by \",mdx(\"inlineCode\",{parentName:\"p\"},\"typescript\"),`) with a bunch of\noptions, but I have stripped it down in my projects to look like this`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  \"include\": [\"src\"],\n  \"compilerOptions\": {\n    \"target\": \"es2018\",\n    \"moduleResolution\": \"node\",\n    \"declaration\": true, // generate .d.ts files\n    \"sourceMap\": true, // generate source map\n    \"outDir\": \"dist\", // output compiled js, d.ts, and source map to dist folder\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}\n`)),mdx(\"p\",null,\"Now, we want to change our \",mdx(\"inlineCode\",{parentName:\"p\"},\"js\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"ts\"),\" files to use \",mdx(\"inlineCode\",{parentName:\"p\"},\"typescript\"),`, let's change them\nto use normal ESM import/exports`),mdx(\"p\",null,\"util.ts\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),`export function getMessage() {\n  return 'hello'\n}\n`)),mdx(\"p\",null,\"index.ts\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),`import { getMessage } from './util'\nexport function sayMessage() {\n  console.log(getMessage())\n}\n`)),mdx(\"p\",null,\"And then we will add a \",mdx(\"inlineCode\",{parentName:\"p\"},'\"build\"'),\" script to \",mdx(\"inlineCode\",{parentName:\"p\"},\"package.json\"),` to compile the\nlibrary, and refer to the `,mdx(\"inlineCode\",{parentName:\"p\"},'\"dist\"'),\" directory for the \",mdx(\"inlineCode\",{parentName:\"p\"},'\"files\"'),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},'\"main\"'),`\nfields in `,mdx(\"inlineCode\",{parentName:\"p\"},\"package.json\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  \"name\": \"mypackage\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"src/index.js\",\n  \"files\": [\"dist\"],\n  \"scripts\": {\n    \"build\": \"tsc\"\n  },\n  \"author\": \"Colin\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"typescript\": \"^4.5.4\"\n  }\n}\n`)),mdx(\"p\",null,\"We can now run\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm run build\n# or\nyarn build\n`)),mdx(\"p\",null,\"And this will run the \",mdx(\"inlineCode\",{parentName:\"p\"},'\"build\"'),` script we created, which in turn, just runs\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"tsc\"),\" with no arguments.\"),mdx(\"p\",null,\"You can also add a \",mdx(\"inlineCode\",{parentName:\"p\"},'\"prebuild\"'),` script that clears out the old contents. In fact,\nnpm scripts generalizes the naming system -- you can make scripts with whatever name you want, e.g.`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  \"scripts\": {\n    \"preparty\": \"echo preparty\",\n    \"party\": \"echo party\",\n    \"postparty\": \"echo postparty\"\n  }\n}\n`)),mdx(\"p\",null,\"Then running\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`$ yarn party\npreparty\nparty\npostparty\n`)),mdx(\"p\",null,\"To make this useful, we will use \",mdx(\"inlineCode\",{parentName:\"p\"},\"rimraf\"),` (a node package) to make a\ncross-platform removal of the `,mdx(\"inlineCode\",{parentName:\"p\"},\"dist\"),\" directory\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm install --save-dev rimraf\n# or\nyarn add -D rimraf\n`)),mdx(\"p\",null,\"and then update your package.json\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  ...\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"prebuild\": \"npm run clean\",\n    \"build\": \"tsc\"\n  },\n  \"devDependencies\": {\n    \"rimraf\": \"^3.0.2\",\n    \"typescript\": \"^4.5.4\"\n  }\n}\n`)),mdx(\"p\",null,`We could make it say \"rm -rf dist\" instead of \"rimraf dist\" (e.g. run arbitrary\nshell commands), but rimraf allows it to be cross-platform`),mdx(\"h2\",null,\"Making sure you create a fresh build before you publish\"),mdx(\"p\",null,\"Without extra instructions, your \",mdx(\"inlineCode\",{parentName:\"p\"},\"yarn publish\"),` command would not create a\nfresh build and you could publish an older version that was lingering in the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"dist\"),\" folder.\"),mdx(\"p\",null,\"We can use a \",mdx(\"inlineCode\",{parentName:\"p\"},\"preversion\"),` script that will automatically get invoked when you\nrun `,mdx(\"inlineCode\",{parentName:\"p\"},\"yarn publish\"),\" to make sure you get a fresh build in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"dist\"),` folder\nbefore you publish`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  ...\n  \"scripts\": {\n    ...\n    \"preversion\": \"npm run build\",\n  },\n}\n`)),mdx(\"h2\",null,\"Making sure you push your tag to github after publish\"),mdx(\"p\",null,\"When you run \",mdx(\"inlineCode\",{parentName:\"p\"},\"yarn publish\"),`, npm will automatically create a commit with the\nversion name and a git tag, it `,mdx(\"em\",{parentName:\"p\"},\"will not\"),` automatically push tag to your\nrepository.`),mdx(\"p\",null,\"Add a \",mdx(\"inlineCode\",{parentName:\"p\"},\"postversion\"),\" script that pushes the tag to your repo after your publish\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-json\"}),`{\n  ...\n  \"scripts\": {\n    ...\n    \"postversion\": \"git push --follow-tags\",\n  },\n}\n`)),mdx(\"h2\",null,\"Incremental builds\"),mdx(\"p\",null,\"We can use this to do incremental/watch builds\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`npm run build --watch\n# or\nyarn build --watch\n`)),mdx(\"h2\",null,\"Adding testing with ts-jest\"),mdx(\"p\",null,\"You can use ts-jest to test your code. This involves installing jest, typescript, ts-jest, @types/jest, and then initializing a jest.config.json\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm i -D jest typescript\n# or\nyarn add --dev jest typescript\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npm i -D ts-jest @types/jest\n# or\nyarn add --dev ts-jest @types/jest\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-sh\"}),`npx ts-jest config:init\n# or\nyarn ts-jest config:init\n`)),mdx(\"p\",null,\"We can then create a test\"),mdx(\"p\",null,mdx(\"inlineCode\",{parentName:\"p\"},\"test/util.spec.ts\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-typescript\"}),`import { getMessage } from '../src/util'\ntest('expected message returned', () => {\n  expect(getMessage()).toBe('hello')\n})\n`)),mdx(\"p\",null,\"Then we can then create a script in the package.json that says \",mdx(\"inlineCode\",{parentName:\"p\"},'\"test\": \"jest\"'),\", and then we can say\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`npm run test\n# or\nyarn test\n`)),mdx(\"p\",null,\"You can also create an alternative system where you use \",mdx(\"inlineCode\",{parentName:\"p\"},\"babel-eslint\"),` and\nvarious babel strategies to test your code, but if you are using typescript,\nts-jest+typescript works great.`),mdx(\"h2\",null,\"Add a .gitignore\"),mdx(\"p\",null,\"Create a .gitignore with just a line that references this \",mdx(\"inlineCode\",{parentName:\"p\"},\"dist\"),\" folder and \",mdx(\"inlineCode\",{parentName:\"p\"},\"node_modules\"),\" folder\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),`dist\nnode_modules\n`)),mdx(\"h2\",null,\"The future of ESM modules\"),mdx(\"p\",null,`There is a shift happening where modules are changing to be pure ESM rather\nthan keeping commonjs equivalents`),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\"}),\"https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\")),mdx(\"p\",null,`There are many challenges here, and will not be discussed, but it may be a\nuseful further reading page`),mdx(\"h2\",null,\"Conclusion\"),mdx(\"p\",null,`This tutorial shows you how you can create a basic package that you can publish\nto `,mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),\". This little boilerplate includes these features:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Makes clean build when running \",mdx(\"inlineCode\",{parentName:\"li\"},\"yarn build\"),\" or \",mdx(\"inlineCode\",{parentName:\"li\"},\"yarn publish\")),mdx(\"li\",{parentName:\"ul\"},\"Pushes to github after publish\"),mdx(\"li\",{parentName:\"ul\"},\"Uses ts-jest for testing\"),mdx(\"li\",{parentName:\"ul\"},\"Uses esm modules\")),mdx(\"p\",null,`You also have full control, and understand the decisions we took to get to this\npoint. This package does not use any bundling (rollup or webpack or otherwise).\nIt just uses `,mdx(\"inlineCode\",{parentName:\"p\"},\"tsc\"),\" is used to compile the files to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"dist\"),` folder, and the\ndist folder is published to `,mdx(\"inlineCode\",{parentName:\"p\"},\"npm\"),`! If you need your package to be usable by\nconsumers that don't themselves use bundlers, consider looking into `,mdx(\"inlineCode\",{parentName:\"p\"},'<script type=\"module\">'),` for importing ESM modules in the browser, or you can bundle\nyour library using rollup or webpack and output e.g. a UMD bundle`),mdx(\"h2\",null,\"Final product\"),mdx(\"p\",null,\"See \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cmdcolin/npm-package-tutorial/\"}),\"https://github.com/cmdcolin/npm-package-tutorial/\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"My next.js static blog setup","date":"2021-12-26","slug":"2021-12-26-nextjs","mdxSource":{"compiledSource":"var d=Object.defineProperty,h=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var r=(t,a,i)=>a in t?d(t,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[a]=i,e=(t,a)=>{for(var i in a||(a={}))s.call(a,i)&&r(t,i,a[i]);if(o)for(var i of o(a))l.call(a,i)&&r(t,i,a[i]);return t},p=(t,a)=>h(t,c(a));var m=(t,a)=>{var i={};for(var n in t)s.call(t,n)&&a.indexOf(n)<0&&(i[n]=t[n]);if(t!=null&&o)for(var n of o(t))a.indexOf(n)<0&&l.call(t,n)&&(i[n]=t[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:t}=n,a=m(n,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`My personal homepage originally used statocles, a perl-based static site\ngenerator (`,mdx(\"a\",e({parentName:\"p\"},{href:\"http://preaction.me/statocles/\"}),\"http://preaction.me/statocles/\"),`). I didn't really blog using it, just\na homepage for myself plus some links to my tumblr blog. But, if I linked\npeople to the tumblr blog directly, it would give people terrible popup ads and\ntrackers. So, I switched to github pages+next.js this year. I considered a\nnumber of alternative static site systems, but next.js seemed to hit some nice\ngoals`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Flexible\"),mdx(\"li\",{parentName:\"ul\"},\"React-based (as opposed to template-based like jekyll, eleventy, etc.)\"),mdx(\"li\",{parentName:\"ul\"},\"Markdown driven, and can use MDX\"),mdx(\"li\",{parentName:\"ul\"},\"RSS feed (bonus)\"),mdx(\"li\",{parentName:\"ul\"},\"Active community\")),mdx(\"p\",null,\"Other systems almost worked and were attempted but aborted\"),mdx(\"h3\",null,\"First and second iterations\"),mdx(\"p\",null,\"The first iteration of my next.js blog\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},`I put every blog post in the \"pages\" folder. This worked ok but I had to\nmanually edit the index.mdx file to have long lists of stuff like this\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"![link to new blogpost](manually_inserted_link_here)\"))),mdx(\"p\",null,`The second iteration, I wanted to automatically generate a list of recent\nblogposts from files on disk`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`I used the next.js \"blog-template-typescript\" example folder from their\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\"}),\"monorepo\"),\".\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"The new blog posts are generated from markdown files in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"_posts\"),` folder,\nand get rendered by the file `,mdx(\"inlineCode\",{parentName:\"p\"},\"pages/posts/[slug].tsx\"),` (yes, the filename\nincludes square brackets).`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"getAllPosts in\",mdx(\"br\",{parentName:\"p\"}),`\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cmdcolin/cmdcolin.github.io/blob/master/lib/api.ts\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"lib/api.ts\")),`\ngets a listing of the files in `,\"_\",\"posts folder, which I can call from the \",mdx(\"inlineCode\",{parentName:\"p\"},\"getStaticProps\"),\" method on next.js pages\"))),mdx(\"h3\",null,\"Stripping off unnecessary stuff from blog-starter-typescript\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"blog-starter-typescript\"),` template has many tiny components, I removed some\nof them to make it easier for me to orient myself`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript/components\"}),\"theirs\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/cmdcolin/cmdcolin.github.io/tree/master/components\"}),\"mine\"))),mdx(\"h3\",null,\"Removing tailwind CSS\"),mdx(\"p\",null,\"The \",mdx(\"inlineCode\",{parentName:\"p\"},\"blog-starter-typescript\"),` template uses tailwind CSS and uses \"modern web design\" (aka:\ngigantic \"tiles\" instead of links, images that are way too large, etc)`),mdx(\"p\",null,`I started making a more basic design. I tried to roll with the tailwind CSS for\na bit, but ended up removing it entirely.`),mdx(\"p\",null,\"Tailwind CSS is sort of like a CSS-in-JS system, except every CSS attribute is encoded in a CSS classname. For example, here are some tailwind CSS snippets\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-html\"}),`<div className=\"container mx-auto px-5\"></div>\n<footer className=\"bg-accent-1 border-t border-accent-2\"></footer>\n<div className=\"max-w-1xl mx-auto\"></div>\n<div className=\"min-h-screen\"></div>\n<a className=\"hover:underline\"></a>\n<h1\n  className=\"text-2xl md:text-2xl lg:text-2xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left\"\n></h1>\n`)),mdx(\"p\",null,`They claim this is better than using external CSS (see comparison here\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://tailwindcss.com/docs/utility-first\"}),\"https://tailwindcss.com/docs/utility-first\"),`) but it is yet another language to\nlearn, and kind of tricky.`),mdx(\"p\",null,`But, the reason I gave up with tailwind is actually because tailwind CSS resets\na lot of HTML styles so things like `,mdx(\"inlineCode\",{parentName:\"p\"},\"<h1>\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"<h2>\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"<ul>\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"<li>\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"<a>\"),` have\nno styling at all. This is done by `,mdx(\"inlineCode\",{parentName:\"p\"},\"tailwind preflight\"),`\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://tailwindcss.com/docs/preflight\"}),\"https://tailwindcss.com/docs/preflight\"),` (which you can disable, but it is\nenabled by default)`),mdx(\"p\",null,`Stackoverflow has some ways to help restore styling and keep preflight, but it\nstill struck me as odd. Examples`),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/a/68853223/2129219\"}),\"Example: you have to manually restore underlines on \",mdx(\"inlineCode\",{parentName:\"a\"},\"<a>\"),\" elements if using tailwind XSS\"))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://stackoverflow.com/questions/69264976/cant-display-markdown-on-nextjs\"}),`Another example: \"It looks like you're using TailwindCSS, the default\nstyles for elements are reset, that's why the h1 text will look like any other\ntext.\"`))),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},mdx(\"a\",e({parentName:\"p\"},{href:\"https://raw.githubusercontent.com/vercel/next.js/canary/examples/blog-starter-typescript/components/markdown-styles.module.css\"}),\"Another example \",mdx(\"inlineCode\",{parentName:\"a\"},\"blog-template-typescript\"),` uses this file to try to style\nthe markdown using some general\nstyles`)))),mdx(\"p\",null,`To me it was surprising the extend that tailwind goes to unstyle the default\nbrowser styles, removing \"idiomatic HTML\" styles, so I removed tailwind for\nnow. Perhaps I'll return to it another time`),mdx(\"h2\",null,\"Using MDX for blogposts in next.js\"),mdx(\"p\",null,\"In the template from next.js team, the \",mdx(\"inlineCode\",{parentName:\"p\"},\"blog-template-typescript\"),`, it uses a\nfairly simple `,mdx(\"inlineCode\",{parentName:\"p\"},\"lib/markdownToHtml.ts\"),` function right in the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"pages/posts/[slug].tsx\"),` file (the markdown is statically pre-rendered in the\ntrue static blog sense, using the getStaticProps function). This is,\nunfortunately, over-simplified for the MDX case, because MDX properly needs to\nhydrate the components using react on the client side also`),mdx(\"p\",null,\"To fix, the module \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/hashicorp/next-mdx-remote\"}),\"https://github.com/hashicorp/next-mdx-remote\"),` offers a way to\nload actual MDX files.`),mdx(\"h2\",null,\"Adding syntax highlighting the next.js code snippets\"),mdx(\"p\",null,`There are a couple results from google about how to add syntax highlighting to\nnext.js but I still found it difficult.`),mdx(\"p\",null,`My method ended up a bit different where I manually included the prism JS and\nCSS from a CDN essentially and it worked`),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15\"}),\"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15\")),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17\"}),\"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17\")),mdx(\"p\",null,`Other methods e.g. adding react-prism in next.config.js (like\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/mikeesto/next-mdx-prism-example\"}),\"https://github.com/mikeesto/next-mdx-prism-example\"),` does) I think clashed with\nMDXRemote perhaps, or maybe I was tussling with tailwind CSS too much to make a\nclear thought out of it, but syntax blocks on my blogposts should now be\nproperly highlighted`),mdx(\"h2\",null,\"RSS feed\"),mdx(\"p\",null,`I also followed this great guide to add a RSS file for next.js\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site\"}),\"https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site\")),mdx(\"p\",null,`Link here, for your feed readers\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://cmdcolin.github.io/rss.xml\"}),\"https://cmdcolin.github.io/rss.xml\")),mdx(\"p\",null,`Not many people may use RSS much anymore, but I do use it (via feedly), and I\nlove music blogs that keep posting on blogspot year after year, and the\noccasional programming post is nice too`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"A spooky error when you have a string bigger than 512MB in Chrome","date":"2021-10-30","slug":"2021-10-30-spooky","mdxSource":{"compiledSource":"var h=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var s=(e,t,o)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,a=(e,t)=>{for(var o in t||(t={}))r.call(t,o)&&s(e,o,t[o]);if(p)for(var o of p(t))i.call(t,o)&&s(e,o,t[o]);return e},l=(e,t)=>d(e,u(t));var c=(e,t)=>{var o={};for(var n in e)r.call(e,n)&&t.indexOf(n)<0&&(o[n]=e[n]);if(e!=null&&p)for(var n of p(e))t.indexOf(n)<0&&i.call(e,n)&&(o[n]=e[n]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var n=o,{components:e}=n,t=c(n,[\"components\"]);return mdx(MDXLayout,l(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Now gather round for a spooky story\"),mdx(\"p\",null,`Late one night... in the haunted office space castle (hindenbugs cackling in\nthe background amongst the dusty technical books) the midnight candles were\nburning bright and we entered data for a user file`),mdx(\"p\",null,`A simple 52MB gzipped datafile that we want to process in the browser. We unzip\nit, decode it, and ...an error`),mdx(\"p\",null,\"ERROR: data not found\"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"/media/pumpkin-dark.jpg\",alt:null}))),mdx(\"p\",null,'But... our code is so simple (we of course abide by the religion of writing \"simple code\" you know)...what could be happening?'),mdx(\"p\",null,\"The code looks like this\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),`const buf = unzip(file)\nconst str = new TextDecoder().decode(buf)\n`)),mdx(\"p\",null,\"We trace it back and run a console.log(str)\"),mdx(\"p\",null,\"It looks empty. We try running console.log(str.length) ... it prints out 0\"),mdx(\"p\",null,\"But if we console.log(buffer.length) we get 546,483,710 bytes...\"),mdx(\"p\",null,\"What could be happening?\"),mdx(\"p\",null,'We see in the TextDecoder documentation that it has a note called \"fatal\". We try'),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),`const buf = unzip(file)\nconst str = new TextDecoder('utf8', { fatal: true }).decode(buf)\n`)),mdx(\"p\",null,\"This doesn't change the results though\"),mdx(\"p\",null,`Then it dawns on us while the lightning hits and the thunderclap booms and the\nwind blows through the rattly windows`),mdx(\"p\",null,\"We have hit...the maximum string length in Chrome\"),mdx(\"p\",null,\"BWAHAHAHAHA\"),mdx(\"p\",null,\"The maximum string length!!! Nooooooo\"),mdx(\"p\",null,\"It is 512MB on the dot... 536,870,888 bytes. We test this to be sure\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-js\"}),`const len = 536_870_888\nconst buf = new Uint8Array(len)\nfor (let i = 0; i < len; i++) {\n  buf[i] = 'a'.charCodeAt(0)\n}\nconst str = new TextDecoder().decode(buf)\nconsole.log(str.length)\n`)),mdx(\"p\",null,\"This is correct, outputs 536,870,888\"),mdx(\"p\",null,\"With anything, even one byte more, it fails and outputs 0\"),mdx(\"p\",null,\"happy halloween!!\"),mdx(\"p\",null,\"pumpkin photo source: \",mdx(\"a\",a({parentName:\"p\"},{href:\"http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html\"}),\"http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html\")),mdx(\"p\",null,\"chrome 95 tested\"),mdx(\"p\",null,\"nodejs 15 - at 512MB+1 bytes it prints an error message \",mdx(\"inlineCode\",{parentName:\"p\"},\"Error: Cannot create a string longer than 0x1fffffe8 characters\"),` for significantly greater than 512MB\ne.g. 600MB it actually prints a different error `,mdx(\"inlineCode\",{parentName:\"p\"},\"TypeError [ERR_ENCODING_INVALID_ENCODED_DATA]: The encoded data was not valid for encoding utf-8\"),\")\"),mdx(\"p\",null,'firefox 93 - goes up to ~1GB but then gives Exception { name: \"NS_ERROR_OUT_OF_MEMORY\", message: \"\", result: 2147942414'),mdx(\"p\",null,\"midori 6 (safari-alike/webkit) - goes up to ~2GB fine! will have to test more\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Jest parallelization, globals, mocks, and squawkless tests","date":"2021-10-05","slug":"2021-10-05-jest","mdxSource":{"compiledSource":"var p=Object.defineProperty,h=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var i=(e,t,o)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,r=(e,t)=>{for(var o in t||(t={}))n.call(t,o)&&i(e,o,t[o]);if(a)for(var o of a(t))l.call(t,o)&&i(e,o,t[o]);return e},c=(e,t)=>h(e,m(t));var u=(e,t)=>{var o={};for(var s in e)n.call(e,s)&&t.indexOf(s)<0&&(o[s]=e[s]);if(e!=null&&a)for(var s of a(e))t.indexOf(s)<0&&l.call(e,s)&&(o[s]=e[s]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var s=o,{components:e}=s,t=u(s,[\"components\"]);return mdx(MDXLayout,c(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`I found that there is a little bit of confusion and misunderstanding around how\nthings like parallelization work in jest, which sometimes leads to additional\nhacking around problems that may not exist or speculating incorrectly about\ntest failure. This is also of course a point of concern when you have code that\nfor some reason or another uses global variables. Here are a short summary of\nthings that may cause confusion.`),mdx(\"h2\",null,\"Tests in a single file are NOT run in parallel\"),mdx(\"p\",null,`Simple example, the global variable r is included in the test condition, but it\nis accurately run in all cases because the tests are not run in parallel.`),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`let r = 0\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\ndescribe('tests', () => {\n  it('t1', async () => {\n    await timeout(1000)\n    expect(r).toBe(0)\n    r++\n  })\n  it('t2', async () => {\n    await timeout(1000)\n    expect(r).toBe(1)\n    r++\n  })\n  it('t3', async () => {\n    await timeout(1000)\n    expect(r).toBe(2)\n    r++\n  })\n})\n`)),mdx(\"p\",null,`This test will take 3 seconds, and will accurately count the global variable.\nIf it was in parallel, it may only take 1 second, and would inaccurately count\nthe global variable due to race conditions`),mdx(\"h2\",null,\"Tests in different files ARE run in parallel\"),mdx(\"p\",null,`Let's take another example where we use a global variable, and then two\ndifferent tests use the global variable.`),mdx(\"p\",null,\"file_using_some_globals.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`let myGlobal = 0\n\nexport function doStuff() {\n  myGlobal++\n  return myGlobal\n}\n\nexport function resetMyGlobal() {\n  myGlobal = 0\n}\n\nexport function timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n`)),mdx(\"p\",null,\"test_global_vars1.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`import { doStuff, timeout } from './dostuff'\ntest('file1', async () => {\n  doStuff()\n  await timeout(1000)\n  expect(doStuff()).toEqual(2)\n})\n`)),mdx(\"p\",null,\"test_global_vars2.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`import { doStuff, timeout } from './dostuff'\n\ntest('file1', async () => {\n  await timeout(1000)\n  expect(doStuff()).toEqual(1)\n})\n`)),mdx(\"p\",null,`This test completes in less than 2 seconds, and these tests are run in\nparallel. They use different instances of the global state, and therefore have\nno worries with colliding their state.`),mdx(\"h2\",null,\"Does a mock from one test affect another test?\"),mdx(\"p\",null,`While seeking the fabled \"squawk-less\" test, it is often useful to mock console\nso that tests that produce an expected error don't actually print an error\nmessage. However, if not done carefully, you will remove errors across tests`),mdx(\"p\",null,`So, could a mock from one test affect another test? If it's in the same file,\nyes!`),mdx(\"p\",null,\"mock_console.test.js\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`test('test1', () => {\n  console.error = jest.fn()\n  console.error('wow')\n  expect(console.error).toHaveBeenCalled()\n})\n\ntest('test2', () => {\n  // this console.error will not appear because test1 mocked away console.error\n  // without restoring it\n  console.error(\"Help I can't see!\")\n})\n`)),mdx(\"p\",null,`To properly mock these, you should restore the console mock at the end of your\nfunction`),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-js\"}),`test('test1', () => {\n  const orig = console.error\n  console.error = jest.fn()\n  console.error('I should not see this!')\n  expect(console.error).toHaveBeenCalled()\n  console.error = orig\n})\n\ntest('test2', () => {\n  const consoleMock = jest.spyOn(console, 'error').mockImplementation()\n  console.error('I should not see this!')\n  consoleMock.mockRestore()\n})\n\ntest('test3', () => {\n  console.error('I should see this error!')\n})\n`)),mdx(\"h2\",null,\"Add-on: Achieve squawkless tests!\"),mdx(\"p\",null,`Your test output should just be a big list of PASS statements, not interleaved\nwith console.error outputs from when you are testing error conditions of your\ncode`),mdx(\"p\",null,`\"Squawkless tests\" is a term I made up, but it means that if you have code\nunder test that prints some errors to the console, then mock the console.error\nfunction, as in the previous section. Don't stand for having a bunch of verbose\nerrors in your CI logs! However, I also suggest only mocking out console.error\nfor tests that are `,mdx(\"strong\",{parentName:\"p\"},\"expected\"),` to have errors, lest you paper over unexpected\nerrors.`),mdx(\"p\",null,mdx(\"img\",r({parentName:\"p\"},{src:\"/media/squawkless_tests.png\",alt:null}))),mdx(\"p\",null,\"Figure: a nice clean test suite without a bunch of crazy console.error outputs\"),mdx(\"h2\",null,\"Conclusion\"),mdx(\"p\",null,`Getting better at testing requires exercise, and understanding the basics of\nyour tools can help! Hopefully this helps you achieve a better understanding\nand write cleaner jest tests.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Decrease your idle CPU usage when developing typescript apps with this one weird environment variable","date":"2021-09-05","slug":"2021-09-05-typescript","mdxSource":{"compiledSource":"var l=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(e,t,s)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,i=(e,t)=>{for(var s in t||(t={}))n.call(t,s)&&p(e,s,t[s]);if(o)for(var s of o(t))r.call(t,s)&&p(e,s,t[s]);return e},h=(e,t)=>u(e,m(t));var c=(e,t)=>{var s={};for(var a in e)n.call(e,a)&&t.indexOf(a)<0&&(s[a]=e[a]);if(e!=null&&o)for(var a of o(e))t.indexOf(a)<0&&r.call(e,a)&&(s[a]=e[a]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var a=s,{components:e}=a,t=c(a,[\"components\"]);return mdx(MDXLayout,h(i(i({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"TL;DR:\"),mdx(\"p\",null,\"add this to your bashrc\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{}),`export TSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling\n`)),mdx(\"hr\",null),mdx(\"p\",null,`By default, the typescript watcher configuration e.g. tsc --watch or whatever\nis run internally to a create-react-app typescript app (I see it in the process\nmanager as fork-ts-checker-webpack-plugin cpu usage) can have high idling\n(doing nothing...) CPU usage`),mdx(\"p\",null,`This is because the default configuration polls for file changes (constantly\nasks the computer if there are changes every 250ms or so). There is an\nalternative configuration for this to change it to a file watcher so it\nreceives file system notifications on file change. There is discussion here on\nthis.`),mdx(\"p\",null,`The main summary is that a env variable set to\nTSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling allows this`),mdx(\"p\",null,mdx(\"a\",i({parentName:\"p\"},{href:\"https://github.com/microsoft/TypeScript/issues/31048\"}),\"https://github.com/microsoft/TypeScript/issues/31048\")),mdx(\"p\",null,`The issue thread shows that it can go from roughly ~7% idle CPU usage to 0.2%.\nThis corresponds with what I see too after applying this! Detailed docs for\ntypescript discuss some of the reasoning behing not making this the default`),mdx(\"p\",null,mdx(\"a\",i({parentName:\"p\"},{href:\"https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/Configuring%20Watch.md#background\"}),\"https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/Configuring%20Watch.md#background\")),mdx(\"p\",null,`It claims that some OS specific behaviors of file watching could be harmful to\nmaking it the default. For example, that (maybe?) on linux, it may use a large\nnumber of file watchers which can exceed notify handles (this is a setting I\ncommonly have to increase in linux, guide here\n`,mdx(\"a\",i({parentName:\"p\"},{href:\"https://dev.to/rubiin/ubuntu-increase-inotify-watcher-file-watch-limit-kf4\"}),\"https://dev.to/rubiin/ubuntu-increase-inotify-watcher-file-watch-limit-kf4\"),\")\"),mdx(\"p\",null,\"PS: if you have a package.json of a \",mdx(\"inlineCode\",{parentName:\"p\"},\"create-react-app --template typescript\"),` or\nsomething like this then you can edit the package.json to apply this\nautomatically`),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{}),`-\"start\": \"react-scripts start\"\n+\"start\": \"cross-env TSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling react-scripts start\"\n`)),mdx(\"p\",null,`Phew. I can already feel my laptop running cooler...or at least I can sleep\nmore soundly knowing that my readers adopt this and save some CPU cycles for\nplanet earth...and hopefully don't run into any of the caveats`),mdx(\"p\",null,`Edit: It may be worth it to note, the 'UseFsEvents' part of this uses the\nnode.js fs.watch API and the polling based API is based on fs.watchFile`),mdx(\"p\",null,`Fun table of how the watchers are implemented on different OSs\n[`,mdx(\"a\",i({parentName:\"p\"},{href:\"https://github.com/microsoft/TypeScript/issues/31048#issuecomment-495483957\"}),\"1\"),\"]\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{}),`On Linux systems, this uses inotify(7).\nOn BSD systems, this uses kqueue(2).\nOn macOS, this uses kqueue(2) for files and FSEvents for directories.\nOn SunOS systems (including Solaris and SmartOS), this uses event ports.\nOn Windows systems, this feature depends on ReadDirectoryChangesW.\nOn Aix systems, this feature depends on AHAFS, which must be enabled.\n`)),mdx(\"p\",null,`And in general, these should all respond more or less the same, but there are\nsmall corner cases that are discussed\n`,mdx(\"a\",i({parentName:\"p\"},{href:\"https://nodejs.org/docs/latest/api/fs.html#fs_availability\"}),\"https://nodejs.org/docs/latest/api/fs.html#fs_availability\")),mdx(\"p\",null,`Disclaimer: it may be worth reading the reasons that typescript does not have\nthis enabled by default before pushing this into your dev environment and all\nyour teammates, but as far as I could tell, it seems ok!`))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"An amazing error message if you put more than 2^24 items in a JS Map object","date":"2021-08-15","slug":"2021-08-15-map-limit","mdxSource":{"compiledSource":"var l=Object.defineProperty,d=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var s=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var m=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))r.call(t,a)&&m(e,a,t[a]);if(s)for(var a of s(t))n.call(t,a)&&m(e,a,t[a]);return e},h=(e,t)=>d(e,u(t));var p=(e,t)=>{var a={};for(var i in e)r.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(e!=null&&s)for(var i of s(e))t.indexOf(i)<0&&n.call(e,i)&&(a[i]=e[i]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var i=a,{components:e}=i,t=p(i,[\"components\"]);return mdx(MDXLayout,h(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`One of the fun things about working with big data is that you can often hit\nweird limits with a system.`),mdx(\"p\",null,`I was personally trying to load every 'common' single nucleotide polymorphism\nfor the human genome into memory (dbSNP), of which there are over 37 million\nentries (there are many more uncommon ones) for the purposes of making a custom\nsearch index for them `,\"[1]\",\".\"),mdx(\"p\",null,`Turns out, you may run into some hard limits. Note that these are all V8-isms\nand may not apply to all browsers or engines (I was using node.js for this)`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{}),`const myObject = new Map();\nfor (let i = 0; i <= 50_000_000; i++) {\n  myObject.set(i,i);\n  if(i%100000==0) { console.log(i) }\n}\n`)),mdx(\"p\",null,\"This will crash after adding approx 16.7M elements and say\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{}),`0\n100000\n200000\n...\n16400000\n16500000\n16600000\n16700000\n\nUncaught RangeError: Value undefined out of range for undefined options\nproperty undefined\n`)),mdx(\"p\",null,`That is a very weird error message. It says \\u201Cundefined\\u201D three times! Much\nbetter than your usual \\u201CTypeError: Can\\u2019t find property \\u2018lol\\u2019 of undefined\\u201D. See\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://bugs.chromium.org/p/v8/issues/detail?id=11852\"}),\"https://bugs.chromium.org/p/v8/issues/detail?id=11852\"),` for a bug filed to help\nimprove the error message perhaps.`),mdx(\"p\",null,\"Now, also interestingly enough, if you use an Object instead of a Map\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const myObject = {};\nfor (let i = 0; i <= 50_000_000; i++) {\n  myObject['myobj_\\u2019+i]=i;\n  if(i%100000==0) { console.log(i) }\n}\n`)),mdx(\"p\",null,\"Then it will print\\u2026.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{}),`0\n100000\n200000\n...\n8000000\n8100000\n8200000\n8300000\n`)),mdx(\"p\",null,`And it will actually just hang there\\u2026frozen\\u2026no error message though! And it is\nfailing at ~8.3M elements. Weird right? This is roughly half the amount of\nelements as the 16.7M case`),mdx(\"p\",null,\"Turns out there is a precise hard limit for the Map case\"),mdx(\"p\",null,\"For the Map: 2^24=16,777,216\"),mdx(\"p\",null,`For the Object it is around 2^23=8,388,608 HOWEVER, I can actually add more\nthan this, e.g. I can add 8,388,609 or 8,388,610 or even more, but the\noperations start taking forever to run, e.g. 8,388,999 was taking many minutes`),mdx(\"p\",null,`Very weird stuff! If you expected me to dig into this and explain it in deep\ntechnical detail, well, you\\u2019d be wrong. I am lazy. However, this helpful post\non stackoverflow by a V8 js engine developer clarifies the Map case!!\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map\"}),\"https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map\")),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{}),`V8 developer here. I can confirm that 2^24 is the maximum number of entries in\na Map. That\\u2019s not a bug, it\\u2019s just the implementation-defined limit.\n\nThe limit is determined by:\n\nThe FixedArray backing store of the Map has a maximum size of 1GB (independent\nof the overall heap size limit) On a 64-bit system that means 1GB / 8B = 2^30 /\n2^3 = 2^27 ~= 134M maximum elements per FixedArray A Map needs 3 elements per\nentry (key, value, next bucket link), and has a maximum load factor of 50% (to\navoid the slowdown caused by many bucket collisions), and its capacity must be\na power of 2. 2^27 / (3 * 2) rounded down to the next power of 2 is 2^24, which\nis the limit you observe.  FWIW, there are limits to everything: besides the\nmaximum heap size, there\\u2019s a maximum String length, a maximum Array length, a\nmaximum ArrayBuffer length, a maximum BigInt size, a maximum stack size, etc.\nAny one of those limits is potentially debatable, and sometimes it makes sense\nto raise them, but the limits as such will remain. Off the top of my head I\ndon\\u2019t know what it would take to bump this particular limit by, say, a factor\nof two \\u2013 and I also don\\u2019t know whether a factor of two would be enough to\nsatisfy your expectations.\n\n`)),mdx(\"p\",null,`Great details there. It would also be good to know what the behavior is for the\nObject, which has those 100% CPU stalls after ~8.3M, but not the same error\nmessage...`),mdx(\"p\",null,`Another fun note: if I modify the Object code to use only \\u201Cinteger IDs\\u201D the\ncode actually works fine, does not hit any errors, and is \\u201Cblazingly fast\\u201D as\nthe kids call it`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const myObject = {}\nfor (let i = 0; i <= 50_000_000; i++) {\n  myObject[i] = i\n  if (i % 100000 == 0) {\n    console.log(i)\n  }\n}\n`)),mdx(\"p\",null,`I presume that this code works because it detects that I\\u2019m using it like an\narray and it decides to transform how it is working internally and not use a\nhash-map-style data structure, so does not hit a limit. There is a slightly\nhigher limit though, e.g. 1 billion elements gives \\u201CUncaught RangeError:\nInvalid array length\\u201D`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-js\"}),`const myObject = {}\nfor (let i = 0; i <= 1_000_000_000; i++) {\n  myObject[i] = i\n  if (i % 100000 == 0) {\n    console.log(i)\n  }\n}\n`)),mdx(\"p\",null,`This has been another episode of ....the twilight zone (other episodes\ncatalogued here) `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/cmdcolin/technical_oddities/\"}),\"https://github.com/cmdcolin/technical_oddities/\")),mdx(\"p\",null,\"[1]\",` The final product of this adventure was this, to create a search index for\na large number of elements `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/GMOD/ixixx-js\"}),\"https://github.com/GMOD/ixixx-js\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Do you understand your NPM dependencies?","date":"2021-07-27","slug":"2021-07-27-npm-dependencies","mdxSource":{"compiledSource":"var y=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var u=(e,a,o)=>a in e?y(e,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[a]=o,t=(e,a)=>{for(var o in a||(a={}))r.call(a,o)&&u(e,o,a[o]);if(n)for(var o of n(a))l.call(a,o)&&u(e,o,a[o]);return e},s=(e,a)=>m(e,d(a));var p=(e,a)=>{var o={};for(var i in e)r.call(e,i)&&a.indexOf(i)<0&&(o[i]=e[i]);if(e!=null&&n)for(var i of n(e))a.indexOf(i)<0&&l.call(e,i)&&(o[i]=e[i]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var i=o,{components:e}=i,a=p(i,[\"components\"]);return mdx(MDXLayout,s(t(t({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`You are writing a library...or you are writing an app and you want to publish\nsome of the components of it as a library...`),mdx(\"p\",null,\"Here are some questions in the form of comments\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`Did you realize that your yarn.lock will be ignored for anyone who installs\nyour libraries?`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`Did you realize this means that your perfectly running test suite with your\nyarn.lock could be a failing case for consumers of your app unless you don\\u2019t\nuse semver strings like ^1.0.0 and just hardcode it to 1.0.0?`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`Did you realize the default of ^1.0.0 automatically gets minor version bumps\nwhich are often fairly substantial changes, e.g. even breaking possibly?`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`Did you know that larger libraries like @material-ui/core don\\u2019t like to bump\ntheir major version all the time for example so large changes are often made\nto the minor version?`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Did you know if you run \",mdx(\"inlineCode\",{parentName:\"p\"},\"yarn upgrade\"),`, it may update what is in your\nyarn.lock file but will not update what is in your package.json?`)),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},`Did you realize that this means that if you depend on the results of running\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"yarn upgrade\"),` e.g. it gave you a bugfix, you will be shipping buggy code to\nconsumers of your library?`))),mdx(\"p\",null,`Just something to be aware of! You can always ride the dragon and accept these\nminor breakages from semver bumps, but it can introduce some issues for your\nconsumers`),mdx(\"p\",null,`Random fun thing: Adding a yarn package can even downgrade some other packages.\nFor example if you have ^6.0.0 in your package.json, you yarn upgrade it so in\nthe lockfile it says 6.1.0 but then later install another library that requires\na hard 6.0.1, yarn will decide to downgrade you to 6.0.1 (it will not have a\nduplicate entry in yarn.lock, just that the 6.1.0 in the yarn.lock will\ndowngrade to 6.0.1)`))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}