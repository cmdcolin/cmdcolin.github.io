{"pageProps":{"post":{"title":"Do you understand your NPM dependencies?","date":"2021-07-27","slug":"2021-07-27-npm-dependencies","content":"<p>You are writing a library...or your writing an app and you want to publish some\nof the components of it as a library...</p>\n<p>Here are some questions in the form of comments</p>\n<ul>\n<li>\n<p>Did you realize that your yarn.lock will be ignored for anyone who installs\nyour libraries?</p>\n</li>\n<li>\n<p>Did you realize this means that your perfectly running test suite with your\nyarn.lock could be a failing case for consumers of your app unless you don’t\nuse semver strings like ^1.0.0 and just hardcode it to 1.0.0?</p>\n</li>\n<li>\n<p>Did you realize the default of ^1.0.0 automatically gets minor version bumps\nwhich are often fairly substantial changes, e.g. even breaking possibly?</p>\n</li>\n<li>\n<p>Did you know that larger libraries like @material-ui/core don’t like to bump\ntheir major version all the time for example so large changes are often made\nto the minor version?</p>\n</li>\n<li>\n<p>Did you know if you run <code>yarn upgrade</code>, it may update what is in your yarn.lock file but will not update what is in your package.json?</p>\n</li>\n<li>\n<p>Did you realize that this means that if you depend on the results of running <code>yarn upgrade</code> e.g. it gave you a bugfix, you will be shipping buggy code to consumers of your library?</p>\n</li>\n</ul>\n<p>Just something to be aware of! You can always ride the dragon and accept these\nminor breakages from semver bumps, but it can introduce some issues for your\nconsumers</p>\n<p>Random fun thing: Adding a yarn package can even downgrade some other packages.\nFor example if you have ^6.0.0 in your package.json, you yarn upgrade it up to\n^6.1.0 but then later install another library that requires a hard 6.0.1, yarn\nwill decide to downgrade you to 6.0.1</p>\n"}},"__N_SSG":true}