{"pageProps":{"post":{"title":"Fixing spiky CPU issues with Tomcat","date":"2016-09-16","slug":"2015-09-16","content":"<p>The symptoms of spiking that we saw were simply that after light usage\nof the applications, the CPU usage would start spiking and rapidly cycle\nfrom many CPU cores (e.g. 2000% CPU usage) back to 0% CPU for no\napparent reason.</p>\n<p>We now know this was due to memory issues and garbage collection, but it\nwas confusing because it wasn't strictly showing up as GC usage in\nJVisualVm (the GC usage, blue spikes on the left in fig 1, are small,\nbut the orange spikes are large, even though the memory issues are the\nproblem)</p>\n<p>Here is what it looked like during spiking (obviously, pushing the\nmemory limits here, a linked in article suggests having 6GB ofÂ \"newgen\"\nmemory, so on top of the old gen, tomcat needs a bunch more for the\nnewgen to make things happy.</p>\n<p><img src=\"/media/129241954103_0.png\" alt=\"\"></p>\n<p>Here is what it looks like when it is not spiking</p>\n<p><img src=\"/media/129241954103_1.png\" alt=\"\"></p>\n<p>Edit: See this follow up post for showing that increasing memory helps\n<a href=\"http://searchvoidstar.tumblr.com/post/131229569383/tomcat-memory-debugging\">http://searchvoidstar.tumblr.com/post/131229569383/tomcat-memory-debugging</a></p>\n<p>::: {#footer}\n[ September 16th, 2015 6:37pm ]{#timestamp} [tomcat]{.tag} [java]{.tag}\n[programming]{.tag} [coding]{.tag} [troubleshooting]{.tag}\n[intermine]{.tag} [bioinformatics]{.tag}\n:::</p>\n<p>export default ({ children }) => {children}</p>\n"}},"__N_SSG":true}