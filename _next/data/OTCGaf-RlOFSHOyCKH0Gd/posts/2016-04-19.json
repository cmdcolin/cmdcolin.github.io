{"pageProps":{"post":{"title":"Creating a testing framework for JBrowse plugins","date":"2016-04-19","slug":"2016-04-19","content":"<p>Testing client side apps requires a couple of tedious steps: Organizing\nthe git clone, the dependencies, wrangling up a web server, the test\nframework, etc.</p>\n<p>When testing a plugin for jbrowse, the dependency tree is interesting\nbecause the plugin \"depends\" on JBrowse to run, but we will use\ntravis-CI and bower inside the git repo for our plugin to accomplish\nthis.</p>\n<p>In this scenario, we will</p>\n<ol>\n<li>\n<p>Use bower to install jasmine and JBrowse (our platform that we write\nthe plugin for)</p>\n</li>\n<li>\n<p>Use nginx to launch a webserver on travis-CI</p>\n</li>\n<li>\n<p>Use the phantomjs run-jasmine.js script to check jasmine test\nresults</p>\n</li>\n</ol>\n<p>Without further ado</p>\n<p>Here is the .travis.yml</p>\n<pre><code>sudo: false\naddons:\n  apt:\n    packages:\n    - nginx\ncache:\n  apt: true\n  directories:\n  - $HOME/.cache/bower\nbefore_install:\n  - npm install -g jshint bower\ninstall:\n  - bower install\nbefore_script:\n  - cat test/travis.conf | envsubst > test/travis-envsubst.conf\n  - nginx -c `pwd`/test/travis-envsubst.conf\nscript:\n  - phantomjs test/run-jasmine.js http://localhost:9000/test/\n  - jshint js\n</code></pre>\n<p>Refer to\n<a href=\"http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2\">http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2</a>\nfor details on the nginx setup</p>\n<p>Here is the bower.json</p>\n<pre><code>{\n  \"name\": \"sashimiplot\",\n  \"homepage\": \"https://github.com/cmdcolin/sashimiplot\",\n  \"description\": \"Sashimi track type for jbrowse\",\n  \"main\": \"js/main.js\",\n  \"keywords\": [\n    \"bioinformatics\",\n    \"jbrowse\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\",\n    \"src\",\n    \"test\",\n    \"tests\"\n  ],\n  \"devDependencies\": {\n    \"jasmine-core\": \"jasmine#^2.4.1\",\n    \"jbrowse\": \"git://github.com/GMOD/jbrowse.git#master\"\n  }\n}\n</code></pre>\n<p>The key thing here is that it installs jasmine and JBrowse. I set\n.bowerrc to install both jasmine and JBrowse to the \"test\" directory</p>\n<pre><code>{\n    \"directory\": \"test\"\n}\n</code></pre>\n<p>With this setup, bower will make a \"flat dependency tree\" in the test\ndirectory, so it will look like this</p>\n<pre><code>$ ls -1 test\nFileSaver\ndbind\ndgrid\ndijit\ndojo\ndojox\n*index.html*\njDataView\njasmine-core\njbrowse\njson-schema\njszlib\nlazyload\nput-selector\n*run-jasmine.js*\n*spec*\n*travis.conf*\nutil\nxstyle\n</code></pre>\n<p>Here the asterisks indicate things that are part of our app, other's are\nautomatically installed by bower (jbrowse, jasmine-core, the dojo\ndependencies, and other things)</p>\n<p>Then we can create the jasmine test/index.html to be something like this</p>\n<pre><code>&#x3C;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n  \"http://www.w3.org/TR/html4/loose.dtd\">\n\n\n  &#x3C;meta>\n  Jasmine Spec Runner\n\n  &#x3C;link rel=\"stylesheet\" href=\"jasmine-core/lib/jasmine-core/jasmine.css\">&#x3C;script src=\"jasmine-core/lib/jasmine-core/jasmine.js\">&#x3C;/script>&#x3C;script src=\"jasmine-core/lib/jasmine-core/boot.js\">&#x3C;/script>&#x3C;script type=\"text/javascript\" src=\"dojo/dojo.js\" data-dojo-config=\"async: 1\">&#x3C;/script>&#x3C;script type=\"text/javascript\">\n    require( { baseUrl: '.',\n               packages: [\n                   'dojo',\n                   'dijit',\n                   'dojox',\n                   'jszlib',\n                   { name: 'lazyload', location: 'lazyload', main: 'lazyload' },\n                   'dgrid',\n                   'xstyle',\n                   'put-selector',\n                   'FileSaver',\n                   { name: 'jDataView', location: 'jDataView/src', main: 'jdataview' },\n                   { name: 'JBrowse', location: 'jbrowse/src/JBrowse' },\n                   { name: 'SashimiPlot', location: '../js' }\n               ]\n    });\n  &#x3C;/script>&#x3C;script type=\"text/javascript\" src=\"spec/SashimiPlot.spec.js\">&#x3C;/script>&#x3C;div id=\"sandbox\" style=\"overflow:hidden; height:1px;\">&#x3C;/div>\n</code></pre>\n<p>The \"packages\" in the require statement puts all these packages in the\nright \"namespace\" for the AMD includes, and the \"specs\" are defined like\n<code>&#x3C;script type=\"text/javascript\" src=\"spec/Projection.spec.js\">&#x3C;/script></code></p>\n<p>Finally, run-jasmine.js is used to check the results of the jasmine\ntests (it is run via phantomjs in the travis-CI script). It is a special\nversion for the most recent version of jasmine (2.4)\n<a href=\"https://gist.github.com/vmeln/b6cbb319d9a0efc816be\">https://gist.github.com/vmeln/b6cbb319d9a0efc816be</a></p>\n<p>For an example of the project using this, see\n<a href=\"https://github.com/cmdcolin/sashimiplot\">https://github.com/cmdcolin/sashimiplot</a></p>\n"}},"__N_SSG":true}