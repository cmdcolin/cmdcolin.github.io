{"pageProps":{"post":{"title":"Creating a JBrowse plugin","date":"2016-11-10","slug":"2016-11-10","content":"<p>I have been very impressed with peoples creativity and willingness to\ndig into all the details of JBrowse to customize it's features. One\ngreat way to do this in a modular way is to create a \"JBrowse plugin\".\nThis concept sounds hard but you can set up a simple couple of files and\nrefresh your browser and it will \"just work\"!</p>\n<p><strong>Introduction to the plugin mindset</strong></p>\n<p>In a plugin, you can define new things like custom track types, custom\nadaptors to new file types, new track selectors, or something really\ndifferent. A key insight about the custom types of tracks and things\nthough is that you can put the name of your new custom class in the\njbrowse config file which will then find the code in your plugin and run\nit. Plugins can do other things, but the ability to just swap out track\ntypes or other components in the config file is a great benefit.</p>\n<p><strong>A scenario</strong></p>\n<p>One example that was talked about on the mailing list might involve\nadding new menu items for a given track. We might consider a plugin that\ndefines a custom track type to add that functionality.</p>\n<p>Basically, we can use object- oriented principles to \"inherit\" from some\nexisting track type like CanvasFeatures and then extend its\nfunctionality by overriding the functions.</p>\n<p>If you are not familiar with object-oriented javascript, dojo makes it\npretty easy (but, especially get a background on this if you need to,\nsee footnotes below).</p>\n<p>We can inherit a new track type by using the \"define\" function to\ninclude the dependencies needed in a file, and they are listed in an\narray at the top of your file.</p>\n<p>Then the \"declare\" function creates a new class. The first argument to\ndeclare is the is your parent class, like CanvasFeatures, and we type\n\"return declare\" because we are returning our new track class from the\nmodule.</p>\n<pre><code> define( [\"dojo/_base/declare\",\n \"JBrowse/View/Track/CanvasFeatures\"],\n     function(declare,CanvasFeatures) {\n     return declare(CanvasFeatures, {\n         _trackMenuOptions: function() {\n\n             var opts=this.inherited(arguments); //call the parent\n classes function\n\n             opts.push( // add an extra menu item to the array returned\n from parent class function\n                 {       \n                     label: \"Custom item\",\n                     type: 'dijit/CheckedMenuItem',\n                     onClick: function(event) {\n                         console.log('Clicked');\n                     },  \n                     iconClass: \"dijitIconPackage\"\n                 }   \n             );  \n             return opts;\n         }   \n     });\n     }   \n );\n</code></pre>\n<p>Code listing 1. an example custom track type, MyTrack.js, that adds an\nextra track menu item</p>\n<p><strong>Now how do we make this a plugin?</strong></p>\n<p>In the above section, we created a new track subclass with a custom menu\noption. How do we use this track? We want to turn it into part of afine\nthe boilerplate code from the <a href=\"http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse_Plugins\">Writing\nplugins</a>\nguide.</p>\n<pre><code> define([\n            'dojo/_base/declare',\n            'JBrowse/Plugin'\n        ],  \n        function(\n            declare,\n            JBrowsePlugin\n        ) {\n  \n return declare( JBrowsePlugin, // our plugin's main.js derives from\n the \"JBrowse/Plugin\" base class\n {\n     constructor: function( args ) {\n         /*don't necessarily have to do any initializing here, but you\n can get a handle to various jbrowse components if any initialization\n is needed from the args.browser variable*/\n     }   \n });\n });\n</code></pre>\n<p>Code listing 2. Our plugin's main.js</p>\n<p>After this, we create the plugin directory structure</p>\n<blockquote>\n<p>jbrowse/plugins/MyPlugin</p>\n<blockquote>\n<p>jbrowse/plugins/MyPlugin/js</p>\n<blockquote>\n<p>jbrowse/plugins/MyPlugin/js/main.js</p>\n<p>jbrowse/plugins/MyPlugin/js/MyTrack.js</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>Then we can add our new plugin to a config file like jbrowse_conf.json\nas \"plugins\": [\"MyPlugin\"]  and then make a track in trackList.json\nhave \"type\":  \"MyPlugin/MyTrack\" instead of for\nexample \"type\": \"CanvasFeatures\". That will tell jbrowse to load the\nMyTrack class from your plugin instead of the normal CanvasFeatures\nclass.</p>\n<p>That's about it!</p>\n<p>Note that the bin/new-plugin.pl script can automatically initialize some\nof this directory structure too. Try running \"bin/new-plugin.pl\nMyPlugin\" and see what happens.</p>\n<p>Footnotes:</p>\n<p>It is important to understand the module format (AMD) which is what the\n\"define\" function is about and the dojo way of definining classes using\nthe \"declare\" function. Together, this allows the dojo to create\nobject-oriented programs that are modular in javascript. See\n<a href=\"http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html\">http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html</a>\nand <a href=\"http://dojotoolkit.org/documentation/tutorials/1.9/modules/\">http://dojotoolkit.org/documentation/tutorials/1.9/modules/</a>\n(understanding this helps you understand the \"preamble\" for declaring a\njbrowse plugin)</p>\n"}},"__N_SSG":true}