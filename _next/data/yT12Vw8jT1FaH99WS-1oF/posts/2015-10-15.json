{"pageProps":{"post":{"title":"Tomcat memory debugging","date":"2015-10-15","slug":"2015-10-15","html":"<p>In my previous posts, I speculated about the issues that were causing\nserver lag and CPU usage spiking with\ntomcat: <a href=\"https://cmdcolin.github.io/posts/2015-09-16\">https://cmdcolin.github.io/posts/2015-09-16</a></p>\n<p>Unfortunately, I was completely wrong in my speculations, but we\nincreased tomcat memory limits so that the entire Lucene search index\ncould fit in memory, which was able to fix the spiky CPU problems.</p>\n<p>Luckily, fixing the memory issues had very good implications for our\nwebapp:</p>\n<p>I have a cron job uses a simple curl command to grab different pages on\nthe website, and then it logs the time taken to a output file. I charted\nthese output times, before and after we increased the memory limits of\ntomcat, and it turned out that the response time of the webapp was\ndramatically improved by this change.</p>\n<p><img src=\"/media/131229569383_0.png\" alt=\"\"></p>\n<p>Figure 1. The webapp response time was extremely variable before the\nredeploy on Oct 2nd where we increased tomcat's memory allocation, which\nthereafter dramatically improved the response time.</p>\n<p>Clearly, the webapp response time was being severely compromised by the\nmemory issues.</p>\n<p>In response to all of these issues, I also added GC logging to the\ntomcat configuration so that I can see if the GC is correlated with\nthese webapp response time. Figure 2 shows how high GC activity is\ncorrelated with longer webapp response times, but note that this figure\nwas made after the other memory allocation problems were fixed, so it is\nstill much better than the problems we had in the past.</p>\n<p><img src=\"/media/131229569383_1.png\" alt=\"\"></p>\n<p>Figure 2. After increasing the memory, you can see webapp response time\nis much better, except if the GC activity becomes very high, and then\nthis increases the response time.</p>\n<p>Edit: Bonus screenshot, seemingly each friday we get a majoy activity\nburst that triggers GC activity!</p>\n<p><img src=\"/media/131229569383_2.png\" alt=\"\"></p>\n<p>Figure 3. Crazy Java GC activity on a friday night, but the app seems to\nrecover from it</p>\n<h2>Conclusion</h2>\n<p>Increasing the memory allocation to java and tomcat allows the entire\nsystem to perform much better. If you can afford to get more memory to\nallocate to tomcat, then it's probably a good idea.</p>\n<p>Also, tracking your webapp response times will help you see if your\nchanges are having a good effect. I made this a script for graphing log\noutputs here <a href=\"https://github.com/cmdcolin/loggraph\">https://github.com/cmdcolin/loggraph</a></p>\n<p>PS:</p>\n<p>If your tomcat is running as the tomcat user, then it can be difficult\nto debug the memory problems simply with the \"get heap dump\" from\njvisualvm, because the permissions will be wrong. To fix this, try using\na privileged user to run the jmap command:</p>\n<pre><code>runuser -l tomcat -c \"/usr/java/latest/bin/jmap-dump:format=b,file=/db/tomcat/tomcat.dump 25543\"\n</code></pre>"}},"__N_SSG":true}