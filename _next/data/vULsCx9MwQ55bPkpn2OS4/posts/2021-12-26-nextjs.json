{"pageProps":{"post":{"title":"My next.js static blog setup","date":"2021-12-26","slug":"2021-12-26-nextjs","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      ul: \"ul\",\n      li: \"li\",\n      h3: \"h3\",\n      code: \"code\",\n      a: \"a\",\n      br: \"br\",\n      pre: \"pre\",\n      h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"My personal homepage originally used statocles, a perl-based static site\\ngenerator (http://preaction.me/statocles/). I didn't really blog using it, just\\na homepage for myself plus some links to my tumblr blog. But, if I linked\\npeople to the tumblr blog directly, it would give people terrible popup ads and\\ntrackers. So, I switched to github pages+next.js this year. I considered a\\nnumber of alternative static site systems, but next.js seemed to hit some nice\\ngoals\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Flexible\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"React-based (as opposed to template-based like jekyll, eleventy, etc.)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Markdown driven, and can use MDX\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"RSS feed (bonus)\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Active community\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Other systems almost worked and were attempted but aborted\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"First and second iterations\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The first iteration of my next.js blog\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"I put every blog post in the \\\"pages\\\" folder. This worked ok but I had to\\nmanually edit the index.mdx file to have long lists of stuff like this\\n\", _jsx(_components.code, {\n            children: \"![link to new blogpost](manually_inserted_link_here)\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The second iteration, I wanted to automatically generate a list of recent\\nblogposts from files on disk\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"I used the next.js \\\"blog-template-typescript\\\" example folder from their\\n\", _jsx(_components.a, {\n              href: \"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\",\n              children: \"monorepo\"\n            }), \".\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"The new blog posts are generated from markdown files in the \", _jsx(_components.code, {\n              children: \"_posts\"\n            }), \" folder,\\nand get rendered by the file \", _jsx(_components.code, {\n              children: \"pages/posts/[slug].tsx\"\n            }), \" (yes, the filename\\nincludes square brackets).\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"getAllPosts in\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n              href: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/master/lib/api.ts\",\n              children: _jsx(_components.code, {\n                children: \"lib/api.ts\"\n              })\n            }), \"\\ngets a listing of the files in _posts folder, which I can call from the \", _jsx(_components.code, {\n              children: \"getStaticProps\"\n            }), \" method on next.js pages\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Stripping off unnecessary stuff from blog-starter-typescript\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"blog-starter-typescript\"\n        }), \" template has many tiny components, I removed some\\nof them to make it easier for me to orient myself\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript/components\",\n            children: \"theirs\"\n          })\n        }), \"\\n\", _jsx(_components.li, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/cmdcolin/cmdcolin.github.io/tree/master/components\",\n            children: \"mine\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Removing tailwind CSS\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"blog-starter-typescript\"\n        }), \" template uses tailwind CSS and uses \\\"modern web design\\\" (aka:\\ngigantic \\\"tiles\\\" instead of links, images that are way too large, etc)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I started making a more basic design. I tried to roll with the tailwind CSS for\\na bit, but ended up removing it entirely.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Tailwind CSS is sort of like a CSS-in-JS system, except every CSS attribute is encoded in a CSS classname. For example, here are some tailwind CSS snippets\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-html\",\n          children: \"<div className=\\\"container mx-auto px-5\\\"></div>\\n<footer className=\\\"bg-accent-1 border-t border-accent-2\\\"></footer>\\n<div className=\\\"max-w-1xl mx-auto\\\"></div>\\n<div className=\\\"min-h-screen\\\"></div>\\n<a className=\\\"hover:underline\\\"></a>\\n<h1\\n  className=\\\"text-2xl md:text-2xl lg:text-2xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left\\\"\\n></h1>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"They claim this is better than using external CSS (see comparison here\\nhttps://tailwindcss.com/docs/utility-first) but it is yet another language to\\nlearn, and kind of tricky.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"But, the reason I gave up with tailwind is actually because tailwind CSS resets\\na lot of HTML styles so things like \", _jsx(_components.code, {\n          children: \"<h1>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<h2>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<ul>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<li>\"\n        }), \", \", _jsx(_components.code, {\n          children: \"<a>\"\n        }), \" have\\nno styling at all. This is done by \", _jsx(_components.code, {\n          children: \"tailwind preflight\"\n        }), \"\\nhttps://tailwindcss.com/docs/preflight (which you can disable, but it is\\nenabled by default)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Stackoverflow has some ways to help restore styling and keep preflight, but it\\nstill struck me as odd. Examples\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsxs(_components.a, {\n              href: \"https://stackoverflow.com/a/68853223/2129219\",\n              children: [\"Example: you have to manually restore underlines on \", _jsx(_components.code, {\n                children: \"<a>\"\n              }), \" elements if using tailwind XSS\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.a, {\n              href: \"https://stackoverflow.com/questions/69264976/cant-display-markdown-on-nextjs\",\n              children: \"Another example: \\\"It looks like you're using TailwindCSS, the default\\nstyles for elements are reset, that's why the h1 text will look like any other\\ntext.\\\"\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsxs(_components.a, {\n              href: \"https://raw.githubusercontent.com/vercel/next.js/canary/examples/blog-starter-typescript/components/markdown-styles.module.css\",\n              children: [\"Another example \", _jsx(_components.code, {\n                children: \"blog-template-typescript\"\n              }), \" uses this file to try to style\\nthe markdown using some general\\nstyles\"]\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To me it was surprising the extend that tailwind goes to unstyle the default\\nbrowser styles, removing \\\"idiomatic HTML\\\" styles, so I removed tailwind for\\nnow. Perhaps I'll return to it another time\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Using MDX for blogposts in next.js\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In the template from next.js team, the \", _jsx(_components.code, {\n          children: \"blog-template-typescript\"\n        }), \", it uses a\\nfairly simple \", _jsx(_components.code, {\n          children: \"lib/markdownToHtml.ts\"\n        }), \" function right in the\\n\", _jsx(_components.code, {\n          children: \"pages/posts/[slug].tsx\"\n        }), \" file (the markdown is statically pre-rendered in the\\ntrue static blog sense, using the getStaticProps function). This is,\\nunfortunately, over-simplified for the MDX case, because MDX properly needs to\\nhydrate the components using react on the client side also\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"To fix, the module https://github.com/hashicorp/next-mdx-remote offers a way to\\nload actual MDX files.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Adding syntax highlighting the next.js code snippets\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"There are a couple results from google about how to add syntax highlighting to\\nnext.js but I still found it difficult.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"My method ended up a bit different where I manually included the prism JS and\\nCSS from a CDN essentially and it worked\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Other methods e.g. adding react-prism in next.config.js (like\\nhttps://github.com/mikeesto/next-mdx-prism-example does) I think clashed with\\nMDXRemote perhaps, or maybe I was tussling with tailwind CSS too much to make a\\nclear thought out of it, but syntax blocks on my blogposts should now be\\nproperly highlighted\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"RSS feed\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I also followed this great guide to add a RSS file for next.js\\nhttps://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Link here, for your feed readers\\nhttps://cmdcolin.github.io/rss.xml\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Not many people may use RSS much anymore, but I do use it (via feedly), and I\\nlove music blogs that keep posting on blogspot year after year, and the\\noccasional programming post is nice too\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}