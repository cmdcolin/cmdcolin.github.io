{"pageProps":{"post":{"title":"Structural variants and the SAM format - the long (reads) and short (reads) of it","date":"2022-02-06","slug":"2022-02-06-sv-sam","mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\",\n      h2: \"h2\",\n      h3: \"h3\",\n      ul: \"ul\",\n      li: \"li\",\n      strong: \"strong\",\n      em: \"em\",\n      img: \"img\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" specification is pretty amazing\\n(\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"https://samtools.github.io/hts-specs/SAMv1.pdf\"\n        }), \")\\nbut it is also fairly terse and abstract. True understanding might come from\\nplaying with real world data. I will try to relay some things I have learned\\ngenerally from playing with real world data, with a little bit of an aim to\\nexplain how SAM concepts can relate to structural variants.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Disclaimer: I'm a developer of JBrowse 2. This document has some screenshots\\nand links for it, feel free to try it at\\n\", _jsx(_components.a, {\n          href: \"https://jbrowse.org\",\n          children: \"https://jbrowse.org\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Basics\"\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file and how does it relate to \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \"?\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" file \", _jsx(_components.strong, {\n              children: \"generally\"\n            }), \" contains \\\"reads\\\" from a sequencer, with information\\nabout how they are mapped to a reference genome [1][2].\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" file is \", _jsx(_components.strong, {\n              children: \"generally\"\n            }), \" produced when an aligner takes in raw unaligned reads\\n(often stored in \", _jsx(_components.code, {\n              children: \"FASTQ\"\n            }), \" format files) and aligns them to a reference genome [3].\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"A \", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" file is a text format that you can read with your text editor. \", _jsx(_components.code, {\n              children: \"BAM\"\n            }), \" and\\n\", _jsx(_components.code, {\n              children: \"CRAM\"\n            }), \" are compressed representations of the \", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" format.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can convert \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" with samtools\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"samtools view file.sam -o file.bam\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"You can also convert a \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" back to \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" with samtools view\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"samtools view -h file.bam -o file.sam\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"The -h just makes sure to preserve the header.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you are converting \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \", it may require the -T argument to\\nspecify your reference sequence (this is because the \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" is \\\"reference\\ncompressed\\\")\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"samtools view -T reference.fa file.sam -o file.cram\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Also see Appendix C: piping FASTQ from \", _jsx(_components.code, {\n          children: \"minimap2\"\n        }), \" directly to CRAM\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[1] \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" can contain any type of sequence, not specifically reads. If you\\ncreated a de novo assembly, you could align the contigs of the de novo assembly\\nto a reference genome and store the results in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[2] Does not always have to have information about mapping to a reference\\ngenome. You can also store unaligned data in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" (so-called\\n\", _jsx(_components.code, {\n          children: \"uBAM\"\n        }), \" for example) but most of the time, the reads in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" format are aligned\\nto a reference genome.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[3] Examples of programs that do alignment include \", _jsx(_components.code, {\n          children: \"bwa\"\n        }), \", \", _jsx(_components.code, {\n          children: \"bowtie\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"minimap2\"\n        }), \"\\n(there are many others). These programs all can produce \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" outputs\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file contains a header (\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" files also have the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"\\nheader) and a series of records. A record is a single line in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, and\\nit generally corresponds to a single read, but as we will see, a split\\nalignment may produce multiple records that refer to the same source read.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note: if a read failed to align to the reference genome, it may still be in\\nyour \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, marked as unmapped using the flag column. Sometimes, \\\"dumpster\\ndiving\\\" (looking at the unmapped records from a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file) can be used to aid\\nstructural variant searches (e.g. there may be novel sequence in there not from\\nthe reference genome that could be assembled)\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What are tags in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A SAM file has a core set of required fields, and then an arbitrary list of\\nextra columns called tags. The tags have a two character abbreviation like \", _jsx(_components.code, {\n          children: \"MQ\"\n        }), \"\\n(mapping quality) or many others. They can be upper or lower case. Upper case\\nare reserved for official usages (except those with X, Y, or Z prefixed). See\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMtags.pdf\",\n          children: \"SAMtags.pdf\"\n        }), \" for more\\ndetails\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is a \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string is a \\\"compact idiosyncratic gapped alignment report\\\". It tells\\nyou about insertions, deletions, and clipping. It is a series of \\\"operators\\\" with lengths.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Insertion example:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"50M50I50M\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"That would be 50bp of matching bases (\", _jsx(_components.code, {\n          children: \"50M\"\n        }), \"), followed by a 50bp insertion\\n(\", _jsx(_components.code, {\n          children: \"50I\"\n        }), \"), followed by another 50bp of matches (\", _jsx(_components.code, {\n          children: \"50M\"\n        }), \"). The 50bp insertion means\\nthe read contains 50 bases in the middle which did not match the reference\\ngenome that you are comparing the read to.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Clipping example:\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.code, {\n          children: \"50S50M50S\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This means that 50bp matched (\", _jsx(_components.code, {\n          children: \"50M\"\n        }), \" in the middle of the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string) and\\nboth sides of the read are soft clipped. The clipping means the aligner was not\\nable to align the reads on either side. You could imagine clipping being like\\n\\\"an insertion on either side of the read\\\" if you like: basically those bases on\\neither side did not align.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Notes:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [_jsx(_components.em, {\n              children: \"Finding mismatches\"\n            }), \": A \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" string match like \", _jsx(_components.code, {\n              children: \"50M\"\n            }), \" means 50 bases\\n\\\"matched\\\" the reference genome, but that only means that there are no\\ninsertions or deletions in those 50 bases. There could be underlying\\nmismatches in the read compared to the reference. See Appendix D on the MD\\ntag and finding where the mismatches are.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [_jsx(_components.em, {\n              children: \"Ambiguity of representation\"\n            }), \": A \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" string with insertions and deletions\\ncould be \", _jsx(_components.code, {\n              children: \"50M1D1I50M\"\n            }), \". This string had a 1bp deletion and a 1bp insertion\\nback-to-back. This could be just a mismatch! There is ambiguity in sequence\\nalignment representations. Downstream programs must accomodate this.\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [_jsx(_components.em, {\n              children: \"Split records and soft-clipping\"\n            }), \": A \", _jsx(_components.code, {\n              children: \"CIGAR\"\n            }), \" string with soft-clipping\\n\", _jsx(_components.code, {\n              children: \"500S50M\"\n            }), \" this means that 500 bases of the read were not aligned at this\\nposition, but 50 bases were! Note that the alignment might have been a split\\nalignment (see seciton on split alignments below) so another record in the\\n\", _jsx(_components.code, {\n              children: \"SAM\"\n            }), \" file, linked by the \", _jsx(_components.code, {\n              children: \"SA\"\n            }), \" (supplmentary alignment) tag, might contain\\ninfo on where the other 500 bases aligned! (or, they might not map anywhere).\\nThe linked split or supplementary alignments all have the same read name\\n(\", _jsx(_components.code, {\n              children: \"QNAME\"\n            }), \").\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"See \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" for all the\\nCIGAR operators.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If you are working with \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" data, you will often write loops that directly\\nparse CIGAR strings. See Appendix B for handy functions for parsing \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \"\\nstrings. Don't fear the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \"!\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Detecting SVs from long reads\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Long reads offer a wide array of methods for detecting SVs\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Small insertions/deletions: Long reads can completely span moderate sized\\ninsertions and deletions, indicated by \", _jsx(_components.code, {\n            children: \"I\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"D\"\n          }), \" in a \", _jsx(_components.code, {\n            children: \"CIGAR\"\n          }), \" string.\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Large insertions/deletions: If a long read does not completely an insertion\\nor deletion, it may be split alignment (for a deletion) or could be soft/hard\\nclipped where it can't align all the way through an insertion.\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Translocations: A split long alignment can span long range or even\\ninter-chromosomal translocations, so part of the read maps to one chromosome\\nand one part maps to the other\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Inversions: A split alignment can span an inversion, the long read is split\\ninto multiple parts, one part of it aligns in the reverse orientation, while\\nthe other part aligns in the forward orientation\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note that there are many different methods for detecting SVs from long reads,\\ne.g. not all use mapped reads from SAM files, some use de novo assembly, but\\nit is still useful to be familiar with mapped read methods.\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"What are split alignments?\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Split alignments, or chimeric alignments, are alignments where part of the read\\nmaps to one place, and another part to another. For example, part of a long\\nread may map to \", _jsx(_components.code, {\n          children: \"chr1\"\n        }), \" and part of it maps to \", _jsx(_components.code, {\n          children: \"chr4\"\n        }), \". It is worth reading the\\ndefinition of \\\"Chimeric alignment\\\" from\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" when you get the\\nchance.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Split alignments are especially common with long reads, and it can indicate\\nlarge structural variants. there may be a structural variant where the two\\nchromosomes are fused together, or the parts may align to either side of a\\nlarge deletion, or they may be split to align through an inversion (part of it\\naligns to the forward strand, part of it to the reverse strand, and again the\\nforward strand)\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"There is no limitation on how many splits might occur so the split can align to\\n3, 4, or more different places. Each part of the split puts a new line in the\\nSAM file, and note that all the records also have the same read name, or \", _jsx(_components.code, {\n          children: \"QNAME\"\n        }), \" (first\\ncolumn of \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" tells us, one\\nrecord is marked as \\\"representative\\\", I call this the \\\"primary\\\" record, while\\nthe other components of the split read are maked supplementary, given the 2048\\nflag. Only the \\\"primary\\\" record generally has a \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" field. The split\\nalignments are generally also all given a \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag that gives info on where all\\nthe other parts of the split are. See\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMtags.pdf\",\n          children: \"SAMtags.pdf\"\n        }), \" for more info\\non the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note: split alignments are different from \\\"multi-mappers\\\" where the entire read\\nmaps maps equally well to, say, \", _jsx(_components.code, {\n          children: \"chr4\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"chr1\"\n        }), \". Split reads maps part to\\nchr1, and part to \", _jsx(_components.code, {\n          children: \"chr4\"\n        }), \". See again the\\n\", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/SAMv1.pdf\",\n          children: \"SAMv1.pdf\"\n        }), \" for the definition\\nof multi-mapping\"]\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"What is the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag?\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag is outputted on each part of the split alignment, e.g. the primary\\ncontains an \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag that refers to all the locations, \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" strings, and\\nmore for all the supplementary reads, and each of the supplementary reads also\\ncontains an \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag that refers to the primary alignment and each other\\nsupplementary alignment.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Fun fact: The \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag conceptually can result in a 'quadratic explosion' of\\ndata, because each part of the split contains references to every other part.\\nFor example, if a read is split into 4 pieces, then each record would would\\nhave an \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag with 3 segments, so 3*4 segments will be documented in the\\n\", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag. In many cases, this is not a problem, but if you imagine a finished\\nchromosome aligned to a draft assembly, it may get split so many times\\nthis could be a factor.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Visualizing split reads across a breakend or translocation\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This is a specialized JBrowse 2 feature, but if there is an inter-chromosomal\\ntranslocation, you can load this into JBrowse and visualize support for this\\nevent using our \\\"breakpoint split view\\\". This\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"We also have a workflow called the \\\"SV inspector\\\" that helps you setup the\\n\\\"breakpoint split views\\\"\\n(\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/jb2/docs/user_guide/#sv-inspector\",\n          children: \"https://jbrowse.org/jb2/docs/user_guide/#sv-inspector\"\n        }), \".\\nThe SV inspector works) best on Breakend spec events and \", _jsx(_components.code, {\n          children: \"<TRA>\"\n        }), \"\\n(translocation) events from \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \", or \", _jsx(_components.code, {\n          children: \"BEDPE\"\n        }), \" formatted SV calls, and you can\\nlaunch the \\\"breakpoint split view\\\" from the \\\"SV inspector\\\"\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/breakpoint_split_view.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Visualizing a 'read vs reference' view given a split alignment\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If we are given the the primary alignment of an arbitrary split read, then we\\ncan construct what that split looks like compared to the reference genome.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If we are not given the primary alignment (e.g. we are starting from a\\nsupplementary alignment) then we can search the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" list for the one that is\\nprimary, because at least one will be.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Now that we have the primary alignment, it will have the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" (of the entire\\nread, the supplementary alignments typically have a blank \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \"!) and the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \"\\ntag containing the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" of all the different parts of the split. We can then\\nconstruct how the entire read, not just a particular record of the split\\nalignment, compares to the genome. In JBrowse 2 we implemented this and it uses\\na synteny-style rendering. [1]\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/linear_alignment.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Figure showing JBrowse 2 piecing together a long read vs the reference genome\\nfrom a single read\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"In order to do this reconstruction, JBrowse 2 takes the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" strings of the\\nprimary alignment and each of the pieces of the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag (it is a semi-colon\\nseparated list of chunks), sort them by the amount of softclipping (the\\nsoftclipping values will progressively trim off more of the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" telling you\\nit aligned further and further on in the long read), and then this tells me\\nwhere each piece of the split alignment came from in the original \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \", so we\\ncan plot the alignments of the read vs the reference genome using synteny style\\ndisplay.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"[1] Similar functionality also exists in GenomeRibbon\\n\", _jsx(_components.a, {\n          href: \"https://genomeribbon.org\",\n          children: \"https://genomeribbon.org)\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"SAM vs VCF - Breakends vs split alignments\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"An interesting outcome (to me) is that from a single record in a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, I\\ncan reconstruct the \\\"derived\\\" genome around a region of interest from a single\\nread.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If I was to try to do this with the \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" Breakend specification (section 5.4\\nof \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/VCFv4.3.pdf\",\n          children: \"VCF4.3.pdf\"\n        }), \"), it may\\nactually be more challenging than from a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" read. This is because a Breakend\\nin \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" format is only an edge in a graph (and the sequences are nodes).\\nTherefore, in order to properly reconstruct a structural variant from a \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \"\\nwith Breakends, I would have to construct a graph and decode paths through it.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I like the ability to reconstruct the derived genome from a single read, but it\\ncan be noisy. That said, de novo assembled contigs can also be stored in \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"\\nformat and is significantly less noisy (being composed of the aggregate\\ninformation of many reads).\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The point though is that interpretation of the \", _jsx(_components.code, {\n          children: \"VCF\"\n        }), \" breakend specification is\\nchallenging due to imposing a sequence graph on the genome, while the \", _jsx(_components.code, {\n          children: \"SA\"\n        }), \" tag\\nremains just a simple set of linear alignments that can easily be pieced\\ntogether, and you only need to refer to a single record in the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file to do\\nso.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"I am not aware of a lot of tools that work on the VCF Breakend graph, and\\nexpect more will need to be created to truly work with this standard. An\\ninversion for example may create 4 record in the VCF file (see section 5.4 in\\nthe \", _jsx(_components.a, {\n          href: \"https://samtools.github.io/hts-specs/VCFv4.3.pdf\",\n          children: \"VCF4.3.pdf\"\n        }), \" for\\nexample), and needs careful interpretation.\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Haplotype tagged reads\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"A new trend has been to create \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \"/\", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" files with tagged reads,\\nwhich tells us which haplotype a read was inferred to have come from. This is\\ncommonly done with the \", _jsx(_components.code, {\n          children: \"HP\"\n        }), \" tag, which might have \", _jsx(_components.code, {\n          children: \"HP=0\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"HP=1\"\n        }), \" for a\\ndiploid genome. Tools like \", _jsx(_components.code, {\n          children: \"whatshap\"\n        }), \" can add these tags to a \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" file, and\\nIGV and JBrowse 2 can color and sort by these tags.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/color_by_tag.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot of JBrowse 2 with the \\\"Color by tag\\\" and \\\"Sort by tag\\\" setting\\nenabled (coloring and sorting by the \", _jsx(_components.code, {\n          children: \"HP\"\n        }), \" tag) letting us see that only one\\nhaplotype has a deletion. Tutorial for how to do this in JBrowse 2 here\\n\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag\",\n          children: \"https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag\"\n        })]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"How do you detect SVs with paired-end reads?\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Paired-end reads are short reads, e.g. 150bp each. This makes them unable to\\nrecover some large structural variants.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"However, paired-end reads have a number of attributes that can be used to\\ndetect paired end reads\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Distance between pairs being abnormally large or short\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The distance between pairs is encoded by the \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" column in the \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" format.\\nThe distance between pairs with good mapping is relatively constant and called\\nthe \\\"insert length\\\". This comes from how the sequencing is done: paired-end\\nsequencing performs sequencing on both ends of a fragment.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"But, if you are mapping reads vs the reference genome, and you observe that\\nthey are abnormally far apart, say 50kb apart instead of 1kb apart, this may\\nindicate there your sample contains a deletion relative to the reference.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/aberrant_size.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot of JBrowse 1 with \\\"View as pairs\\\" enabled, and large insert size\\ncolored as red (from\\n\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/docs/paired_reads.html\",\n          children: \"https://jbrowse.org/docs/paired_reads.html\"\n        }), \").\\nNote that some of JBrowse 1's View as pairs features are not yet available in\\nJBrowse 2\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"An abundance of reads being \\\"clipped\\\" at a particular position\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This can indicate that part of the reads map well, but then there was an abrupt\\nstop to the mapping. This might mean that there is a sequence that was an\\ninsertion at that position, or a deletion, or a translocation.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The clipping is indicated by the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" string, either at the start or end of\\nit by an \", _jsx(_components.code, {\n          children: \"S\"\n        }), \" or an \", _jsx(_components.code, {\n          children: \"H\"\n        }), \". The \", _jsx(_components.code, {\n          children: \"S\"\n        }), \" indicates \\\"soft clipping\\\", and indicates that\\nthe sequence of the clipped portion can be found in the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \" field of the\\nprimary alignment. The \", _jsx(_components.code, {\n          children: \"H\"\n        }), \" is hard clipped, and the sequence that is hard\\nclipped will not appear in the \", _jsx(_components.code, {\n          children: \"SEQ\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/clipping_pileup.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Screenshot of JBrowse 2 showing blue clipping indicator with a \\\"pileup\\\" of\\nsoft-clipping at a particular position shown in blue. The clipping is an\\n\\\"interbase\\\" operation (it occurs between base pair coordinates) so it is\\nplotted separately from the normal coverage histogram.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/show_soft_clipping.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot of JBrowse 2 showing an insertion with Nanopore (top), PacBio\\n(middle) and Illumina short reads. The long reads may completely span the\\ninsertion, so the CIGAR string on those have an \", _jsx(_components.code, {\n          children: \"I\"\n        }), \" operator and are indicated\\nby the purple triangle above the reads. For the short reads, the reads near the\\ninsertion will be clipped since they will not properly map to the reference\\ngenome and cannot span the sinsertion. The \\\"Show soft clipping\\\" setting in\\nJBrowse 2 and IGV can be used to show visually the bases that extend into the\\ninsertion (shown on the bottom track).\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Unexpected pair orientation\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"With standard paired end sequencing, the pairs normally point at each other\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"forward reverse\\n --->    <---\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If the stranded-ness of the pair is off, then it could indicate a structural\\nvariant. See Appendix A for a handy function for calculating pair orientation.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This guide from IGV is helpful for interpreting the pair directionality with\\npatterns of SVs using \\\"Color by pair orientation\\\"\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\",\n          children: \"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/inverted_duplication.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Figure: This shows an inverted (tandem) duplication in 1000 genomes data. The\\ntandem duplication can produce green arrows which have reads pointing in\\nopposite directions e.g. \", _jsx(_components.code, {\n          children: \"<--\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"-->\"\n        }), \", while blue arrows which can indicate\\nan inversion point in the same direction e.g. \", _jsx(_components.code, {\n          children: \"-->\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"-->\"\n        })]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Caveat about TLEN\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" is a field in the SAM format that is somewhat ill defined,\\nat least in the sense that different tools may use it differently\\n\", _jsx(_components.a, {\n          href: \"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\",\n          children: \"https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If needed, you can calculate \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" yourself if you process the file yourself\\n(e.g. process all reads, get the actual records for the pairs, and calculate\\ndistance) but I have not had trouble with relying on the \", _jsx(_components.code, {\n          children: \"TLEN\"\n        }), \" from the data\\nfiles themselves.\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Calling copy number variants with your short or long reads\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Another type of SV that you can get from your \", _jsx(_components.code, {\n          children: \"SAM\"\n        }), \" files are copy number\\nvariants (CNVs). By looking at the depth-of-coverage for your data files, you\\ncan look for abnormalities that may indicate copy number variants. By using a\\ntool like \", _jsx(_components.code, {\n          children: \"mosdepth\"\n        }), \", you can quickly get a file showing the coverage across\\nthe genome.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Be aware that if you are comparing the coverage counts from different tools,\\nthat they have different defaults that may affect comparison. Some discard\\n\", _jsx(_components.code, {\n          children: \"QC_FAIL\"\n        }), \", \", _jsx(_components.code, {\n          children: \"DUP\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"SECONDARY\"\n        }), \" flagged reads. This is probably appropriate,\\nand corresponds to what most genome browsers will display (see\\n\", _jsx(_components.a, {\n          href: \"https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af\",\n          children: \"https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af\"\n        }), \" for a short\\nsummary of depth calculated from different tools)\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note that both long and short reads can be used for CNV detection. Long reads\\nmay give more accurate measurements also, with their better ability to map\\nsmoothly through difficult regions of the genome.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/media/coverage_cnv.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Screenshot showing coverage in BigWig format from nanopore reads on normal and\\ntumor tissue from a melanoma cancer cell line (COLO829) plotted using JBrowse 2\\n(\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/code/jb2/v1.6.4/?config=test_data%2Fconfig_demo.json&session=share-MZj3d18lzH&password=3X7bS\",\n          children: \"demo\"\n        }), \"\\nand\\n\", _jsx(_components.a, {\n          href: \"https://jbrowse.org/jb2/docs/user_guide/#viewing-whole-genome-coverage-for-profiling-cnv\",\n          children: \"tutorial\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"The future, with graph genomes and de-novo assemblies\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Currently, SV visualization is highly based on comparing data versus a\\nreference genome (and the SAM format is a signature of this: it stores data in\\nterms of reference genome coordinates). In the future, SV visualization may\\nlook more similar to comparative genomics, where we compare an SV to a\\npopulation specific reference from a graph genomes or something like this.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"It is known that de-novo assembly has more power to detect SVs than some read\\noperations (\", _jsx(_components.a, {\n          href: \"https://twitter.com/lh3lh3/status/1362921612690010118/photo/1\",\n          children: \"https://twitter.com/lh3lh3/status/1362921612690010118/photo/1\"\n        }), \")\\nas de novo assembled genomes improve and become more widespread, we may see a\\nshift in how SVs are called\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"I would also like to see improved ability to do fast or 'on the fly' gene\\nprediction on the de novo assembled genomes, and we can see what SNPs or\\nmodified splicing might occur in CNV copies of genes.\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Conclusion\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Algorithms that actually call structural variants face many challenges, but\\nunderstanding how the reads are encoded in SAM format, and seeing what they\\nlook like in the genome browser is a useful first step to gaining a better\\nunderstanding.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"In summary, some of the signatures of SVs may include:\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"Aberrant insert size (\", _jsx(_components.code, {\n            children: \"TLEN\"\n          }), \") detection (longer for deletion, shorter for\\ninsertion)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Split-read detection (\", _jsx(_components.code, {\n            children: \"SA\"\n          }), \" tag)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"CIGAR string processing (\", _jsx(_components.code, {\n            children: \"D\"\n          }), \" operator for deletions, \", _jsx(_components.code, {\n            children: \"I\"\n          }), \" operator for\\ninsertions)\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Over-abundance of clipping (\", _jsx(_components.code, {\n            children: \"S\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"H\"\n          }), \" operators in \", _jsx(_components.code, {\n            children: \"CIGAR\"\n          }), \")\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Depth of coverage changes for CNVs\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"Aligning de novo assembly vs a reference genome\\n(\", _jsx(_components.a, {\n            href: \"https://twitter.com/lh3lh3/status/1362921612690010118/photo/1\",\n            children: \"https://twitter.com/lh3lh3/status/1362921612690010118/photo/1\"\n          }), \"\\nwhich can output \", _jsx(_components.code, {\n            children: \"SAM\"\n          }), \", but it can also output\\n\", _jsx(_components.a, {\n            href: \"https://github.com/lh3/miniasm/blob/master/PAF.md\",\n            children: _jsx(_components.code, {\n              children: \"PAF\"\n            })\n          }), \" format (which can\\nbe loaded in JBrowse 2 in the synteny views). Techniques of detecting SVs on\\nPAF will be fundamentally pretty similar to the techniques listed above but\\nmay look a bit different (see \", _jsx(_components.code, {\n            children: \"cs\"\n          }), \" tag in PAF for example)\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you have any ideas I should include here, let me know!\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix A: Parsing CIGAR strings\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This is code that can help determine the pair orientation from a single BAM\\nrecord. Might be too much detail but follow along\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// @param flags - flags from a single read\\n// @param ref - the string of the reference sequence, just used to determine if it matches rnext\\n// @param rnext - the string of the RNEXT, just used to determine if it matches ref\\n// @param tlen - the TLEN field from SAM\\n// @return e.g. F1R2 normal paired end orientation\\nfunction getPairOrientation(\\n  flags: number,\\n  ref: string,\\n  rnext: string,\\n  tlen: number,\\n) {\\n  // this read is not unmapped &&\\n  // this read's mate is also not unmapped &&\\n  // this read's mate is on the same reference genome\\n  if (!flags & 4 && !flags & 8 && ref === rnext) {\\n    const s1 = flags & 16 ? 'R' : 'F'\\n    const s2 = flags & 32 ? 'R' : 'F'\\n    let o1 = ' '\\n    let o2 = ' '\\n\\n    // if first in pair\\n    if (flags & 64) {\\n      o1 = '1'\\n      o2 = '2'\\n    }\\n\\n    // else if second in pair\\n    else if (flags & 128) {\\n      o1 = '2'\\n      o2 = '1'\\n    }\\n\\n    const tmp = []\\n    if (tlen > 0) {\\n      tmp[0] = s1\\n      tmp[1] = o1\\n      tmp[2] = s2\\n      tmp[3] = o2\\n    } else {\\n      tmp[2] = s1\\n      tmp[3] = o1\\n      tmp[0] = s2\\n      tmp[1] = o2\\n    }\\n    return tmp.join('')\\n  }\\n  return null\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then this can be broken down further by orientation type\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Paired end reads are \\\"fr\\\"\\nMate pair reads are \\\"rf\\\"\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"So you can interpret e.g. F1R2 in relation to being a paired end read (fr) or mate pair (rf) below and with this link \", _jsx(_components.a, {\n          href: \"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\",\n          children: \"https://software.broadinstitute.org/software/igv/interpreting_pair_orientations\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"fr\\\": {\\n    \\\"F1R2\\\": \\\"LR\\\",\\n    \\\"F2R1\\\": \\\"LR\\\",\\n\\n    \\\"F1F2\\\": \\\"LL\\\",\\n    \\\"F2F1\\\": \\\"LL\\\",\\n\\n    \\\"R1R2\\\": \\\"RR\\\",\\n    \\\"R2R1\\\": \\\"RR\\\",\\n\\n    \\\"R1F2\\\": \\\"RL\\\",\\n    \\\"R2F1\\\": \\\"RL\\\"\\n  },\\n\\n  \\\"rf\\\": {\\n    \\\"R1F2\\\": \\\"LR\\\",\\n    \\\"R2F1\\\": \\\"LR\\\",\\n\\n    \\\"R1R2\\\": \\\"LL\\\",\\n    \\\"R2R1\\\": \\\"LL\\\",\\n\\n    \\\"F1F2\\\": \\\"RR\\\",\\n    \\\"F2F1\\\": \\\"RR\\\",\\n\\n    \\\"F1R2\\\": \\\"RL\\\",\\n    \\\"F2R1\\\": \\\"RL\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix B - CIGAR parsing\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// @param cigar: CIGAR string in text form\\nfunction parseCigar(cigar: string) {\\n  return cigar.split(/([MIDNSHPX=])/)\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then parse the returned array two at a time\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// this function does nothing, but is informative for how to parse interpret a\\n// CIGAR string\\n// @param cigar:CIGAR string from record\\n// @param readSeq: the SEQ from record\\n// @param refSeq: the reference sequence underlying the read\\nfunction interpretCigar(cigar: string, readSeq: string, refSeq: string) {\\n  const opts = parseCigar(cigar)\\n  let qpos = 0 // query position, position on the read\\n  let tpos = 0 // target position, position on the reference sequence\\n  for (let i = 0; i < ops.length - 1; i += 2) {\\n    const length = parseInt(opts[i], 10)\\n    const operator = opts[i + 1]\\n    // do things. refer to the CIGAR chart in SAMv1.pdf for which operators\\n    // \\\"consume reference\\\" to see whether to increment\\n    if (op === 'M' || op === '=') {\\n      // matches consume query and reference\\n      qpos += len\\n      tpos += len\\n    }\\n    if (op === 'I') {\\n      // insertions only consume query\\n      // sequence of the insertion from the read is\\n      const insSeq = readSeq.slice(qpos, qpos + len)\\n      qpos += len\\n    }\\n    if (op === 'D') {\\n      // deletions only consume reference\\n      // sequence of the deletion from the reference is\\n      const delSeq = refSeq.slice(tpos, tpos + len)\\n      tpad += len\\n    }\\n    if (op === 'N') {\\n      // skips only consume reference\\n      // skips are similar to deletions but are related to spliced alignments\\n      tpad += len\\n    }\\n    if (op === 'X') {\\n      // mismatch using the extended CIGAR format\\n      // could lookup the mismatch letter in a string containing the reference\\n      const mismatch = refSeq.slice(tpos, tpos + len)\\n      qpos += len\\n      tpos += len\\n    }\\n    if (op === 'H') {\\n      // does not consume query or reference\\n      // hardclip is just an indicator\\n    }\\n    if (op === 'S') {\\n      // softclip consumes query\\n      // below gets the entire soft clipped portion\\n      const softClipStr = readSeq.slice(qpos, qpos + len)\\n      qpos += len\\n    }\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note for example, that to determine how long a record is on the reference\\nsequence, you have to combine the records start position with the CIGAR string,\\nbasically parsing the CIGAR string to add up tpos and return tpos\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix C - align FASTQ directly to CRAM\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"This example from the htslib documentation\\n(http://www.htslib.org/workflow/fastq.html) shows how you can stream directly\\nfrom \", _jsx(_components.code, {\n          children: \"FASTQ\"\n        }), \" to \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" (and generate the index file .crai too)\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"minimap2 -t 8 -a -x sr reference.fa reads1.fq reads2.fq  | \\\\\\nsamtools fixmate -u -m - - | \\\\\\nsamtools sort -u -@2 - | \\\\\\nsamtools markdup -@8 --reference reference.fa - --write-index final.cram\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"If you want, you can make this a little shell script, easy_align.sh\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"#!/bin/bash\\nminimap2 -t 8 -a -x sr \\\"$1\\\" \\\"$2\\\" \\\"$3\\\"  | \\\\\\nsamtools fixmate -u -m - - | \\\\\\nsamtools sort -u -@2 - | \\\\\\nsamtools markdup -@8 --reference \\\"$1\\\" - --write-index \\\"$4\\\"\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Then call\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-sh\",\n          children: \"bash easy_align.sh ref.fa reads1.fq reads2.fq out.cram\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This same concept works with other common aligners as well like bwa\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Appendix D - the MD tag\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag helps tell you where the mismatches are without looking at the\\nreference genome. This is useful because as I mentioned, \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" can say \", _jsx(_components.code, {\n          children: \"50M\"\n        }), \"\\n(50 matches) but some letters inside those 50 matches can be mismatches, it\\nonly says there are no insertions/deletions in those 50 bases, but you have to\\ndetermine where in those 50 bases where the mismatches are. The \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag can\\nhelp tell you where those are, but it is somewhat complicated to decode\\n(\", _jsx(_components.a, {\n          href: \"https://vincebuffalo.com/notes/2014/01/17/md-tags-in-bam-files.html\",\n          children: \"https://vincebuffalo.com/notes/2014/01/17/md-tags-in-bam-files.html\"\n        }), \").\\nYou have to combine it with the \", _jsx(_components.code, {\n          children: \"CIGAR\"\n        }), \" to get the position of the mismatches\\non the reference genome. If you have a reference genome to look at, you might\\njust compare all the bases within the 50M to the reference genome and look for\\nmismatches yourself and forget about the \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag is also not required to exist, but the command \", _jsx(_components.code, {\n          children: \"samtools calmd yourfile.bam --reference reference.fa\"\n        }), \" can add \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tags to your \", _jsx(_components.code, {\n          children: \"BAM\"\n        }), \" file. It\\nis generally not useful for \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" because \", _jsx(_components.code, {\n          children: \"CRAM\"\n        }), \" actually does store\\nmismatches with the reference genome in it's compression format. Note that\\nthere are some oddities about \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tags leading to complaints (e.g.\\n\", _jsx(_components.a, {\n          href: \"https://github.com/samtools/hts-specs/issues/505\",\n          children: \"https://github.com/samtools/hts-specs/issues/505\"\n        }), \"\\nbut the \", _jsx(_components.code, {\n          children: \"MD\"\n        }), \" tag can be)\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}}},"__N_SSG":true}