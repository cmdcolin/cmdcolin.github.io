(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[153],{3905:function(e,n,t){"use strict";t.d(n,{kt:function(){return d}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"===typeof e?e(n):r(r({},n),e)),t},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||s;return t?a.createElement(f,r(r({ref:n},u),{},{components:t})):a.createElement(f,r({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"===typeof e||o){var s=t.length,r=new Array(s);r[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"===typeof e?e:o,r[1]=i;for(var p=2;p<s;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4995:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return o}});var a=t(5893);function o(e){var n=e.children;return(0,a.jsxs)("div",{children:[(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{href:"/",children:"Return home"}),(0,a.jsx)("img",{src:"/avatar.png",style:{height:"2em",marginLeft:"1em"}})]}),(0,a.jsx)("div",{className:"blog",children:n})]})}},2520:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var a=t(159),o=t(219),s=(t(7294),t(3905)),r=t(4995),i=["components"],l={},p=function(e){var n=e.children;return(0,s.kt)(r.default,null,n)};function c(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)(p,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",null,"Making a serverless website for photo and video upload pt. 2"),(0,s.kt)("p",null,"This post follows\non\xa0",(0,s.kt)("a",{parentName:"p",href:"https://cmdcolin.github.io/2020-12-24.html"},"https://cmdcolin.github.io/2020-12-24.html")),(0,s.kt)("p",null,"It is possible I zoomed ahead too fast to make this a continuous\ntutorial, but overall I just wanted to post an update"),(0,s.kt)("p",null,"In pt. 1 I learned how to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"aws-sam")," CLI tool. This was a great\ninsight for me about automating deployments. I can now simply run ",(0,s.kt)("inlineCode",{parentName:"p"},"sam\ndeploy")," and it will create new dynamodb tables, lambda functions, etc."),(0,s.kt)("p",null,"After writing pt 1. I converted the existing vue-js app that was in the\naws tutorial and converted it to react. Then I extended the app to allow"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Posting comments on photos"),(0,s.kt)("li",{parentName:"ul"},"Uploading multiple files"),(0,s.kt)("li",{parentName:"ul"},"Uploading videos\netc.")),(0,s.kt)("p",null,"It will be hard to summarize all the changes since now the app has taken\noff a little bit but it looks like this:"),(0,s.kt)("p",null,"Repo structure"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"}," ./frontend # created using npx create-react-app frontend --template\n typescript\n ./frontend/src/App.tsx # main frontend app code in react\n ./lambdas/\n ./lambdas/postFile # post a file to the lambda, this uploads a row to\n dynamodb and returns a pre-signed URL for uploading (note that if the\n client failed it's upload, that row in the lambda DB might be in a bad\n state...)\n ./lambdas/getFiles # get all files that were ever posted\n ./lambdas/postComment # post a comment on a picture with POST\n request\n ./lambdas/getComments?file=filename.jpg # get comments on a\n picture/video with GET request\n")),(0,s.kt)("p",null,"Here is a detailed code for uploading the file. We upload one file at a\ntime, but the client code post to the lambda endpoint individually for\neach file"),(0,s.kt)("p",null,"This generates a pre-signed URL to allow the client-side JS (not the\nlambda itself) to directly upload to S3, and also posts a row in the S3\nto the filename that will. It is very similar code in\nto\xa0",(0,s.kt)("a",{parentName:"p",href:"https://cmdcolin.github.io/2020-12-24.html"},"https://cmdcolin.github.io/2020-12-24.html")),(0,s.kt)("p",null,"./lambdas/postFile/app.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},' "use strict";\n\n const AWS = require("aws-sdk");\n const multipart = require("./multipart");\n AWS.config.update({ region: process.env.AWS_REGION });\n const s3 = new AWS.S3();\n\n // Change this value to adjust the signed URL\'s expiration\n const URL_EXPIRATION_SECONDS = 300;\n\n // Main Lambda entry point\n exports.handler = async (event) => {\n \xa0return await getUploadURL(event);\n };\n\n const { AWS_REGION: region } = process.env;\n\n const dynamodb = new AWS.DynamoDB({ apiVersion: "2012-08-10", region });\n\n async function uploadPic({\n \xa0timestamp,\n \xa0filename,\n \xa0message,\n \xa0user,\n \xa0date,\n \xa0contentType,\n }) {\n \xa0const params = {\n \xa0 \xa0Item: {\n \xa0 \xa0 \xa0timestamp: {\n \xa0 \xa0 \xa0 \xa0N: `${timestamp}`,\n \xa0 \xa0 \xa0},\n \xa0 \xa0 \xa0filename: {\n \xa0 \xa0 \xa0 \xa0S: filename,\n \xa0 \xa0 \xa0},\n \xa0 \xa0 \xa0message: {\n \xa0 \xa0 \xa0 \xa0S: message,\n \xa0 \xa0 \xa0},\n \xa0 \xa0 \xa0user: {\n \xa0 \xa0 \xa0 \xa0S: user,\n \xa0 \xa0 \xa0},\n \xa0 \xa0 \xa0date: {\n \xa0 \xa0 \xa0 \xa0S: date,\n \xa0 \xa0 \xa0},\n \xa0 \xa0 \xa0contentType: {\n \xa0 \xa0 \xa0 \xa0S: contentType,\n \xa0 \xa0 \xa0},\n \xa0 \xa0},\n \xa0 \xa0TableName: "files",\n \xa0};\n \xa0return dynamodb.putItem(params).promise();\n }\n\n const getUploadURL = async function (event) {\n \xa0try {\n \xa0 \xa0const data = multipart.parse(event);\n \xa0 \xa0const { filename, contentType, user, message, date } = data;\n \xa0 \xa0const timestamp = +Date.now();\n \xa0 \xa0const Key = `${timestamp}-${filename}`;\n\n \xa0 \xa0// Get signed URL from S3\n \xa0 \xa0const s3Params = {\n \xa0 \xa0 \xa0Bucket: process.env.UploadBucket,\n \xa0 \xa0 \xa0Key,\n \xa0 \xa0 \xa0Expires: URL_EXPIRATION_SECONDS,\n \xa0 \xa0 \xa0ContentType: contentType,\n\n \xa0 \xa0 \xa0// This ACL makes the uploaded object publicly readable. You must also uncomment\n \xa0 \xa0 \xa0// the extra permission for the Lambda function in the SAM template.\n\n \xa0 \xa0 \xa0ACL: "public-read",\n \xa0 \xa0};\n\n \xa0 \xa0const uploadURL = await s3.getSignedUrlPromise("putObject", s3Params);\n\n \xa0 \xa0await uploadPic({\n \xa0 \xa0 \xa0timestamp,\n \xa0 \xa0 \xa0filename: Key,\n \xa0 \xa0 \xa0message,\n \xa0 \xa0 \xa0user,\n \xa0 \xa0 \xa0date,\n \xa0 \xa0 \xa0contentType,\n \xa0 \xa0});\n\n \xa0 \xa0return JSON.stringify({\n \xa0 \xa0 \xa0uploadURL,\n \xa0 \xa0 \xa0Key,\n \xa0 \xa0});\n \xa0} catch (e) {\n \xa0 \xa0const response = {\n \xa0 \xa0 \xa0statusCode: 500,\n \xa0 \xa0 \xa0body: JSON.stringify({ message: `${e}` }),\n \xa0 \xa0};\n \xa0 \xa0return response;\n \xa0}\n };\n\n\n\n')),(0,s.kt)("p",null,"./lambdas/getFiles/app.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},' // eslint-disable-next-line import/no-unresolved\n const AWS = require("aws-sdk");\n\n const { AWS_REGION: region } = process.env;\n\n const docClient = new AWS.DynamoDB.DocumentClient();\n\n const getItems = function () {\n   const params = {\n   \xa0 TableName: "files",\n   };\n\n   return docClient.scan(params).promise();\n };\n\n exports.handler = async (event) => {\n   try {\n   \xa0 const result = await getItems();\n   \xa0 return {\n   \xa0 \xa0 statusCode: 200,\n   \xa0 \xa0 body: JSON.stringify(result),\n   \xa0 };\n   } catch (e) {\n   \xa0 return {\n   \xa0 \xa0 statusCode: 400,\n   \xa0 \xa0 body: JSON.stringify({ message: `${e}` }),\n   \xa0 };\n   }\n };\n\n')),(0,s.kt)("p",null,"./frontend/src/App.tsx (excerpt)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'\n async function myfetch(params: string, opts?: any) {\n \xa0const response = await fetch(params, opts);\n \xa0if (!response.ok) {\n \xa0 \xa0throw new Error(`HTTP ${response.status}\n ${response.statusText}`);\n \xa0}\n \xa0return response.json();\n }\n\n\n function UploadDialog({\n \xa0open,\n \xa0onClose,\n }: {\n \xa0open: boolean;\n \xa0onClose: () => void;\n }) {\n \xa0const [images, setImages] = useState<FileList>();\n \xa0const [error, setError] = useState<Error>();\n \xa0const [loading, setLoading] = useState(false);\n \xa0const [total, setTotal] = useState(0);\n \xa0const [completed, setCompleted] = useState(0);\n \xa0const [user, setUser] = useState("");\n \xa0const [message, setMessage] = useState("");\n \xa0const classes = useStyles();\n\n \xa0const handleClose = () => {\n \xa0 \xa0setError(undefined);\n \xa0 \xa0setLoading(false);\n \xa0 \xa0setImages(undefined);\n \xa0 \xa0setCompleted(0);\n \xa0 \xa0setTotal(0);\n \xa0 \xa0setMessage("");\n \xa0 \xa0onClose();\n \xa0};\n\n \xa0return (\n \xa0 \xa0<Dialog onClose={handleClose} open={open}>\n \xa0 \xa0 \xa0<DialogTitle>upload a file (supports picture or video)</DialogTitle>\n\n \xa0 \xa0 \xa0<DialogContent>\n \xa0 \xa0 \xa0 \xa0<label htmlFor="user">name (optional) </label>\n \xa0 \xa0 \xa0 \xa0<input\n \xa0 \xa0 \xa0 \xa0 \xa0type="text"\n \xa0 \xa0 \xa0 \xa0 \xa0value={user}\n \xa0 \xa0 \xa0 \xa0 \xa0onChange={(event) => setUser(event.target.value)}\n \xa0 \xa0 \xa0 \xa0 \xa0id="user"\n \xa0 \xa0 \xa0 \xa0/>\n \xa0 \xa0 \xa0 \xa0<br />\n \xa0 \xa0 \xa0 \xa0<label htmlFor="user">message (optional) </label>\n \xa0 \xa0 \xa0 \xa0<input\n \xa0 \xa0 \xa0 \xa0 \xa0type="text"\n \xa0 \xa0 \xa0 \xa0 \xa0value={message}\n \xa0 \xa0 \xa0 \xa0 \xa0onChange={(event) => setMessage(event.target.value)}\n \xa0 \xa0 \xa0 \xa0 \xa0id="message"\n \xa0 \xa0 \xa0 \xa0/>\n \xa0 \xa0 \xa0 \xa0<br />\n \xa0 \xa0 \xa0 \xa0<input\n \xa0 \xa0 \xa0 \xa0 \xa0multiple\n \xa0 \xa0 \xa0 \xa0 \xa0type="file"\n \xa0 \xa0 \xa0 \xa0 \xa0onChange={(e) => {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0let files = e.target.files;\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0if (files && files.length) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setImages(files);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0}\n \xa0 \xa0 \xa0 \xa0 \xa0}}\n \xa0 \xa0 \xa0 \xa0/>\n\n \xa0 \xa0 \xa0 \xa0{error ? (\n \xa0 \xa0 \xa0 \xa0 \xa0<div className={classes.error}>{`${error}`}</div>\n \xa0 \xa0 \xa0 \xa0) : loading ? (\n \xa0 \xa0 \xa0 \xa0 \xa0`Uploading...${completed}/${total}`\n \xa0 \xa0 \xa0 \xa0) : completed ? (\n \xa0 \xa0 \xa0 \xa0 \xa0<h2>Uploaded </h2>\n \xa0 \xa0 \xa0 \xa0) : null}\n\n \xa0 \xa0 \xa0 \xa0<DialogActions>\n \xa0 \xa0 \xa0 \xa0 \xa0<Button\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0style={{ textTransform: "none" }}\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0onClick={async () => {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0try {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0if (images) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setLoading(true);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setError(undefined);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setCompleted(0);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setTotal(images.length);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0await Promise.all(\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Array.from(images).map(async (image) => {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0const data = new FormData();\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0data.append("message", message);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0data.append("user", user);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0data.append("date", new Date().toLocaleString());\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0data.append("filename", image.name);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0data.append("contentType", image.type);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0const res = await myfetch(API_ENDPOINT + "/postFile", {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0method: "POST",\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0body: data,\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0});\n\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0await myfetch(res.uploadURL, {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0method: "PUT",\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0body: image,\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0});\n\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setCompleted((completed) => completed + 1);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0})\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setTimeout(() => {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0handleClose();\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0}, 500);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0}\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0} catch (e) {\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0setError(e);\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0}\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0}}\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0color="primary"\n \xa0 \xa0 \xa0 \xa0 \xa0>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0upload\n \xa0 \xa0 \xa0 \xa0 \xa0</Button>\n \xa0 \xa0 \xa0 \xa0 \xa0<Button\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0onClick={handleClose}\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0color="primary"\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0style={{ textTransform: "none" }}\n \xa0 \xa0 \xa0 \xa0 \xa0>\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0cancel\n \xa0 \xa0 \xa0 \xa0 \xa0</Button>\n \xa0 \xa0 \xa0 \xa0</DialogActions>\n \xa0 \xa0 \xa0</DialogContent>\n \xa0 \xa0</Dialog>\n \xa0);\n }\n\n')),(0,s.kt)("p",null,"template.yaml for AWS"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' AWSTemplateFormatVersion: 2010-09-09\n Transform: AWS::Serverless-2016-10-31\n Description: S3 Uploader\n\n Resources:\n \xa0filesDynamoDBTable:\n \xa0 \xa0Type: AWS::DynamoDB::Table\n \xa0 \xa0Properties:\n \xa0 \xa0 \xa0AttributeDefinitions:\n \xa0 \xa0 \xa0 \xa0- AttributeName: "timestamp"\n \xa0 \xa0 \xa0 \xa0 \xa0AttributeType: "N"\n \xa0 \xa0 \xa0KeySchema:\n \xa0 \xa0 \xa0 \xa0- AttributeName: "timestamp"\n \xa0 \xa0 \xa0 \xa0 \xa0KeyType: "HASH"\n \xa0 \xa0 \xa0ProvisionedThroughput:\n \xa0 \xa0 \xa0 \xa0ReadCapacityUnits: "5"\n \xa0 \xa0 \xa0 \xa0WriteCapacityUnits: "5"\n \xa0 \xa0 \xa0TableName: "files"\n\n \xa0# HTTP API\n \xa0MyApi:\n \xa0 \xa0Type: AWS::Serverless::HttpApi\n \xa0 \xa0Properties:\n \xa0 \xa0 \xa0# CORS configuration - this is open for development only and\n should be restricted in prod.\n \xa0 \xa0 \xa0# See\n <https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html>\n \xa0 \xa0 \xa0CorsConfiguration:\n \xa0 \xa0 \xa0 \xa0AllowMethods:\n \xa0 \xa0 \xa0 \xa0 \xa0- GET\n \xa0 \xa0 \xa0 \xa0 \xa0- POST\n \xa0 \xa0 \xa0 \xa0 \xa0- DELETE\n \xa0 \xa0 \xa0 \xa0 \xa0- OPTIONS\n \xa0 \xa0 \xa0 \xa0AllowHeaders:\n \xa0 \xa0 \xa0 \xa0 \xa0- "*"\n \xa0 \xa0 \xa0 \xa0AllowOrigins:\n \xa0 \xa0 \xa0 \xa0 \xa0- "*"\n\n \xa0UploadRequestFunction:\n \xa0 \xa0Type: AWS::Serverless::Function\n \xa0 \xa0Properties:\n \xa0 \xa0 \xa0CodeUri: lambdas/postFile/\n \xa0 \xa0 \xa0Handler: app.handler\n \xa0 \xa0 \xa0Runtime: nodejs12.x\n \xa0 \xa0 \xa0Timeout: 3\n \xa0 \xa0 \xa0MemorySize: 128\n \xa0 \xa0 \xa0Environment:\n \xa0 \xa0 \xa0 \xa0Variables:\n \xa0 \xa0 \xa0 \xa0 \xa0UploadBucket: !Ref S3UploadBucket\n \xa0 \xa0 \xa0Policies:\n \xa0 \xa0 \xa0 \xa0- AmazonDynamoDBFullAccess\n \xa0 \xa0 \xa0 \xa0- S3WritePolicy:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0BucketName: !Ref S3UploadBucket\n \xa0 \xa0 \xa0 \xa0- Statement:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- Effect: Allow\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Resource: !Sub "arn:aws:s3:::${S3UploadBucket}/"\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Action:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- s3:putObjectAcl\n \xa0 \xa0 \xa0Events:\n \xa0 \xa0 \xa0 \xa0UploadAssetAPI:\n \xa0 \xa0 \xa0 \xa0 \xa0Type: HttpApi\n \xa0 \xa0 \xa0 \xa0 \xa0Properties:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Path: /postFile\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Method: post\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ApiId: !Ref MyApi\n\n\n \xa0FileReadFunction:\n \xa0 \xa0Type: AWS::Serverless::Function\n \xa0 \xa0Properties:\n \xa0 \xa0 \xa0CodeUri: lambdas/getFiles/\n \xa0 \xa0 \xa0Handler: app.handler\n \xa0 \xa0 \xa0Runtime: nodejs12.x\n \xa0 \xa0 \xa0Timeout: 3\n \xa0 \xa0 \xa0MemorySize: 128\n \xa0 \xa0 \xa0Policies:\n \xa0 \xa0 \xa0 \xa0- AmazonDynamoDBFullAccess\n \xa0 \xa0 \xa0Events:\n \xa0 \xa0 \xa0 \xa0UploadAssetAPI:\n \xa0 \xa0 \xa0 \xa0 \xa0Type: HttpApi\n \xa0 \xa0 \xa0 \xa0 \xa0Properties:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Path: /getFiles\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0Method: get\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0ApiId: !Ref MyApi\n\n \xa0## S3 bucket\n \xa0S3UploadBucket:\n \xa0 \xa0Type: AWS::S3::Bucket\n \xa0 \xa0Properties:\n \xa0 \xa0 \xa0CorsConfiguration:\n \xa0 \xa0 \xa0 \xa0CorsRules:\n \xa0 \xa0 \xa0 \xa0 \xa0- AllowedHeaders:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- "*"\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0AllowedMethods:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- GET\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- PUT\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- HEAD\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0AllowedOrigins:\n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0- "*"\n\n\n ## Take a note of the outputs for deploying the workflow templates\n in this sample application\n Outputs:\n \xa0APIendpoint:\n \xa0 \xa0Description: "HTTP API endpoint URL"\n \xa0 \xa0Value: !Sub\n "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com"\n \xa0S3UploadBucketName:\n \xa0 \xa0Description: "S3 bucket for application uploads"\n \xa0 \xa0Value: !Ref "S3UploadBucket"\n\n')),(0,s.kt)("p",null,"To display all the pictures I use a switch from video or img tag based\non contentType.startsWith('video'). I also use the\xa0\"figcaption\" HTML tag\nto have a little caption on the pics/videos"),(0,s.kt)("p",null,"./frontend/src/App.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' function Media({\n \xa0file,\n \xa0style,\n \xa0onClick,\n \xa0children,\n }: {\n \xa0file: File;\n \xa0onClick?: Function;\n \xa0style?: React.CSSProperties;\n \xa0children?: React.ReactNode;\n }) {\n \xa0const { filename, contentType } = file;\n \xa0const src = `${BUCKET}/${filename}`;\n \xa0return (\n \xa0 \xa0<figure style={{ display: "inline-block" }}>\n \xa0 \xa0 \xa0<picture>\n \xa0 \xa0 \xa0 \xa0{contentType.startsWith("video") ? (\n \xa0 \xa0 \xa0 \xa0 \xa0<video style={style} src={src} controls onClick={onClick as\n any} />\n \xa0 \xa0 \xa0 \xa0) : (\n \xa0 \xa0 \xa0 \xa0 \xa0<img style={style} src={src} onClick={onClick as any} />\n \xa0 \xa0 \xa0 \xa0)}\n \xa0 \xa0 \xa0</picture>\n \xa0 \xa0 \xa0<figcaption>{children}</figcaption>\n \xa0 \xa0</figure>\n \xa0);\n }\n')),(0,s.kt)("p",null,"Now the really fun part: if you get an image of a picture frame\nlike\xa0",(0,s.kt)("a",{parentName:"p",href:"https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T"},"https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T")),(0,s.kt)("p",null,"You can make it a border for any image or video using border-image CSS"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' \xa0 \xa0 style = {\n \xa0 \xa0 \xa0 \xa0 border: "30px solid",\n \xa0 \xa0 \xa0 \xa0 borderImage: `url(borders/${border}) 30 round`\n \xa0 \xa0 }\n')),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"/media/638602799897329664_0.png",alt:null})),(0,s.kt)("p",null,"Summary"),(0,s.kt)("p",null,"The template.yaml automatically deploys the lambdas for postFile/getFile\nand the files table in dynamoDB"),(0,s.kt)("p",null,"The React app uses postFile for each file in an ",(0,s.kt)("inlineCode",{parentName:"p"},'<input type="file"/>'),",\nthe code uses React hooks and functional components but is hopefully not\ntoo complex"),(0,s.kt)("p",null,"I also added commenting on photos. The code is not shown here but you\ncan look in the source code for details"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"/media/638602799897329664_1.png",alt:null})),(0,s.kt)("p",null,"Overall this has been a good experience learning to develop this app and\nlearning to automate the cloud deployment is really good for ensuring\nreliability and fast iteration."),(0,s.kt)("p",null,"Also quick note on serverless CLI vs aws-sam. I had tried a serverless\nCLI tutorial from another user but it didn't click with me, while the\naws-sam tutorial from\n",(0,s.kt)("a",{parentName:"p",href:"https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1"},"https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1"),"\xa0was\na great kick start for me. I am sure the serverless CLI is great too and\nit ensures a bit less vendor lock in, but then is also a little bit\nremoved from the native aws config schemas. Probably fine though"),(0,s.kt)("p",null,"Source code\xa0",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cmdcolin/aws_photo_gallery/"},"https://github.com/cmdcolin/aws_photo_gallery/")),(0,s.kt)("p",null,"::: {#footer}\n","[ December 26th, 2020 4:44pm ]","{#timestamp}\n:::"))}c.isMDXComponent=!0},6670:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/2020-12-26",function(){return t(2520)}])},159:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return a}})},219:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}t.d(n,{Z:function(){return a}})}},function(e){e.O(0,[774,888,179],(function(){return n=6670,e(e.s=n);var n}));var n=e.O();_N_E=n}]);