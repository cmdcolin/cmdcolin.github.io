(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8288],{3905:function(e,t,n){"use strict";n.d(t,{kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),h=function(e){var t=a.useContext(s),n=t;return e&&(n="function"===typeof e?e(t):i(i({},t),e)),n},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=h(n),d=r,f=p["".concat(s,".").concat(d)]||p[d]||c[d]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"===typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"===typeof e?e:r,i[1]=l;for(var h=2;h<o;h++)i[h]=n[h];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4995:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return r}});var a=n(5893);function r(e){var t=e.children;return(0,a.jsxs)("div",{children:[(0,a.jsx)("a",{href:"/",children:"Return home"}),(0,a.jsx)("div",{className:"blog",children:t})]})}},3163:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return c}});var a=n(159),r=n(219),o=(n(7294),n(3905)),i=n(4995),l=["components"],s={},h=function(e){var t=e.children;return(0,o.kt)(i.default,null,t)};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)(h,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"High DPI rendering on HTML5 canvas: some problems and solutions"),(0,o.kt)("p",null,'\xa0Recently our code has been moving towards the use of HTML5 canvas, as\nit has many benefits. I felt that if we were going to keep this going\ntowards canvas, the rendering needed to match the quality of regular\nHTML based tracks. Unfortunately, the HTML5 canvas by default looks very\n"fuzzy" on a high resolution display (Figure 1).\\'),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"../../media/86542847038_0.jpg",alt:null})),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Figure 1.")," An example of really bad font rendering before and after\nenabling high resolution on the HTML5 canvas."),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Background\\\n")),(0,o.kt)("p",null,"Major credit goes to the tutorial at\n",(0,o.kt)("a",{parentName:"p",href:"http://www.html5rocks.com/en/tutorials/canvas/hidpi/"},"http://www.html5rocks.com/en/tutorials/canvas/hidpi/")," for pioneering\nthis! \xa0The html5rocks tutorial, written in 2010 it still remains\nrelevant. The major thing it introduces is these browser variables\ncalled devicePixelRatio and backingStoreRatio that can be used to adjust\nyour canvas drawing. In my interpretation, these two variables have the\nfollowing purpose:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"devicePixelRatio")),(0,o.kt)("p",null,"On high DPI displays, screen pixels are actually abstracted away from\nthe physical pixels, so, when you create some HTML element with width\n100, height 100, that element actually takes up a larger number of\npixels than 100x100. The actual ratio of the pixels that it takes up is\n100","*","devicePixelRatio x 100","*","devicePixelRatio. On a high DPI platform\nlike Retina, the devicePixelRatio is normally 2 at 100% zoom.\\"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"backingStoreRatio")),(0,o.kt)("p",null,'The backing store ratio doesn\'t seem to change as much from platform to\nplatform, but my interpretation of this value is that it essentially\ngives the size of the memory buffer for the canvas. On my platform, the\nbackingStoreRatio is "1". I think this value had more historical use,\nbut it may not really be used anymore (update aug 7th, 2015 deprecated?\n',(0,o.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated"},"http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated"),")\\"),(0,o.kt)("p",null,"So, what are the consequences of the backing store ratio and the device\npixel ratio? If the backing store ratio equals the device pixel ratio,\nthen no scaling takes place, but what we often see is that they are not\nequal, so the image is up-scaled from the backing store to the screen,\nand then it is stretched and blurred."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"So, how do you enable the high DPI mode?")),(0,o.kt)("p",null,"The solution to properly scale your HTML5 canvas content involves a\ncouple of steps that are described in the tutorial here\n",(0,o.kt)("a",{parentName:"p",href:"http://www.html5rocks.com/en/tutorials/canvas/hidpi/"},"http://www.html5rocks.com/en/tutorials/canvas/hidpi/"),", but here is the\nessence:"),(0,o.kt)("p",null,"1",")"," Use the canvas.scale method, which tells the canvas's drawing area\nto become bigger, but keeps drawing operations consistent."),(0,o.kt)("p",null,"2",")"," The scaling factor for the canvas.scale method is\ndevicePixelRatio/backingStoreRatio. This will be 2 for instance on a\nRetina screen at a typical 100% zoom level. The zoom level is relevant\nwhich will be discussed later in this post..."),(0,o.kt)("p",null,"3",")",' Multiply the width and height attributes of the canvas by\ndevicePixelRatio/backingStoreRatio, so that the\xa0"canvas object" is as\nbig as the scaled size.\\'),(0,o.kt)("p",null,"4",")"," Here's the tricky part: set the CSS width and height attributes to\nbe the UNSCALED size that you want."),(0,o.kt)("p",null,'Note: you can also set CSS width:100% or something and then the canvas\nwill be sized appropriately. Normally though, what you will have is\nsomething like \\<canvas width=640 height=480\nstyle="width:320px;height:240px"',">"," so you can see that the canvas size\nis larger than what the CSS actually resizes it to be.\\"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Issues: Browser zoom and fractional devicePixelRatios\\\n")),(0,o.kt)("p",null,"When I first started this project, the benefit of this high resolution\nrendering seemed limited to the fancy people who had Retina or other\nHigh DPI screens. However, what I didn't even realize is that the\ndevicePixelRatio value changes depending on browser zoom settings, so\neven people with a regular screen can have improved rendering of the\nHTML5 canvas. (Update: we even saw that if you have customized canvas\nrenderings, then you an generate good screenshots of the canvas with\nPhantomJS too. See ",(0,o.kt)("a",{parentName:"p",href:"http://searchvoidstar.tumblr.com/post/112494997473/creating-high-resolution-screenshots-of-jbrowse"},"my other more recent\narticle"),")\\"),(0,o.kt)("p",null,"The issue with these zoom settings though is that when you change the\nzoom level, especially on chrome and firefox browsers, the\ndevicePixelRatio can end up being a fractional value e.g. 2.223277 which\ncan result in sub-pixel rendering problems."),(0,o.kt)("p",null,"Remember that when we scaled the canvas, it also scales the drawing\nfunctions to be consistent, so that essentially if you draw a 1 pixel\nwidth line on a scaled canvas, it might draw a 2.223277 pixel width\nline. Hence, we can get fuzzy rendering issues.\\"),(0,o.kt)("p",null,"This issue is very noticeable if you draw many 1px wide lines right next\nto each other. In this case, there will be noticeable gaps between the\nlines due to the imperfect rendering (see green box below)."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://i.imgur.com/THsfjX4.png"})),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://i.imgur.com/THsfjX4.png"})),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://i.imgur.com/THsfjX4.png"})),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"../../media/86542847038_1.png",alt:null})),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Figure 2.")," Examples of 1px wide lines rendered next to each other when\nthere is fractional devicePixelRatio."),(0,o.kt)("p",null,"\\\nBottom Green box: 1px wide lines drawn 1px apart. (note: bad rendering!\ntiny gaps)\xa0\\\nMiddle Blue box: 1px wide line rendered every 2 px (intentional gaps for\ndemonstration).\xa0\\\nTop Red box: 1.3px wide lines (a fudge factor is used to make eliminate\nthe tiny gaps).\\"),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"My solution: The Red Box -- add a fudge factor\\\n")),(0,o.kt)("p",null,'As you can see in the above figure, my solution to the sub-pixel\nrendering is to add a "fudge factor" to the line width to make it render\nlines that are 1.3px wide instead of 1px wide when the devicePixelRatio\nis not a whole number, which effectively eliminates any gaps due to the\nsub-pixel rendering problem.'),(0,o.kt)("p",null,"I heuristically determined the value 1.3px to be sufficient, as testing\nvalues like 1.1px, 1.2px and even 1.25px were too small. I'd love to see\na proof of determining this value empirically, or even better, something\nthat isn't this big of a hack, but for now that's what I have."),(0,o.kt)("p",null,"You can see the effect of the fudge factor (red box) vs the bad\nrendering (green box) in Figure 2. You can also try this out yourself\nhere ",(0,o.kt)("a",{parentName:"p",href:"http://jsfiddle.net/4xe4d/"},"http://jsfiddle.net/4xe4d/"),", just zoom your browser and then\nrefresh (zooming and not refreshing doesn't modify device pixel ratio)\nto test out different values of devicePixelRatio.\\"),(0,o.kt)("p",null,"\\"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Conclusion")),(0,o.kt)("p",null,"In conclusion...we now have high resolution rendering on canvas! The\nsolution for drawing lots of lines right next to each other is sort of\nsuboptimal, so the question continues...what shall be done in this\ncase?\\"),(0,o.kt)("p",null,"Maybe someone could implement some sort of library that replaces the\ncanvas.scale method to do better layout and obtain more pixel perfect\nrendering. Alternatively, you could force the scaling factor to always\nround to a whole number. This is actually not a bad solution, because\nthe canvas is already being resized, and\xa0then you can control your\nrendering better.\\"),(0,o.kt)("p",null,"Thanks for reading\\"),(0,o.kt)("p",null,"::: {#footer}\n","[ May 22nd, 2014 7:03pm ]","{#timestamp} ","[html5]","{.tag} ","[canvas]","{.tag}\n","[javascript]","{.tag}\n:::"))}c.isMDXComponent=!0},4790:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/2014-05-22",function(){return n(3163)}])},159:function(e,t,n){"use strict";function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}n.d(t,{Z:function(){return a}})},219:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}n.d(t,{Z:function(){return a}})}},function(e){e.O(0,[9774,2888,179],(function(){return t=4790,e(e.s=t);var t}));var t=e.O();_N_E=t}]);