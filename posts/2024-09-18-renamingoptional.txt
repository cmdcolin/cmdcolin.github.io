2:"$Sreact.fragment"
3:I[231,["231","static/chunks/231-fc74e6e791c0837d.js","931","static/chunks/app/page-95d4a906a5a795f0.js"],""]
4:I[9275,[],""]
5:I[1343,[],""]
7:I[3120,[],"OutletBoundary"]
9:I[3120,[],"MetadataBoundary"]
b:I[3120,[],"ViewportBoundary"]
d:I[6130,[],""]
1:HL["/_next/static/css/d19cfa26cd1ef694.css","style"]
0:{"P":null,"b":"V_rwE_Kx0SP0ot5L1k3MC","p":"","c":["","posts","2024-09-18-renamingoptional"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2024-09-18-renamingoptional","d"],{"children":["__PAGE__?{\"id\":\"2024-09-18-renamingoptional\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"mt-16","children":[["$","$L3",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L3",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L3",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L3",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L3",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L3",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L3",null,{"className":"m-2","href":"/about","children":"About"}]]}]]}]}]]}],{"children":["posts",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["id","2024-09-18-renamingoptional","d"],["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","iImwcZKgsYNwY4qkYeKQn",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}]]],"m":"$undefined","G":"$d","s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:I[1458,["722","static/chunks/app/posts/%5Bid%5D/page-e50cd2f34f19f050.js"],"default",1]
e:T29ba,<h2 id="scenario"><a aria-hidden="true" tabindex="-1" href="#scenario"><a href="#scenario" style="margin-right: 10px">#</a></a>Scenario</h2>
<p>The "doStuff" team at your company created a function for you to use</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> doStuff</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75;font-style:italic">x</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">y</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">z</span><span style="color:#ABB2BF"> }: { </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">z</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF"> }) {</span></span>
<span data-line=""><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">z</span><span style="color:#ABB2BF"> })</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>and then you diligently call it in your code like this</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> obj</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">z</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF"> }</span></span>
<span data-line=""><span style="color:#61AFEF">doStuff</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">obj</span><span style="color:#ABB2BF">)</span></span></code></pre></figure>
<p>all fine and good</p>
<h2 id="later-on-the-optional-prop-is-renamed"><a aria-hidden="true" tabindex="-1" href="#later-on-the-optional-prop-is-renamed"><a href="#later-on-the-optional-prop-is-renamed" style="margin-right: 10px">#</a></a>Later on, the optional "prop" is renamed</h2>
<p>The <code>doStuff</code> team says, well, it's not really a true "z coordinate"....it's
more of a "z-index" so they change the function definition to be</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> doStuff</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75;font-style:italic">x</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">y</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">zIndex</span><span style="color:#ABB2BF"> }: { </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">zIndex</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF"> }) {</span></span>
<span data-line=""><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">zIndex</span><span style="color:#ABB2BF"> })</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<h2 id="now-you-might-have-a-bug"><a aria-hidden="true" tabindex="-1" href="#now-you-might-have-a-bug"><a href="#now-you-might-have-a-bug" style="margin-right: 10px">#</a></a>Now you might have a bug</h2>
<p>Since <code>zIndex</code> is optional, typescript will not warn you about <code>zIndex</code> not
being supplied by your existing code. Typescript is also not bothered that you
have this "rider" variable <code>z</code> that "does nothing" in this case.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> obj</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">z</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF"> }</span></span>
<span data-line=""><span style="color:#61AFEF">doStuff</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">obj</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// no typescript error, z is no longer used, zIndex is optional, and you don't get the behavior you want</span></span></code></pre></figure>
<h2 id="but-wait-why-didnt-typescript-catch-it"><a aria-hidden="true" tabindex="-1" href="#but-wait-why-didnt-typescript-catch-it"><a href="#but-wait-why-didnt-typescript-catch-it" style="margin-right: 10px">#</a></a>But wait, why didn't typescript catch it?</h2>
<p>Here is the funny thing:</p>
<ul>
<li>
<p>Typescript DOES NOT catch this issue when you pass it via this separately
created "obj" variable.</p>
</li>
<li>
<p>Typescript DOES(!!!) catch this issue when you pass it directly to the
function (as an "object literal")</p>
</li>
</ul>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">doStuff</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">x</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">y</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">z</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF"> }) </span><span style="color:#7F848E;font-style:italic">// ERROR!</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// Object literal may only specify known properties, and 'z' does not exist in type '{ x: number; y: number; zIndex?: number | undefined; }'.</span></span></code></pre></figure>
<p>Demo playground</p>
<p><a href="https://www.typescriptlang.org/play/?#code/FAMwrgdgxgLglgewgAgCYIMozCEAKAb2QA8AaZAT3IC9kBfALmSOKYjAFsAjAUwCcA3JTadeg5NQD8I7v3oBKZsGTIoSAM4IANjwB0WhAHNCJclQkLgdYKEixEKdFhwgATCbKUaASQioexPRMLDJiQhSh-ELUvv7E0sjssnwKSipqEJo6+kYeZj5+AZbWNsBO2LiErACMpBGupNQMAMx08qUA9B1oCDzqqgCGMFAAFshwMGWYFW5VDLX1jS1tNl09fRAA5DCDw2MTwBnqOwhcAFYAvAQ1dQwNTa1Tzrjup2ftpUA">https://www.typescriptlang.org/play/?#code/FAMwrgdgxgLglgewgAgCYIMozCEAKAb2QA8AaZAT3IC9kBfALmSOKYjAFsAjAUwCcA3JTadeg5NQD8I7v3oBKZsGTIoSAM4IANjwB0WhAHNCJclQkLgdYKEixEKdFhwgATCbKUaASQioexPRMLDJiQhSh-ELUvv7E0sjssnwKSipqEJo6+kYeZj5+AZbWNsBO2LiErACMpBGupNQMAMx08qUA9B1oCDzqqgCGMFAAFshwMGWYFW5VDLX1jS1tNl09fRAA5DCDw2MTwBnqOwhcAFYAvAQ1dQwNTa1Tzrjup2ftpUA</a></p>
<h2 id="footnote"><a aria-hidden="true" tabindex="-1" href="#footnote"><a href="#footnote" style="margin-right: 10px">#</a></a>Footnote</h2>
<p>I am certainly not the only person to come across this "topic/issue", and people
often come across it in different contexts.</p>
<p>My particular take away is to "be careful when you rename optional props". Of
course, changing any API comes with risks, but this one particularly :)</p>
<h2 id="more-resources"><a aria-hidden="true" tabindex="-1" href="#more-resources"><a href="#more-resources" style="margin-right: 10px">#</a></a>More resources</h2>
<p>Typescript Deep Dive - "Freshness"</p>
<p><a href="https://basarat.gitbook.io/typescript/type-system/freshness">https://basarat.gitbook.io/typescript/type-system/freshness</a></p>
<h2 id="follow-up"><a aria-hidden="true" tabindex="-1" href="#follow-up"><a href="#follow-up" style="margin-right: 10px">#</a></a>Follow up</h2>
<p>This post was given lots of downvotes in /r/typescript and sarcasm that "no duh,
breaking changes are breaking".</p>
<p>However, some helpful comments were made also. Read on
<a href="https://www.reddit.com/r/typescript/comments/1fk1rqe/be_careful_when_you_rename_an_optional_prop_in/">https://www.reddit.com/r/typescript/comments/1fk1rqe/be_careful_when_you_rename_an_optional_prop_in/</a></p>
<p>I think maybe people are distracted that I posited this as the "doStuff team" vs
"you", but keep in mind this could just be your left brain vs right brain in an
actively developed codebase</p>6:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Be careful when you rename an optional \"prop\" in typescript"}],["$","h4",null,{"children":"2024-09-18"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}],["$","$Lf",null,{}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Be careful when you rename an optional \"prop\" in typescript"}],["$","meta","2",{"name":"description","content":"A blog"}]]
8:null
