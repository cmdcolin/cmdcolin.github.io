1:HL["/_next/static/css/97dc5fe527f5d592.css","style",{"crossOrigin":""}]
0:["oAsDfYHgZhEZr24-pW6WY",[[["",{"children":["posts",{"children":[["id","2022-11-20-the-react-tutorial-i-wish-i-had","d"],{"children":["__PAGE__?{\"id\":\"2022-11-20-the-react-tutorial-i-wish-i-had\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I[8326,["326","static/chunks/326-f70436363102ecf4.js","931","static/chunks/app/page-0c1302a539e2db94.js"],""]
5:I[6954,[],""]
6:I[7264,[],""]
2:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2022-11-20-the-react-tutorial-i-wish-i-had","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7","$L8",null],"segment":"__PAGE__?{\"id\":\"2022-11-20-the-react-tutorial-i-wish-i-had\"}"},"styles":null}],"segment":["id","2022-11-20-the-react-tutorial-i-wish-i-had","d"]},"styles":null}],"segment":"posts"},"styles":null}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}],["$","$L4",null,{"href":"/archive","children":"Blog archive"}],["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}],["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}],["$","$L4",null,{"href":"/books","children":"Books"}],["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
a:I[5854,["722","static/chunks/app/posts/%5Bid%5D/page-64ff32a4d1c61109.js"],""]
9:T8238,<p>When I was learning React, I found it very challenging, and my eyes would glaze
over any time I tried to learn</p>
<p>Here is a short tutorial that could help you get started. Ultimately, for me,
sitting down with a book was what finally helped me, but this blogpost aims to
be a sort of TLDR for certain concepts.</p>
<h3 id="the-simplest-react-component"><a aria-hidden="true" tabindex="-1" href="#the-simplest-react-component"><a href="#the-simplest-react-component" style="margin-right: 10px">#</a></a>The simplest React component</h3>
<p>Here is a "React component" that prints hello world in a div</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">HelloWorld</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Hello world!&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>I like to think of React components as "functions that return HTML". That is a
oversimplification, but it can be a helpful thinking tool to help you get
started.</p>
<h3 id="using-our-helloworld-component-in-another-component"><a aria-hidden="true" tabindex="-1" href="#using-our-helloworld-component-in-another-component"><a href="#using-our-helloworld-component-in-another-component" style="margin-right: 10px">#</a></a>Using our <code>HelloWorld</code> component in another component</h3>
<p>We said React can be thought of as "functions that return HTML" but we can also
combine them together.</p>
<p>For example, we can create a component named "App" that uses our "HelloWorld"
component</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">p</span><span style="color: #E4F0FB">>This is my app&#x3C;/</span><span style="color: #5DE4C7">p</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">HelloWorld</span><span style="color: #E4F0FB"> /></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>It is common to have an "App" level component, that renders all the other
components in your page</p>
<h3 id="how-do-these-components-get-rendered-to-html"><a aria-hidden="true" tabindex="-1" href="#how-do-these-components-get-rendered-to-html"><a href="#how-do-these-components-get-rendered-to-html" style="margin-right: 10px">#</a></a>How do these components get rendered to HTML?</h3>
<p>Typically, just once in your app, you use ReactDOM to render the "App" level
component to the page.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #ADD7FF">ReactDOM</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">react-dom</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">ReactDOM</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">render</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">App</span><span style="color: #E4F0FB"> /></span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">document</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">getElementById</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">root</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">))</span></span></code></pre>
<p>And in your index.html you have e.g.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FB">&#x3C;!</span><span style="color: #5DE4C7">doctype</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1; font-style: italic">html</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">html</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">body</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1; font-style: italic">id</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">root</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> </span><span style="color: #D0679D">/</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">&#x3C;/</span><span style="color: #5DE4C7">body</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;/</span><span style="color: #5DE4C7">html</span><span style="color: #E4F0FB">></span></span></code></pre>
<h3 id="accepting-parameters-to-your-components"><a aria-hidden="true" tabindex="-1" href="#accepting-parameters-to-your-components"><a href="#accepting-parameters-to-your-components" style="margin-right: 10px">#</a></a>Accepting parameters to your components</h3>
<p>React components can accept "props" which are like parameters to your component</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Hello</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">props</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">props</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Hello {name}!&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>We then pass props using HTML like attributes</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">Hello</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5; font-style: italic">name</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> /></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This will print "Hello Colin!"</p>
<h3 id="rendering-lists-of-items"><a aria-hidden="true" tabindex="-1" href="#rendering-lists-of-items"><a href="#rendering-lists-of-items" style="margin-right: 10px">#</a></a>Rendering lists of items</h3>
<p>The <code>{name}</code> inside the div is a little snippet of plain-JS code. It can be used
to do more complicated things. For example you can render a list of items</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">List</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">list</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> [</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Apples</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Oranges</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Pears</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">ul</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      {list</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">map</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">item </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">li</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5; font-style: italic">key</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{item}>{item}&#x3C;/</span><span style="color: #5DE4C7">li</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">))</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">ul</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Inside the "list" each item has a key prop that is specified. See
<a href="https://reactjs.org/docs/lists-and-keys.html">https://reactjs.org/docs/lists-and-keys.html</a> for more discussion on this</p>
<h3 id="how-do-i-use-react-in-my-own-app"><a aria-hidden="true" tabindex="-1" href="#how-do-i-use-react-in-my-own-app"><a href="#how-do-i-use-react-in-my-own-app" style="margin-right: 10px">#</a></a>How do I use React in my own app?</h3>
<p>Commonly, React is downloaded from npm using your package manager, but often
requires some extra steps to get JSX to compile which is often done by babel. I
will not cover a minimal React setup here, but I will recommend a couple setups
that make it easy for starting out.</p>
<ul>
<li>Use <code>create-react-app</code>. You run <code>npx create-react-app yourapp</code> on your command
line, this creates a folder named <code>yourapp</code> on your computer, and then you
<code>cd yourapp</code> to go into that directory and run <code>npm run start</code>. This starts a
"dev server" that runs at <a href="http://localhost:3000">http://localhost:3000</a>, and you can then change the
js files, and the results are instantly updated in your web browser</li>
<li>CodeSandbox: this is a 100% web based IDE that you can use to experiment with
React or other toolkits, visit <a href="https://codesandbox.io">https://codesandbox.io</a> and run "Create" and
then click "React app", this is the React app that it creates
<a href="https://codesandbox.io/s/cool-moon-7x96jk">https://codesandbox.io/s/cool-moon-7x96jk</a></li>
</ul>
<p>If you are trying to incorporate React into a legacy or existing project, then I
encourage you to experiment in these starter kit environments first. It can be
difficult to bolt on React to an existing environment in some ways and
understanding the basics will help.</p>
<h3 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h3>
<p>I hope this helps you get started with React, let me know if you have any
questions.</p>
<h3 id="footnote-1-class-based-components"><a aria-hidden="true" tabindex="-1" href="#footnote-1-class-based-components"><a href="#footnote-1-class-based-components" style="margin-right: 10px">#</a></a>Footnote 1. Class based components</h3>
<p>In the old days, React used "class based components", here is the Hello world
example as a class based component</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">class</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">HelloWorld</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #ADD7FF">render</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Hello world!&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The class based components had other "lifecycle functions" like
"componentDidMount" and such that do not exist in function based components. In
function components, React hooks are used instead.</p>
<p>You will probably mostly see function components instead of class based
components these days</p>
<h3 id="footnote-2-how-is-this-html-allowed-in-react"><a aria-hidden="true" tabindex="-1" href="#footnote-2-how-is-this-html-allowed-in-react"><a href="#footnote-2-how-is-this-html-allowed-in-react" style="margin-right: 10px">#</a></a>Footnote 2. How is this HTML allowed in React?</h3>
<p>The HTML-like syntax may look odd in JS code. It is called JSX. So code like
this:</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">HelloWorld</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Hello world&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>would get converted to this by babel or other jsx transpiler:</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">HelloWorld</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0; font-style: italic">// null just means no props to the div element</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">React</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">createElement</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">div</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #D0679D">null</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Hello world</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>It's not common to write React without jsx, but as seen above, it can be done :)</p>
<h3 id="footnote-3-slightly-changed-in-react-18"><a aria-hidden="true" tabindex="-1" href="#footnote-3-slightly-changed-in-react-18"><a href="#footnote-3-slightly-changed-in-react-18" style="margin-right: 10px">#</a></a>Footnote 3. Slightly changed in React 18</h3>
<p>React 18 uses <code>createRoot</code> instead of <code>ReactDOM.render</code> and is a little bit more
verbose, but I'm going for brevity here</p>
<h3 id="footnote-4-things-that-sometimes-complicate-your-react-learning-experience"><a aria-hidden="true" tabindex="-1" href="#footnote-4-things-that-sometimes-complicate-your-react-learning-experience"><a href="#footnote-4-things-that-sometimes-complicate-your-react-learning-experience" style="margin-right: 10px">#</a></a>Footnote 4. Things that sometimes complicate your React learning experience</h3>
<p>The React learning experience, when it's good, is quite nice. But there can be
many roadblocks</p>
<ul>
<li>
<p>You can be bogged down by many different sometimes conflicted learning
resources - The new docs at <a href="https://react.dev">https://react.dev</a> should make the learning
experience better.</p>
</li>
<li>
<p>You can be bogged down by the difficulty in setting up your dev environment -
the need to get transpilers and compilers for the JSX syntax and such is not
easy, and has led to an explosion of developer tooling that often needs to be
run on the command line to do any sort of programming for the web. This is a
unfortunate consequence of the web becoming more complicated. Learning to be
comfortable with the command line is often an important stepping stone to
becoming comfortable with modern JS dev tooling.</p>
</li>
<li>
<p>You can be bogged down by "tangential" concepts like state management</p>
</li>
<li>
<p>React codebases often use newer features of javascript like destructuring,
which can be confusing for newcomers ("Why does this function have curly
braces in the place of the arguments?")</p>
</li>
<li>
<p>You can be confused by weird concepts like "controlled" components (and how
React hooks like useState integrate with these)</p>
</li>
<li>
<p>You can be bogged down by Typescript or PropTypes - When I was learning React,
I was confused by PropTypes in code. PropTypes are fully optional though, and
are just used to check the types of props at runtime. TypeScript can be tricky
also, and does type checking at "compile time"</p>
</li>
</ul>
<h3 id="footnote-5-brief-intro-to-usestate"><a aria-hidden="true" tabindex="-1" href="#footnote-5-brief-intro-to-usestate"><a href="#footnote-5-brief-intro-to-usestate" style="margin-right: 10px">#</a></a>Footnote 5. Brief intro to useState</h3>
<p>The component HelloWorld does not do much, it just does a div. How do you make
dynamic content in React? One way is with React hooks like useState and
useEffect.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">FormField</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setValue</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Initial value</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">input</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5; font-style: italic">value</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value} </span><span style="color: #91B4D5; font-style: italic">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{evt </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">setValue</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">evt</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">} /></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This is a 'controlled component' in React terms: we control the value that is
displayed by the <code>&#x3C;input></code> box with the 'value prop' and any time the user types
something, we run the setValue callback, and then it re-renders. Any time a
'setter' from the useState is called, React re-renders the component.</p>
<h3 id="footnote-6-brief-intro-to-useeffect"><a aria-hidden="true" tabindex="-1" href="#footnote-6-brief-intro-to-useeffect"><a href="#footnote-6-brief-intro-to-useeffect" style="margin-right: 10px">#</a></a>Footnote 6. Brief intro to useEffect</h3>
<p>The useEffect method can be thought of as saying: "as a side effect of rendering
the component, do some stuff". You can use it to fetch data from an API for
example, and so you'd say "as a side effect of rendering this component, go
fetch some data from this API". Then you can combine it with a useState and make
it re-render after the fetch has completed.</p>
<p>example</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #767C9DB0; font-style: italic">// I use this myfetch helper a lot, many examples with fetch neglect to handle</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic">// !result.ok</span></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> fetching </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #5DE4C7C0">await</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">text</span><span style="color: #A6ACCD">()</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">FetchStuff</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setData</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setError</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">/my/api</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setData</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })()</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Got some data {</span><span style="color: #ADD7FF">JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  } else if (</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5; font-style: italic">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">background</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">red</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}>Error {</span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">}`</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  } else {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Loading...&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>8:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"The React tutorial I wish I had"}],["$","h4",null,{"children":"2022-11-20"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}],["$","$La",null,{}]]}]
3:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"The React tutorial I wish I had"}],["$","meta","3",{"name":"description","content":"A blog"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"128x128"}]]
7:null
