1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-6b587cfeb6dde470.js","974","static/chunks/app/page-57a57e19ddd8ea21.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/cc26266985a3f391.css","style"]
0:{"P":null,"b":"1tzAYN01vEUgl2CpfQ97J","p":"","c":["","posts","2023-03-25-commandlinestuff"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2023-03-25-commandlinestuff","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc26266985a3f391.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2023-03-25-commandlinestuff","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","DpprTE7P1DX-DBIeTNu8B",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-efdb81ac98a36819.js"],"default"]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Command line productivity stuff"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
d:T26e1,<p>In 2016, I wrote a list of things that I found to be useful or interesting
information about the work I did at the time
<a href="https://cmdcolin.github.io/posts/2016-04-06">https://cmdcolin.github.io/posts/2016-04-06</a></p>
<p>I thought it would be interesting to do the same now</p>
<h2 id="aliases"><a aria-hidden="true" tabindex="-1" href="#aliases"><a href="#aliases" style="margin-right: 10px">#</a></a>Aliases</h2>
<p>I use many "double tap" aliases for lots of things. They are not very
'mnemonic', but I like the action of double tapping a key. Here is a list of
some of my favorites. I don't expect you will like the shortenings</p>
<ul>
<li><code>qq</code> - runs <code>exit</code> to exit shell</li>
<li><code>ss</code> - runs <code>yarn start</code></li>
<li><code>yy</code> - runs <code>yarn lint</code></li>
<li><code>bb</code> - one of my favorite non-obvious ones, it lists all git branches recently
used in a fzf window
<code>git branch --sort=-committerdate| fzf --height=20% |xargs git checkout</code></li>
<li><code>ccc</code> - runs <code>yarn test --maxWorkers=50%</code> - my audio glitches out without the
maxWorkers</li>
<li><code>g</code> - <code>git status</code>. I will type out <code>git</code> for other subcommands, but I check
git status a lot and didn't end up liking one letter <code>g</code> + subcommand added</li>
<li><code>gd</code> - <code>git diff</code></li>
<li><code>gggg</code> - runs <code>git add . &#x26;&#x26; git commit --amend --no-edit</code> so I can keep adding
to the last commit instead of making new commits</li>
</ul>
<p>Also recommend <a href="https://github.com/rupa/z">https://github.com/rupa/z</a>, very quickly jump to commonly used
directories. I alias <code>z</code> to <code>p</code> because I try to type with my right hand.</p>
<h2 id="neovimeditor-stuff"><a aria-hidden="true" tabindex="-1" href="#neovimeditor-stuff"><a href="#neovimeditor-stuff" style="margin-right: 10px">#</a></a>Neovim/editor stuff</h2>
<p>I use neovim, I run lots of stuff off nightly, and my setup changes a lot just
as I like to tweak things, but here are some currently nice things I like about
my workflow</p>
<ul>
<li>
<p>Visual select block, use <code>gq</code> to wrap code comments in vim (or <code>gw</code> with lsp
enabled, see reason why <code>gw</code> here
<a href="https://vi.stackexchange.com/questions/39200/wrapping-comment-in-visual-mode-not-working-with-gq">https://vi.stackexchange.com/questions/39200/wrapping-comment-in-visual-mode-not-working-with-gq</a>)</p>
</li>
<li>
<p>Add <code>proseWrap: always</code> to your .prettierrc to wrap e.g. the lines in markdown
files <a href="https://prettier.io/docs/en/options.html#prose-wrap">https://prettier.io/docs/en/options.html#prose-wrap</a></p>
</li>
<li>
<p>Setting up "LSP support" in vim can be hard, but rewarding. I went through a
whole gammut of using w0rp/ale, then coc.nvim, and then now 'built-in neovim
LSP'. I like it, but it was to me not easy to set up. I recommend
<a href="https://github.com/VonHeikemen/lsp-zero.nvim">https://github.com/VonHeikemen/lsp-zero.nvim</a> as it makes it easier</p>
</li>
<li>
<p>Setup format on save. There are many ways to do it, but try to find out some
way that works for you! For me, I use formatter.nvim to run prettier on most
web dev filetypes. I use formatter.nvim and not a LSP-based format like
null-ls because I just haven't gotten it to work with null-ls, but I don't
think the formatter.nvim is a bad approach either -- formatter.nvim is a bit
'simpler' compared to LSP based setups</p>
</li>
<li>
<p>To search files in a current directory, I hit <code>,gg</code> (comma is my leader key)
which triggers
<code>map('n', '&#x3C;leader>gg', '&#x3C;cmd>Telescope git_files&#x3C;cr>', default_opts)</code>, to
search by text, I use <code>,ff</code> (comma is my leader key) which triggers
<code>map('n', '&#x3C;leader>ff', '&#x3C;cmd>Telescope live_grep&#x3C;cr>', default_opts)</code></p>
</li>
<li>
<p>I do not use a 'sidebar file browser' like nerdtree or similar. As mentioned
above, I primarily navigate with <code>,gg</code> but I also use <code>vim-vinegar</code>, which
let's me hit <code>-</code> and that opens a file browser of the current directory, and I
can hop around and hit keys to rename (R), delete (D), create (%) new files in
the directory. I often go back to the zsh shell to do more sophisticated
operations</p>
</li>
<li>
<p>Snippets: to <code>console.log</code>, I created a snippet where I can type <code>cl</code>, then it
will popup an autocomplete window, which let's me choose to insert
<code>console.log({|})</code> or <code>console.log(|)</code> where | indicates where the cursor goes
after hitting enter. The <code>console.log({})</code> is very handy because if you fill
in <code>console.log({variable})</code> then the output will be <code>{variable:5}</code> so you get
the variable name and value easily (ref
<a href="https://github.com/cmdcolin/dotfiles/blob/master/lua/snips.lua">https://github.com/cmdcolin/dotfiles/blob/master/lua/snips.lua</a>)</p>
</li>
</ul>
<h2 id="typescript"><a aria-hidden="true" tabindex="-1" href="#typescript"><a href="#typescript" style="margin-right: 10px">#</a></a>Typescript</h2>
<ul>
<li>
<p>Use <code>ts-expect-error</code> instead of <code>ts-ignore</code> -- probably a better intention
most of the time</p>
</li>
<li>
<p>Use type inference as much as possible -- personal opinion but even things
like explicit function return type are often worse than the inferred type</p>
</li>
</ul>
<h2 id="web-dev"><a aria-hidden="true" tabindex="-1" href="#web-dev"><a href="#web-dev" style="margin-right: 10px">#</a></a>Web dev</h2>
<ul>
<li>Try firefox profiler, it has built-in flamegraph style visualization. For
Chrome profiler, you can use an external tool <a href="https://speedscope.app/">https://speedscope.app/</a> for
similar</li>
</ul>
<h2 id="tmux"><a aria-hidden="true" tabindex="-1" href="#tmux"><a href="#tmux" style="margin-right: 10px">#</a></a>Tmux</h2>
<ul>
<li>
<p><code>Ctrl+]</code> is my prefix in tmux. I use my right hand entirely to type it, then I
split horizontally with <code>-</code> and vertically with <code>=</code>. My general coding
generally has my screen split vertically with a horizontal on one or both
sides</p>
</li>
<li>
<p>Add the weather in your tmux footer I use
<code>set -g status-left '#(curl "wttr.in/Albuquerque?u&#x26;format=3") ' </code></p>
</li>
<li>
<p>Enable truecolors in tmux! On my machine, I needed the following in my
tmux.conf:</p>
</li>
</ul>
<pre><code>set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
</code></pre>
<p>Without this, all the neovim color schemes I tried looked not just subtly off,
but significantly off, because it had only 256 colors without it (way less than
the millions with true color). Resources</p>
<p><a href="https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6">https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6</a>
<a href="https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/">https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/</a></p>
<h2 id="music-related"><a aria-hidden="true" tabindex="-1" href="#music-related"><a href="#music-related" style="margin-right: 10px">#</a></a>Music related</h2>
<ul>
<li><code>yda</code> - alias for getting a song from youtube
<code>"youtube-dl -f 'bestaudio[ext=m4a]' "</code></li>
<li><code>vaporwave</code> - a function to slow down the audio for a track with ffmpeg</li>
</ul>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="bash" data-theme="one-dark-pro"><code data-language="bash" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> vaporwave</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#61AFEF">  ffmpeg</span><span style="color:#D19A66"> -i</span><span style="color:#98C379"> "</span><span style="color:#E06C75;font-style:italic">$1</span><span style="color:#98C379">"</span><span style="color:#D19A66"> -af</span><span style="color:#98C379"> "asetrate=44100*</span><span style="color:#E06C75;font-style:italic">${2</span><span style="color:#ABB2BF">:-</span><span style="color:#E06C75;font-style:italic">0</span><span style="color:#98C379">.</span><span style="color:#E06C75;font-style:italic">66}</span><span style="color:#98C379">,aresample=44100"</span><span style="color:#98C379"> "`</span><span style="color:#61AFEF">basename</span><span style="color:#E06C75;font-style:italic"> $1</span><span style="color:#98C379"> .m4a`.vaporwave.m4a"</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>example usage:</p>
<pre><code>vaporwave file.mp3 # default slowdown factor of 0.66, outputs file.vaporwave.mp3
vaporwave file.mp3 0.5 # custom slowdown factor, outputs file.vaporwave.mp3
</code></pre>
<h2 id="audio-players"><a aria-hidden="true" tabindex="-1" href="#audio-players"><a href="#audio-players" style="margin-right: 10px">#</a></a>Audio players</h2>
<p>I worked on a couple projects to make custom music players to scratch my own
itch. I made a Rust one, to try to replace foobar2000, hoping to go back to the
days of yore when I used a desktop player, and then a web based one when I
realized I just listen to alot of youtube anyways now</p>
<ul>
<li>Rust+GTK4 app <a href="https://github.com/cmdcolin/fml9000">https://github.com/cmdcolin/fml9000</a></li>
<li>Web based <a href="https://cmdcolin.github.io/ytshuffle/">https://cmdcolin.github.io/ytshuffle/</a></li>
</ul>
<p>Currently attempting to get the web based version approved by youtube compliance
because they give you quite a limited number of API requests, so unless I want
other users of my app to supply their own key, it seems prudent to get it
approved</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Command line productivity stuff"}],["$","h4",null,{"children":"2023-03-25"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
