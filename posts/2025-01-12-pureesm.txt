1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-6b587cfeb6dde470.js","974","static/chunks/app/page-57a57e19ddd8ea21.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/cc26266985a3f391.css","style"]
0:{"P":null,"b":"xtK55xUhdMHr_TAbJsmCh","p":"","c":["","posts","2025-01-12-pureesm"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2025-01-12-pureesm","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc26266985a3f391.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2025-01-12-pureesm","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","E23iHJQhuDXpEyvPy6yXS",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-efdb81ac98a36819.js"],"default"]
d:T4c15,<p>In the past, I have written about making NPM packages with just the typscript
compiler (<a href="https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler">https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</a>).
There, I focused on "CJS" build because it was arguably simpler</p>
<p>Now, I am addressing the "ESM" case</p>
<p>TLDR: here is the minimal github repo for this post
<a href="https://github.com/cmdcolin/minimal_pureesm_package/">https://github.com/cmdcolin/minimal_pureesm_package/</a></p>
<h2 id="why-pure-esm-now"><a aria-hidden="true" tabindex="-1" href="#why-pure-esm-now"><a href="#why-pure-esm-now" style="margin-right: 10px">#</a></a>Why pure-ESM now?</h2>
<p>As my previous article mentions, I like taking a 'bundler-less' approach to
library distribution. That means that multiple files might end up in the <code>dist</code>
folder which reference each other. However, using "pure ESM" requires these
files that reference each other to import the actual path, with the file
extensions</p>
<p>Which was awkward before...but now</p>
<h2 id="we-have-some-new-tsconfigjson-settings-to-help"><a aria-hidden="true" tabindex="-1" href="#we-have-some-new-tsconfigjson-settings-to-help"><a href="#we-have-some-new-tsconfigjson-settings-to-help" style="margin-right: 10px">#</a></a>We have some new tsconfig.json settings to help</h2>
<p>The recent addition of the <code>tsc</code> settings
<a href="https://www.typescriptlang.org/tsconfig/allowImportingTsExtensions.html"><code>allowImportingTsExtensions</code></a>
and
<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-7/#path-rewriting-for-relative-paths"><code>rewriteRelativeImportExtensions</code></a>
have now allow us to import from the .ts file extension in the src folder, and
it automatically rewrites to use the .js file extension in the dist folder</p>
<p>For example we can have</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#7F848E;font-style:italic">// src/index.ts</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">foo</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './bar.ts'</span></span>
<span data-line=""><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">()</span></span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#7F848E;font-style:italic">// src/bar.ts</span></span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'foo in bar.ts'</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>then running tsc over these files will produce</p>
<pre><code> ❯❯❯ ll dist
total 24K
-rw-rw-r-- 1 cdiesh cdiesh  37 Jan 14 06:07 bar.d.ts
-rw-rw-r-- 1 cdiesh cdiesh  91 Jan 14 06:07 bar.js
-rw-rw-r-- 1 cdiesh cdiesh  43 Jan 14 06:07 index.d.ts
-rw-rw-r-- 1 cdiesh cdiesh 116 Jan 14 06:07 index.js

</code></pre>
<p>where dist/index.js now contains an import with the .js extension</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="javascript" data-theme="one-dark-pro"><code data-language="javascript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">foo</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './bar.js'</span></span>
<span data-line=""><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">()</span></span></code></pre></figure>
<p>and dist/bar.js says</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="javascript" data-theme="one-dark-pro"><code data-language="javascript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'foo in bar.ts'</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>Previously you had to write <code>import {foo} from './bar.js'</code> in the src folder to
have this behavior, but now you can reference the actual file, bar.ts</p>
<h2 id="the-packagejson"><a aria-hidden="true" tabindex="-1" href="#the-packagejson"><a href="#the-packagejson" style="margin-right: 10px">#</a></a>The package.json</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="json" data-theme="one-dark-pro"><code data-language="json" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">{</span></span>
<span data-line=""><span style="color:#E06C75">  "name"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"minimalpackage"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "version"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"1.0.0"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "description"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"simple pure-esm package compatible with tsc"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "license"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"MIT"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "type"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"module"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "main"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./dist/index.js"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "scripts"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "build"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"tsc"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "clean"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"rimraf dist"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "prebuild"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn clean"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "preversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn build"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "postversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"git push --follow-tags"</span></span>
<span data-line=""><span style="color:#ABB2BF">  },</span></span>
<span data-line=""><span style="color:#E06C75">  "devDependencies"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "rimraf"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^6.0.1"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "typescript"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^5.7.3"</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>You can see from the above, I did not need to specify "exports" or "types".</p>
<p>Other random things you can observe</p>
<ul>
<li>
<p>I use rimraf to clear the dist folder before building. I can use "yarn build
--watch" for a tsc watcher</p>
</li>
<li>
<p>You can run <code>yarn publish</code> to publish to NPM, and it will automatically run
the clean and build via the preversion script, and then will automatically
push the updated version and tag to github once it is finished via the
postversion script</p>
</li>
</ul>
<h2 id="the-tsconfigjson"><a aria-hidden="true" tabindex="-1" href="#the-tsconfigjson"><a href="#the-tsconfigjson" style="margin-right: 10px">#</a></a>The tsconfig.json</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="json" data-theme="one-dark-pro"><code data-language="json" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">{</span></span>
<span data-line=""><span style="color:#E06C75">  "include"</span><span style="color:#ABB2BF">: [</span><span style="color:#98C379">"src"</span><span style="color:#ABB2BF">],</span></span>
<span data-line=""><span style="color:#E06C75">  "compilerOptions"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "outDir"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"dist"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "target"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"es2020"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "declaration"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "strict"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "allowImportingTsExtensions"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "rewriteRelativeImportExtensions"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<h2 id="using-minimalpackage"><a aria-hidden="true" tabindex="-1" href="#using-minimalpackage"><a href="#using-minimalpackage" style="margin-right: 10px">#</a></a>Using minimalpackage</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> thing</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'minimalpackage'</span></span>
<span data-line=""><span style="color:#61AFEF">thing</span><span style="color:#ABB2BF">()</span></span></code></pre></figure>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>This article proposes a bundler-less approach to distributing typescript
packages on NPM. It was possible before, but I think the addition of the
<code>allowImportingTsExtensions</code> and <code>rewriteRelativeImportExtensions</code> made it more
sane. Previously you had to use "import {thing} from './localFile.js'" even when
you were writing .ts which was awkward</p>
<h2 id="footnote-1---publishing-dual-esmcjs-using-this-technique"><a aria-hidden="true" tabindex="-1" href="#footnote-1---publishing-dual-esmcjs-using-this-technique"><a href="#footnote-1---publishing-dual-esmcjs-using-this-technique" style="margin-right: 10px">#</a></a>Footnote 1 - Publishing dual ESM/CJS using this technique</h2>
<p>If you want to publish ESM/CJS you can update your package.json to use the
"exports" field, and run the tsc compiler twice over the code, once using
--module cjs</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="json" data-theme="one-dark-pro"><code data-language="json" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">{</span></span>
<span data-line=""><span style="color:#E06C75">  "name"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"dualpackage"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "version"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"1.0.0"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "description"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"demo of dual esm/cjs package"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "type"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"module"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "main"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./cjs/index.js"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "types"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./cjs/index.d.ts"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "exports"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "import"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">      "types"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./esm/index.d.ts"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">      "import"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./esm/index.js"</span></span>
<span data-line=""><span style="color:#ABB2BF">    },</span></span>
<span data-line=""><span style="color:#E06C75">    "require"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">      "types"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./cjs/index.d.ts"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">      "require"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./cjs/index.js"</span></span>
<span data-line=""><span style="color:#ABB2BF">    }</span></span>
<span data-line=""><span style="color:#ABB2BF">  },</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E06C75">  "scripts"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "clean"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"rimraf cjs"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "prebuild"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn clean"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "preversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn build"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "postversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"git push --follow-tags"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "build:esm"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"tsc --outDir esm"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "build:cjs"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"tsc --module commonjs --outDir cjs"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "postbuild:cjs"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"echo '{</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">type</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">: </span><span style="color:#56B6C2">\"</span><span style="color:#98C379">commonjs</span><span style="color:#56B6C2">\"</span><span style="color:#98C379">}' > cjs/package.json"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "build"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn build:esm &#x26;&#x26; yarn build:cjs"</span></span>
<span data-line=""><span style="color:#ABB2BF">  },</span></span>
<span data-line=""><span style="color:#E06C75">  "devDependencies"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "rimraf"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^6.0.1"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "typescript"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^5.7.3"</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>Note that postbuild:cjs (which is automatically run after any invocation of
build:cjs) outputs a "one line" <strong>extra</strong> package.json to the cjs folder that
says type:cjs specifically in the cjs distribution (credit:
<a href="https://evertpot.com/universal-cjs-esm-typescript-packages/">https://evertpot.com/universal-cjs-esm-typescript-packages/</a>).</p>
<p>You can alternatively name the all the files in the cjs folder with the .cjs
file extension, which node will recognize as being commonjs and not ESM module
files, if you do not want to use the one-line-package.json-with-type:cjs trick,
but the tsc compiler does not currently have an option to output the .cjs file
extension natively</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Making a pure-ESM package using `tsc`"}],["$","h4",null,{"children":"2025-01-12"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Making a pure-ESM package using `tsc`"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
