1:"$Sreact.fragment"
2:I[6874,["874","static/chunks/874-a689ee4a52a3a837.js","974","static/chunks/app/page-5d40f192aa75eac6.js"],""]
3:I[7555,[],""]
4:I[1295,[],""]
6:I[9665,[],"MetadataBoundary"]
8:I[9665,[],"OutletBoundary"]
b:I[4911,[],"AsyncMetadataOutlet"]
d:I[9665,[],"ViewportBoundary"]
f:I[6614,[],""]
:HL["/_next/static/css/6f57c2e3195af1e2.css","style"]
0:{"P":null,"b":"0gJO4rxoBsnaLjmh1O1ZZ","p":"","c":["","posts","2025-01-12-pureesm"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2025-01-12-pureesm","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/6f57c2e3195af1e2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2025-01-12-pureesm","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",["$","$L6",null,{"children":"$L7"}],null,["$","$L8",null,{"children":["$L9","$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","ECnZ4ALTYVfG-Ea1RPK2H",{"children":[["$","$Ld",null,{"children":"$Le"}],null]}],null]}],false]],"m":"$undefined","G":["$f","$undefined"],"s":false,"S":true}
10:"$Sreact.suspense"
11:I[4911,[],"AsyncMetadata"]
7:["$","$10",null,{"fallback":null,"children":["$","$L11",null,{"promise":"$@12"}]}]
a:null
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
14:I[1401,["880","static/chunks/app/posts/%5Bid%5D/page-ea4ed377e9c48f28.js"],"default"]
13:T33cb,<p>In the past, I have written about making NPM packages with just the typescript
compiler (<a href="https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler">https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</a>).
There, I focused on "CJS" build because it was arguably simpler</p>
<p>Now, I am addressing the "ESM" case</p>
<p>TLDR: here is the minimal github repo for this post
<a href="https://github.com/cmdcolin/minimalpackage">https://github.com/cmdcolin/minimalpackage</a></p>
<h2 id="why-pure-esm-now"><a aria-hidden="true" tabindex="-1" href="#why-pure-esm-now"><a href="#why-pure-esm-now" style="margin-right: 10px">#</a></a>Why pure-ESM now?</h2>
<p>As my previous article mentions, I like taking a 'bundler-less' approach to
library distribution. That means that multiple files might end up in the <code>dist</code>
folder which reference each other. However, using "pure ESM" requires these
files that reference each other to import the actual path, with the file
extensions</p>
<p>Which was awkward before...but now</p>
<h2 id="we-have-some-new-tsconfigjson-settings-to-help"><a aria-hidden="true" tabindex="-1" href="#we-have-some-new-tsconfigjson-settings-to-help"><a href="#we-have-some-new-tsconfigjson-settings-to-help" style="margin-right: 10px">#</a></a>We have some new tsconfig.json settings to help</h2>
<p>The recent addition of the <code>tsc</code> settings
<a href="https://www.typescriptlang.org/tsconfig/allowImportingTsExtensions.html"><code>allowImportingTsExtensions</code></a>
and
<a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-7/#path-rewriting-for-relative-paths"><code>rewriteRelativeImportExtensions</code></a>
have now allow us to import from the .ts file extension in the src folder, and
it automatically rewrites to use the .js file extension in the dist folder</p>
<p>For example we can have</p>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// src/index.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">bar</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './bar.ts'</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#61AFEF">  bar</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// src/bar.ts</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> bar</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#E5C07B">  console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'bar in bar.ts'</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<p>then running tsc over these files will produce</p>
<pre><code> ❯❯❯ ll dist
total 24K
-rw-rw-r-- 1 cdiesh cdiesh  37 Jan 14 06:07 bar.d.ts
-rw-rw-r-- 1 cdiesh cdiesh  91 Jan 14 06:07 bar.js
-rw-rw-r-- 1 cdiesh cdiesh  43 Jan 14 06:07 index.d.ts
-rw-rw-r-- 1 cdiesh cdiesh 116 Jan 14 06:07 index.js

</code></pre>
<p>where dist/index.js now contains an import with the .js extension</p>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">foo</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './bar.js'</span></span>
<span class="line"><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">()</span></span></code></pre>
<p>and dist/bar.js says</p>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">bar</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> './bar.js'</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> foo</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#61AFEF">  bar</span><span style="color:#ABB2BF">()</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<p>Previously you had to write <code>import {foo} from './bar.js'</code> in the src folder to
have this behavior, but now you can reference the actual file, bar.ts</p>
<h2 id="the-packagejson"><a aria-hidden="true" tabindex="-1" href="#the-packagejson"><a href="#the-packagejson" style="margin-right: 10px">#</a></a>The package.json</h2>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">  "name"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"minimalpackage"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "version"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"1.0.0"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "description"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"simple pure-esm package compatible with tsc"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "license"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"MIT"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "type"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"module"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "exports"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./dist/index.js"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "main"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./dist/index.js"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">  "scripts"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">    "build"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"tsc"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "clean"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"rimraf dist"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "prebuild"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn clean"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "preversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"yarn build"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "postversion"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"git push --follow-tags"</span></span>
<span class="line"><span style="color:#ABB2BF">  },</span></span>
<span class="line"><span style="color:#E06C75">  "devDependencies"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">    "rimraf"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^6.0.1"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "typescript"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"^5.7.3"</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<p>Some things you can observe</p>
<ul>
<li>
<p>I specify main and exports. Exports is sufficient for some but requires
consumers use moduleResolution with nodenext which is rare</p>
</li>
<li>
<p>You can see from the above, I did not need to specify the location of "types"</p>
</li>
<li>
<p>Lots of usages of "exports" have a complex object but it can simply be a
string that points to a file</p>
</li>
<li>
<p>I use rimraf to clear the dist folder before building. I can use "yarn build
--watch" for a tsc watcher</p>
</li>
<li>
<p>You can run <code>yarn publish</code> to publish to NPM, and it will automatically run
the clean and build via the preversion script, and then will automatically
push the updated version and tag to github once it is finished via the
postversion script</p>
</li>
</ul>
<h2 id="the-tsconfigjson"><a aria-hidden="true" tabindex="-1" href="#the-tsconfigjson"><a href="#the-tsconfigjson" style="margin-right: 10px">#</a></a>The tsconfig.json</h2>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">  "include"</span><span style="color:#ABB2BF">: [</span><span style="color:#98C379">"src"</span><span style="color:#ABB2BF">],</span></span>
<span class="line"><span style="color:#E06C75">  "compilerOptions"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">    "outDir"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"dist"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "target"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"es2020"</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "declaration"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "strict"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "allowImportingTsExtensions"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">    "rewriteRelativeImportExtensions"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span></span>
<span class="line"><span style="color:#ABB2BF">  }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span></code></pre>
<h2 id="using-minimalpackage"><a aria-hidden="true" tabindex="-1" href="#using-minimalpackage"><a href="#using-minimalpackage" style="margin-right: 10px">#</a></a>Using minimalpackage</h2>
<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">foo</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> 'minimalpackage'</span></span>
<span class="line"><span style="color:#61AFEF">foo</span><span style="color:#ABB2BF">()</span></span></code></pre>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>This article proposes a bundler-less approach to distributing typescript
packages on NPM. It was possible before, but I think the addition of the
<code>allowImportingTsExtensions</code> and <code>rewriteRelativeImportExtensions</code> made it more
sane.</p>
<h2 id="footnote-1---publishing-dual-esmcjs-using-this-technique"><a aria-hidden="true" tabindex="-1" href="#footnote-1---publishing-dual-esmcjs-using-this-technique"><a href="#footnote-1---publishing-dual-esmcjs-using-this-technique" style="margin-right: 10px">#</a></a>Footnote 1 - Publishing dual ESM/CJS using this technique</h2>
<p>I don't even know if I fully stand behind doing a dual publish this way, but for
reference, here is a potential way to dual ESM/CJS publish with this method
<a href="https://gist.github.com/cmdcolin/c3089a4b37f2ff8c8eabce5ebd3b4082">https://gist.github.com/cmdcolin/c3089a4b37f2ff8c8eabce5ebd3b4082</a></p>
<p>The 'quick start kit' tshy is also a pretty good minimal approach to publishing.
You might consider trying it</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Making a pure-ESM package using `tsc`"}],["$","h4",null,{"children":"2025-01-12"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$13"}}],["$","$L14",null,{}]]}]
12:{"metadata":[["$","title","0",{"children":"Making a pure-ESM package using `tsc`"}],["$","meta","1",{"name":"description","content":"A blog"}]],"error":null,"digest":"$undefined"}
c:{"metadata":"$12:metadata","error":null,"digest":"$undefined"}
