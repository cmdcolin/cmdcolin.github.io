1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-6b587cfeb6dde470.js","974","static/chunks/app/page-57a57e19ddd8ea21.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/cc26266985a3f391.css","style"]
0:{"P":null,"b":"RS75djI6QShH5j-mtgfZ2","p":"","c":["","posts","2016-11-10"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2016-11-10","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc26266985a3f391.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2016-11-10","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","FLm2cprMeYQxuXfDj4xvR",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-efdb81ac98a36819.js"],"default"]
d:T2aff,<p>I have been very impressed with peoples creativity and willingness to dig into
all the details of JBrowse to customize it's features. One great way to do this
in a modular way is to create a "JBrowse plugin". This concept sounds hard but
you can set up a simple couple of files and refresh your browser and it will
"just work"!</p>
<h2 id="introduction-to-the-plugin-mindset"><a aria-hidden="true" tabindex="-1" href="#introduction-to-the-plugin-mindset"><a href="#introduction-to-the-plugin-mindset" style="margin-right: 10px">#</a></a>Introduction to the plugin mindset</h2>
<p>In a plugin, you can define new things like custom track types, custom adaptors
to new file types, new track selectors, or something really different. A key
insight about the custom types of tracks and things though is that you can put
the name of your new custom class in the jbrowse config file which will then
find the code in your plugin and run it. Plugins can do other things, but the
ability to just swap out track types or other components in the config file is a
great benefit.</p>
<h2 id="a-scenario"><a aria-hidden="true" tabindex="-1" href="#a-scenario"><a href="#a-scenario" style="margin-right: 10px">#</a></a>A scenario</h2>
<p>One example that was talked about on the mailing list might involve adding new
menu items for a given track. We might consider a plugin that defines a custom
track type to add that functionality.</p>
<p>Basically, we can use object- oriented principles to "inherit" from some
existing track type like CanvasFeatures and then extend its functionality by
overriding the functions.</p>
<p>If you are not familiar with object-oriented javascript, dojo makes it pretty
easy (but, especially get a background on this if you need to, see footnotes
below).</p>
<p>We can inherit a new track type by using the "define" function to include the
dependencies needed in a file, and they are listed in an array at the top of
your file.</p>
<p>Then the "declare" function creates a new class. The first argument to declare
is the is your parent class, like CanvasFeatures, and we type "return declare"
because we are returning our new track class from the module.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">define</span><span style="color:#ABB2BF">([</span><span style="color:#98C379">'dojo/_base/declare'</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">'JBrowse/View/Track/CanvasFeatures'</span><span style="color:#ABB2BF">], </span><span style="color:#C678DD">function</span><span style="color:#ABB2BF"> (</span></span>
<span data-line=""><span style="color:#E06C75;font-style:italic">  declare</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75;font-style:italic">  CanvasFeatures</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#61AFEF"> declare</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">CanvasFeatures</span><span style="color:#ABB2BF">, {</span></span>
<span data-line=""><span style="color:#61AFEF">    _trackMenuOptions</span><span style="color:#ABB2BF">: </span><span style="color:#C678DD">function</span><span style="color:#ABB2BF"> () {</span></span>
<span data-line=""><span style="color:#C678DD">      var</span><span style="color:#E06C75"> opts</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> this</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">inherited</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">arguments</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">//call the parent classes function</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E5C07B">      opts</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">push</span><span style="color:#ABB2BF">(</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">        // add an extra menu item to the array returned from parent class function</span></span>
<span data-line=""><span style="color:#ABB2BF">        {</span></span>
<span data-line=""><span style="color:#E06C75">          label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'Custom item'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">          type</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'dijit/CheckedMenuItem'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#61AFEF">          onClick</span><span style="color:#ABB2BF">: </span><span style="color:#C678DD">function</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">event</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#E5C07B">            console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'Clicked'</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">          },</span></span>
<span data-line=""><span style="color:#E06C75">          iconClass</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'dijitIconPackage'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">        },</span></span>
<span data-line=""><span style="color:#ABB2BF">      )</span></span>
<span data-line=""><span style="color:#C678DD">      return</span><span style="color:#E06C75"> opts</span></span>
<span data-line=""><span style="color:#ABB2BF">    },</span></span>
<span data-line=""><span style="color:#ABB2BF">  })</span></span>
<span data-line=""><span style="color:#ABB2BF">})</span></span></code></pre></figure>
<p>Code listing 1. an example custom track type, MyTrack.js, that adds an extra
track menu item</p>
<h2 id="now-how-do-we-make-this-a-plugin"><a aria-hidden="true" tabindex="-1" href="#now-how-do-we-make-this-a-plugin"><a href="#now-how-do-we-make-this-a-plugin" style="margin-right: 10px">#</a></a>Now how do we make this a plugin?</h2>
<p>In the above section, we created a new track subclass with a custom menu option.
How do we use this track? We want to turn it into part of afine the boilerplate
code from the
<a href="http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse_Plugins">Writing plugins</a>
guide.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">define</span><span style="color:#ABB2BF">([</span><span style="color:#98C379">'dojo/_base/declare'</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">'JBrowse/Plugin'</span><span style="color:#ABB2BF">], </span><span style="color:#C678DD">function</span><span style="color:#ABB2BF"> (</span></span>
<span data-line=""><span style="color:#E06C75;font-style:italic">  declare</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75;font-style:italic">  JBrowsePlugin</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#61AFEF"> declare</span><span style="color:#ABB2BF">(</span></span>
<span data-line=""><span style="color:#E06C75">    JBrowsePlugin</span><span style="color:#ABB2BF">, </span><span style="color:#7F848E;font-style:italic">// this line says our plugin's main.js derives from the "JBrowse/Plugin" base class</span></span>
<span data-line=""><span style="color:#ABB2BF">    {</span></span>
<span data-line=""><span style="color:#61AFEF">      constructor</span><span style="color:#ABB2BF">: </span><span style="color:#C678DD">function</span><span style="color:#ABB2BF"> (</span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">        //don't necessarily have to do any initializing here, but you</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">        //can get a handle to various jbrowse components if any initialization</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">        //is needed from the args.browser variable</span></span>
<span data-line=""><span style="color:#ABB2BF">      },</span></span>
<span data-line=""><span style="color:#ABB2BF">    },</span></span>
<span data-line=""><span style="color:#ABB2BF">  )</span></span>
<span data-line=""><span style="color:#ABB2BF">})</span></span></code></pre></figure>
<p>Code listing 2. Our plugin's main.js</p>
<p>After this, we create the plugin directory structure</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin/js</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin/js/main.js</p>
<p>jbrowse/plugins/MyPlugin/js/MyTrack.js</p>
</blockquote>
</blockquote>
</blockquote>
<p>Then we can add our new plugin to a config file like <code>jbrowse_conf.json</code> as
<code>"plugins": ["MyPlugin"]</code> and then make a track in <code>trackList.json</code> have
<code>"type": "MyPlugin/MyTrack"</code> instead of for example <code>"type": "CanvasFeatures"</code>.
That will tell jbrowse to load the <code>MyTrack</code> class from your plugin instead of
the normal <code>CanvasFeatures</code> class.</p>
<p>That's about it!</p>
<p>Note that the <code>bin/new-plugin.pl</code> script can automatically initialize some of
this directory structure too. Try running <code>bin/new-plugin.pl MyPlugin</code> and see
what happens.</p>
<h3 id="footnotes"><a aria-hidden="true" tabindex="-1" href="#footnotes"><a href="#footnotes" style="margin-right: 10px">#</a></a>Footnotes:</h3>
<p>It is important to understand the module format (AMD) which is what the "define"
function is about and the dojo way of defining classes using the "declare"
function. Together, this allows the dojo to create object-oriented programs that
are modular in javascript. See
<a href="http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html">http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html</a> and
<a href="http://dojotoolkit.org/documentation/tutorials/1.9/modules/">http://dojotoolkit.org/documentation/tutorials/1.9/modules/</a> (understanding this
helps you understand the "preamble" for declaring a jbrowse plugin)</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Creating a JBrowse plugin"}],["$","h4",null,{"children":"2016-11-10"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Creating a JBrowse plugin"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
