1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-6b587cfeb6dde470.js","974","static/chunks/app/page-57a57e19ddd8ea21.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/cc26266985a3f391.css","style"]
0:{"P":null,"b":"RS75djI6QShH5j-mtgfZ2","p":"","c":["","posts","2023-02-05-typescript-gotchas"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2023-02-05-typescript-gotchas","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc26266985a3f391.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2023-02-05-typescript-gotchas","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","XdBoj2B_GnK2TwNsx5E7J",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-efdb81ac98a36819.js"],"default"]
d:T1c17,<p>This is a short list of silly things that I wish Typescript would have caught
for me, but are silly logic errors</p>
<h2 id="using-objectentries-accidentally-instead-of-objectfromentries"><a aria-hidden="true" tabindex="-1" href="#using-objectentries-accidentally-instead-of-objectfromentries"><a href="#using-objectentries-accidentally-instead-of-objectfromentries" style="margin-right: 10px">#</a></a>Using <code>Object.entries</code> accidentally instead of <code>Object.fromEntries</code></h2>
<p>Typescript will not complain if you use <code>Object.entries</code> instead of
<code>Object.fromEntries</code></p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> stuff</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">]</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// woops, meant to use Object.fromEntries</span></span>
<span data-line=""><span style="color:#E5C07B">Object</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">entries</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">stuff</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">entry</span><span style="color:#C678DD"> =></span><span style="color:#ABB2BF"> [</span><span style="color:#E06C75">entry</span><span style="color:#ABB2BF">, { </span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75">entry</span><span style="color:#ABB2BF"> }]))</span></span></code></pre></figure>
<p><a href="https://www.typescriptlang.org/play?#code/FAYw9gdgzgLgBLArgM2QXgNoEYA0AmHAZgF1gB5AIwCsBTEGAOhohgCcBLGqACiVQYC2AQwAO3ZmwCeaAHwYJrSTjgBvdgBMAXAskBfYgEoDQA">playground</a></p>
<p>Summary: should probably be a lint rule (a "types required" lint rule, a la
@typescript-eslint) not to accept arrays for Object.entries</p>
<p>Update 02-27-23: Proposing this rule here
<a href="https://github.com/typescript-eslint/typescript-eslint/issues/6537">https://github.com/typescript-eslint/typescript-eslint/issues/6537</a> (it was
rejected)</p>
<h2 id="passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally"><a aria-hidden="true" tabindex="-1" href="#passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally"><a href="#passing-garbage-to-the-second-argument-of-arrayprototypemap-accidentally" style="margin-right: 10px">#</a></a>Passing garbage to the second argument of Array.prototype.map accidentally</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> doStuff</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">arr</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">number</span><span style="color:#ABB2BF">[], </span><span style="color:#E06C75;font-style:italic">extra</span><span style="color:#C678DD">?</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75">sayHiToMom</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">boolean</span><span style="color:#ABB2BF"> }) {</span></span>
<span data-line=""><span style="color:#C678DD">  if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">extra</span><span style="color:#ABB2BF">?.</span><span style="color:#E06C75">sayHiToMom</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#E5C07B">    console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'Hi mom'</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#E06C75"> arr</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> stuff</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span><span style="color:#D19A66">1</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">2</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">3</span><span style="color:#ABB2BF">]</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// woops, meant to pass that as second argument to doStuff</span></span>
<span data-line=""><span style="color:#61AFEF">doStuff</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">stuff</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#C678DD"> =></span><span style="color:#E06C75"> a</span><span style="color:#56B6C2"> *</span><span style="color:#D19A66"> 2</span><span style="color:#ABB2BF">, { </span><span style="color:#E06C75">sayHiToMom</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF"> }))</span></span></code></pre></figure>
<p><a href="https://www.typescriptlang.org/play?#code/FAMwrgdgxgLglgewgAgCYIMozCEAKAQwCciAuCMAWwCMBTIgbQF0AaZWgDxiIIH5SA3gGcCATwAScACoIAsgkqlqCBABtaBCAF8AlMgHBkyOPk7c+AOhETpchXoNGjUJELW0LqhAHM8AcklkSgU-HUNkLXCiWmwiFGIiYEjgFwghGGR0nBAAXgYARhYAJhYAZiZgdCxsvCzcC0oCAAdCHIA+AgAqEuExSRl5RW4wWl0dIA">playground</a></p>
<p>This one would be difficult for typescript to catch, the second arg is
"thisArg", what the callback refers to as <code>this</code></p>
<p>Summary: should probably be a lint rule to avoid this second arg, as it is
obscure</p>
<p>Update 02-27-23: This lint rule exists already :)
<a href="https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-method-this-argument.md#disallow-using-the-this-argument-in-array-methods">https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-method-this-argument.md#disallow-using-the-this-argument-in-array-methods</a></p>
<h2 id="any-others"><a aria-hidden="true" tabindex="-1" href="#any-others"><a href="#any-others" style="margin-right: 10px">#</a></a>Any others?</h2>
<p>Any other ones that you find in your work? This is just from the past week for
me :)</p>
<p>I will need to learn how to make eslint rules!</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Things typescript didn't catch that should probably be lint rules"}],["$","h4",null,{"children":"2023-02-05"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Things typescript didn't catch that should probably be lint rules"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
