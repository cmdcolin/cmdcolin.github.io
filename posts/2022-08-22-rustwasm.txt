0:[[["",{"children":["posts",{"children":[["id","2022-08-22-rustwasm","d"],{"children":["__PAGE__?{\"id\":\"2022-08-22-rustwasm\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"3619","name":"","chunks":["619:619-d3e80a47715091a2","931:app/page-59752a1737368847"],"async":false}
4:I{"id":"1300","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
5:I{"id":"6022","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
1:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2022-08-22-rustwasm","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L6","$@7"],"segment":"__PAGE__?{\"id\":\"2022-08-22-rustwasm\"}"}}],"segment":["id","2022-08-22-rustwasm","d"]}}],"segment":"posts"}}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L3",null,{"href":"/","children":"Home"}]," ",["$","$L3",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L3",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L3",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L3",null,{"href":"/projects","children":"Projects"}]," ",["$","$L3",null,{"href":"/photos","children":"Photos"}]," ",["$","$L3",null,{"href":"/about","children":"About"}]]}]]}]}],"$@8"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Using Rust/WASM in a monorepo with create-react-app"}],["$","meta",null,{"name":"description","content":"A blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
9:I{"id":"3591","name":"","chunks":["722:app/posts/[id]/page-cb4a6e559310dd46"],"async":false}
6:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"Using Rust/WASM in a monorepo with create-react-app"}],["$","h4",null,{"children":"2022-08-22"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>Behold, the buzzwords:</p>\n<ul>\n<li>Rust / WASM / wasm-bindgen</li>\n<li>React</li>\n<li>Monorepo / Yarn workspaces</li>\n<li>Webpack 5 / create-react-app 5</li>\n<li>Typescript</li>\n</ul>\n<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>\n<p>TLDR: visit the final product!\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed\nlive here <a href=\"https://cmdcolin.github.io/rust_react_monorepo_template\">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>\n<h2 id=\"steps-to-create-this-type-of-integration-from-scratch\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#steps-to-create-this-type-of-integration-from-scratch\"><a href=\"#steps-to-create-this-type-of-integration-from-scratch\" style=\"margin-right: 10px\">#</a></a>Steps to create this type of integration from scratch</h2>\n<h3 id=\"create-repo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-repo\"><a href=\"#create-repo\" style=\"margin-right: 10px\">#</a></a>Create repo</h3>\n<pre><code>mkdir template\ncd template\ngit init\n</code></pre>\n<h3 id=\"create-root-packagejson\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-root-packagejson\"><a href=\"#create-root-packagejson\" style=\"margin-right: 10px\">#</a></a>Create root <code>package.json</code></h3>\n<p>Then put this in the monorepo's root <code>package.json</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">private</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">workspaces</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">app</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">]</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This sets our repo up as a \"monorepo\" with two \"workspaces\". one will be the\nwasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>\n<h3 id=\"add-a-create-react-app-instance-inside-the-monorepo\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-a-create-react-app-instance-inside-the-monorepo\"><a href=\"#add-a-create-react-app-instance-inside-the-monorepo\" style=\"margin-right: 10px\">#</a></a>Add a <code>create-react-app</code> instance inside the monorepo</h3>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">npx</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">create-react-app</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">--template</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">typescript</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">app</span></span></code></pre>\n<p>This will make an <code>app</code> subfolder inside our monorepo</p>\n<h3 id=\"download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\"><a href=\"#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm\" style=\"margin-right: 10px\">#</a></a>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>\n<p>Download <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world\">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a>\nto the hello-wasm folder</p>\n<p>This link can help\n<a href=\"https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world\">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>\n<h3 id=\"add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\"><a href=\"#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder\" style=\"margin-right: 10px\">#</a></a>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">version</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">1.0.0</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">files</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: [</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pkg</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">],</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #E4F0FB\">main</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #A6ACCD\">: </span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">pkg/index.js</span><span style=\"color: #A6ACCD\">\"</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #D0679D\">...</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #D0679D\">rest</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h3 id=\"modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\"><a href=\"#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert\" style=\"margin-right: 10px\">#</a></a>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>\n<p>I changed the rust code to return a String value instead of making an alert box</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #A6ACCD\">#[wasm_bindgen]</span></span>\n<span class=\"line\"><span style=\"color: #5DE4C7\">pub</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">fn</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">greet</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x26;</span><span style=\"color: #A6ACCDC0\">str</span><span style=\"color: #A6ACCD\">) </span><span style=\"color: #91B4D5\">-></span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">String</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #ADD7FF\">format!</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">\"</span><span style=\"color: #5DE4C7\">Hello </span><span style=\"color: #A6ACCD\">{}\"</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">name</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<h3 id=\"build-the-hello-wasm-pkg\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-the-hello-wasm-pkg\"><a href=\"#build-the-hello-wasm-pkg\" style=\"margin-right: 10px\">#</a></a>Build the <code>hello-wasm</code> pkg</h3>\n<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory\nnamed <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>\nfolder is effectively a node package. We could publish this to <code>NPM</code> (see\nfootnote 1)</p>\n<h3 id=\"add-the-hello-wasm-package-to-the-app-dependencies\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#add-the-hello-wasm-package-to-the-app-dependencies\"><a href=\"#add-the-hello-wasm-package-to-the-app-dependencies\" style=\"margin-right: 10px\">#</a></a>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>\n<p>Add <code>\"hello-wasm\":\"^1.0.0\"</code> to the <code>dependencies</code> array in <code>app/package.json</code>.\nThis will refer to our local monorepo's rust wasm package!</p>\n<h3 id=\"create-craco-config-for-create-react-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#create-craco-config-for-create-react-app\"><a href=\"#create-craco-config-for-create-react-app\" style=\"margin-right: 10px\">#</a></a>Create craco config for <code>create-react-app</code></h3>\n<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize\nthe <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>\n<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this\n<code>craco.config.js</code></p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E4F0FB\">module</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">exports</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">  </span><span style=\"color: #ADD7FF\">webpack</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">    </span><span style=\"color: #ADD7FF\">configure</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">wasmExtensionRegExp</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #5FB3A1\"> </span><span style=\"color: #A6ACCD\">/</span><span style=\"color: #5FB3A1\">\\.wasm</span><span style=\"color: #A6ACCD\">$/</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">resolve</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">extensions</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">push</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">.wasm</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">experiments</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #E4F0FB\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">        </span><span style=\"color: #ADD7FF\">syncWebAssembly</span><span style=\"color: #A6ACCD\">:</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #5DE4C7\">true</span><span style=\"color: #A6ACCD\">,</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">      </span><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #E4F0FB\">config</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">module</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">rules</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">forEach</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">rule</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">        </span><span style=\"color: #A6ACCD\">;(</span><span style=\"color: #E4F0FB\">rule</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">||</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">[]).</span><span style=\"color: #E4F0FBD0\">forEach</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">          </span><span style=\"color: #A6ACCD\">if</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">type</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #91B4D5\">===</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">asset/resource</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #A6ACCD\">{</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">            </span><span style=\"color: #E4F0FB\">oneOf</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FB\">exclude</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">push</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">wasmExtensionRegExp</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">          </span><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">        </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #A6ACCD\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">      </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #ADD7FF\"> </span><span style=\"color: #E4F0FB\">config</span></span>\n<span class=\"line\"><span style=\"color: #ADD7FF\">    </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #E4F0FB\">  </span><span style=\"color: #A6ACCD\">},</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Note: this thread helped me to create the craco config\n<a href=\"https://github.com/Emurgo/cardano-serialization-lib/issues/295\">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>\n<p>Also see footnote 2 for more info</p>\n<h3 id=\"final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\"><a href=\"#final-step-use-async-import-to-import-the-hello-wasm-greeting\" style=\"margin-right: 10px\">#</a></a>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>\n<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our\nrust function, <code>greet</code>, from javascript!</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">function</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #ADD7FF\">App</span><span style=\"color: #A6ACCD\">() {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> [</span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">setGreeting</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">useState</span><span style=\"color: #A6ACCD\">&#x3C;</span><span style=\"color: #A6ACCDC0\">string</span><span style=\"color: #A6ACCD\">>()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">useEffect</span><span style=\"color: #A6ACCD\">(() </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    ;(</span><span style=\"color: #5DE4C7\">async</span><span style=\"color: #A6ACCD\"> () </span><span style=\"color: #91B4D5\">=></span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      </span><span style=\"color: #D0679D\">try</span><span style=\"color: #A6ACCD\"> {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7C0\">await</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">import</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">hello-wasm</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">greet</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Colin</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FBD0\">setGreeting</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">greeting</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      } </span><span style=\"color: #D0679D\">catch</span><span style=\"color: #A6ACCD\"> (</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">        </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">error</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">e</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    })()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }, [])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #5DE4C7C0\">return</span><span style=\"color: #A6ACCD\"> (</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    &#x3C;</span><span style=\"color: #A6ACCDC0\">div</span><span style=\"color: #A6ACCD\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      &#x3C;</span><span style=\"color: #A6ACCDC0\">h1</span><span style=\"color: #A6ACCD\">></span><span style=\"color: #E4F0FB\">rust</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">monorepo</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">demo</span><span style=\"color: #91B4D5\">&#x3C;/</span><span style=\"color: #E4F0FB\">h1</span><span style=\"color: #91B4D5\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">      &#x3C;</span><span style=\"color: #A6ACCDC0\">h2</span><span style=\"color: #A6ACCD\">></span><span style=\"color: #E4F0FB\">Greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">from</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">wasm</span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> {!</span><span style=\"color: #A6ACCDC0\">greeting</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">?</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">Loading...</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">:</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #A6ACCDC0\">greeting</span><span style=\"color: #A6ACCD\">}&#x3C;/</span><span style=\"color: #A6ACCDC0\">h2</span><span style=\"color: #A6ACCD\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #91B4D5\">&#x3C;/</span><span style=\"color: #E4F0FB\">div</span><span style=\"color: #91B4D5\">></span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  )</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>In order to greet an arbitrary person, I modified this slightly in the live\ndemo. See\n<a href=\"https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx\">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>\n<h3 id=\"run-the-app\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#run-the-app\"><a href=\"#run-the-app\" style=\"margin-right: 10px\">#</a></a>Run the app!</h3>\n<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>\n<h2 id=\"result\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#result\"><a href=\"#result\" style=\"margin-right: 10px\">#</a></a>Result!</h2>\n<p>A screenshot of the app, showing the string \"Hello Colin\" which is generated via\nrust and wasm</p>\n<p><img src=\"/media/rust_wasm_demo.png\" alt=\"\"></p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>My main aim was to demonstrate creating a \"simple\" monorepo setup showing how\nyou can integrate Rust+WASM and React. Feel free to ask me any questions and go\ncheck out the repo!</p>\n<p><a href=\"https://github.com/cmdcolin/rust_react_monorepo_template\">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>\n<h2 id=\"other-resources\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#other-resources\"><a href=\"#other-resources\" style=\"margin-right: 10px\">#</a></a>Other resources</h2>\n<p>This article is quite helpful also, but uses a file:/ reference in their\n<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite\nsimilar though!\n<a href=\"https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm\">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>\n<h2 id=\"footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\"><a href=\"#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files\" style=\"margin-right: 10px\">#</a></a>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>\n<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of the\npackage import the module, they would receive <code>pkg/index.js</code> from the <code>main</code>\nfield in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the\n<code>index.wasm</code> file. Then it is up to the consumers bundler to package that\ncorrectly.</p>\n<h2 id=\"footnote-2-bundlers-and-wasm\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-2-bundlers-and-wasm\"><a href=\"#footnote-2-bundlers-and-wasm\" style=\"margin-right: 10px\">#</a></a>Footnote 2: Bundlers and wasm</h2>\n<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which\nhas \"native support\" for wasm. Still, it is hidden behind a flag called\n\"experiments\" (see first google result for webpack wasm here\n<a href=\"https://webpack.js.org/configuration/experiments/\">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to\nmodify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>\n<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a\nslightly different workflow (used a special <code>webpack</code> loader called\n<code>wasm-loader</code>)</p>\n<p>You can also likely use similar techniques described in this article to\nincorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on how\nother bundlers use wasm, feel free to leave a comment.</p>\n<h2 id=\"footnote-3-why-do-i-have-to-use-async-imports\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-3-why-do-i-have-to-use-async-imports\"><a href=\"#footnote-3-why-do-i-have-to-use-async-imports\" style=\"margin-right: 10px\">#</a></a>Footnote 3: Why do I have to use async imports?</h2>\n<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can\nbe run (it is not in my experience e.g. embedded as binary data inside a js\nfile) which means it would be difficult to use the wasm code as a synchronous\nimport.</p>\n<p>There are hints that this may be possible but it would rely on the bundler\nembedding the wasm code in the js itself, or maybe top-level-await. If anyone\nhas more info, feel free to leave a comment!</p>\n<h2 id=\"footnote-4-build-setup\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-4-build-setup\"><a href=\"#footnote-4-build-setup\" style=\"margin-right: 10px\">#</a></a>Footnote 4: Build setup</h2>\n<p>The <code>hello-wasm</code> package does not automatically recompile when we are running\ne.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires\nyou to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to\nbe aware of</p>\n<h2 id=\"footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\"><a href=\"#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky\" style=\"margin-right: 10px\">#</a></a>Footnote 5: My first experience with trying to make this work was rocky!</h2>\n<p>I first created an example of rust+wasm+react almost two years ago when creating\na fractal viewer <a href=\"https://github.com/cmdcolin/logistic_chaos_map\">https://github.com/cmdcolin/logistic_chaos_map</a> and it has some\ndevelopment notes on the stumbling blocks I faced\n<a href=\"https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md\">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>\n<h2 id=\"footnote-6-i-thought-you-said-typescript-too\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-6-i-thought-you-said-typescript-too\"><a href=\"#footnote-6-i-thought-you-said-typescript-too\" style=\"margin-right: 10px\">#</a></a>Footnote 6: I thought you said typescript too</h2>\n<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the\n<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a\nbuilt-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is\nproduced in the <code>hello-wasm</code> build to help understand the details. I also\nrecommend reading the <a href=\"https://rustwasm.github.io/wasm-bindgen/\">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you\nare getting started with rust, read the Rust Book along with doing rustlings\n<a href=\"https://github.com/rust-lang/rustlings\">https://github.com/rust-lang/rustlings</a></p>\n<h2 id=\"footnote-7-another-resource\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#footnote-7-another-resource\"><a href=\"#footnote-7-another-resource\" style=\"margin-right: 10px\">#</a></a>Footnote 7: Another resource</h2>\n<p>This article was posted on reddit and is also a great resource especially about\nsync vs async webpack loading schemes for wasm</p>\n<p><a href=\"https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/\">https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/</a></p>"}}],["$","$L9",null,{}]]}]
7:[null,null,[]]
8:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next.js"}]]]
