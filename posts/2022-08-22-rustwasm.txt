1:HL["/_next/static/css/97dc5fe527f5d592.css",{"as":"style"}]
0:["iunEqd-0Rr4_DuL8JL09G",[[["",{"children":["posts",{"children":[["id","2022-08-22-rustwasm","d"],{"children":["__PAGE__?{\"id\":\"2022-08-22-rustwasm\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next"}]],"$L3"]]]]
4:I{"id":6685,"chunks":["685:static/chunks/685-3ae734227e2e8975.js","185:static/chunks/app/layout-3759995e3b279a75.js"],"name":"","async":false}
5:I{"id":7767,"chunks":["272:static/chunks/webpack-40edba06f6f71edb.js","971:static/chunks/fd9d1056-2b15443312687f8a.js","596:static/chunks/596-adeabdb313a347d9.js"],"name":"default","async":false}
6:I{"id":7920,"chunks":["272:static/chunks/webpack-40edba06f6f71edb.js","971:static/chunks/fd9d1056-2b15443312687f8a.js","596:static/chunks/596-adeabdb313a347d9.js"],"name":"default","async":false}
2:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2022-08-22-rustwasm","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7","$L8",null],"segment":"__PAGE__?{\"id\":\"2022-08-22-rustwasm\"}"},"styles":[]}],"segment":["id","2022-08-22-rustwasm","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}]," ",["$","$L4",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}]," ",["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
a:I{"id":6306,"chunks":["722:static/chunks/app/posts/[id]/page-8cf76b3c924a344e.js"],"name":"","async":false}
9:T749f,<p>Behold, the buzzwords:</p>
<ul>
<li>Rust / WASM / wasm-bindgen</li>
<li>React</li>
<li>Monorepo / Yarn workspaces</li>
<li>Webpack 5 / create-react-app 5</li>
<li>Typescript</li>
</ul>
<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>
<p>TLDR: visit the final product!
<a href="https://github.com/cmdcolin/rust_react_monorepo_template">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed
live here <a href="https://cmdcolin.github.io/rust_react_monorepo_template">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>
<h2 id="steps-to-create-this-type-of-integration-from-scratch"><a aria-hidden="true" tabindex="-1" href="#steps-to-create-this-type-of-integration-from-scratch"><a href="#steps-to-create-this-type-of-integration-from-scratch" style="margin-right: 10px">#</a></a>Steps to create this type of integration from scratch</h2>
<h3 id="create-repo"><a aria-hidden="true" tabindex="-1" href="#create-repo"><a href="#create-repo" style="margin-right: 10px">#</a></a>Create repo</h3>
<pre><code>mkdir template
cd template
git init
</code></pre>
<h3 id="create-root-packagejson"><a aria-hidden="true" tabindex="-1" href="#create-root-packagejson"><a href="#create-root-packagejson" style="margin-right: 10px">#</a></a>Create root <code>package.json</code></h3>
<p>Then put this in the monorepo's root <code>package.json</code></p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">private</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">workspaces</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">app</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This sets our repo up as a "monorepo" with two "workspaces". one will be the
wasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>
<h3 id="add-a-create-react-app-instance-inside-the-monorepo"><a aria-hidden="true" tabindex="-1" href="#add-a-create-react-app-instance-inside-the-monorepo"><a href="#add-a-create-react-app-instance-inside-the-monorepo" style="margin-right: 10px">#</a></a>Add a <code>create-react-app</code> instance inside the monorepo</h3>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npx</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">create-react-app</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--template</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">app</span></span></code></pre>
<p>This will make an <code>app</code> subfolder inside our monorepo</p>
<h3 id="download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm"><a aria-hidden="true" tabindex="-1" href="#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm"><a href="#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm" style="margin-right: 10px">#</a></a>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>
<p>Download <a href="https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a>
to the hello-wasm folder</p>
<p>This link can help
<a href="https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>
<h3 id="add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder"><a aria-hidden="true" tabindex="-1" href="#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder"><a href="#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder" style="margin-right: 10px">#</a></a>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pkg</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pkg/index.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">rest</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h3 id="modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert"><a aria-hidden="true" tabindex="-1" href="#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert"><a href="#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert" style="margin-right: 10px">#</a></a>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>
<p>I changed the rust code to return a String value instead of making an alert box</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">#[wasm_bindgen]</span></span>
<span class="line"><span style="color: #5DE4C7">pub</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">fn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">greet</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCDC0">str</span><span style="color: #A6ACCD">) </span><span style="color: #91B4D5">-></span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">String</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #ADD7FF">format!</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Hello </span><span style="color: #A6ACCD">{}"</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h3 id="build-the-hello-wasm-pkg"><a aria-hidden="true" tabindex="-1" href="#build-the-hello-wasm-pkg"><a href="#build-the-hello-wasm-pkg" style="margin-right: 10px">#</a></a>Build the <code>hello-wasm</code> pkg</h3>
<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory
named <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>
folder is effectively a node package. We could publish this to <code>NPM</code> (see
footnote 1)</p>
<h3 id="add-the-hello-wasm-package-to-the-app-dependencies"><a aria-hidden="true" tabindex="-1" href="#add-the-hello-wasm-package-to-the-app-dependencies"><a href="#add-the-hello-wasm-package-to-the-app-dependencies" style="margin-right: 10px">#</a></a>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>
<p>Add <code>"hello-wasm":"^1.0.0"</code> to the <code>dependencies</code> array in <code>app/package.json</code>.
This will refer to our local monorepo's rust wasm package!</p>
<h3 id="create-craco-config-for-create-react-app"><a aria-hidden="true" tabindex="-1" href="#create-craco-config-for-create-react-app"><a href="#create-craco-config-for-create-react-app" style="margin-right: 10px">#</a></a>Create craco config for <code>create-react-app</code></h3>
<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize
the <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>
<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this
<code>craco.config.js</code></p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">webpack</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">configure</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">config</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #91B4D5">const</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">wasmExtensionRegExp</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=</span><span style="color: #5FB3A1"> </span><span style="color: #A6ACCD">/</span><span style="color: #5FB3A1">\.wasm</span><span style="color: #A6ACCD">$/</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">extensions</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">push</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">.wasm</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">experiments</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">syncWebAssembly</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">rules</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">rule</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">        </span><span style="color: #A6ACCD">;(</span><span style="color: #E4F0FB">rule</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">oneOf</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">||</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">[]).</span><span style="color: #E4F0FBD0">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">oneOf</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">          </span><span style="color: #A6ACCD">if</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">oneOf</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">===</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">asset/resource</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">            </span><span style="color: #E4F0FB">oneOf</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exclude</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">push</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">wasmExtensionRegExp</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">          </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #ADD7FF">        </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #5DE4C7C0">return</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">config</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Note: this thread helped me to create the craco config
<a href="https://github.com/Emurgo/cardano-serialization-lib/issues/295">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>
<p>Also see footnote 2 for more info</p>
<h3 id="final-step-use-async-import-to-import-the-hello-wasm-greeting"><a aria-hidden="true" tabindex="-1" href="#final-step-use-async-import-to-import-the-hello-wasm-greeting"><a href="#final-step-use-async-import-to-import-the-hello-wasm-greeting" style="margin-right: 10px">#</a></a>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>
<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our
rust function, <code>greet</code>, from javascript!</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setGreeting</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">import</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">greet</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setGreeting</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })()</span></span>
<span class="line"><span style="color: #A6ACCD">  }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    &#x3C;</span><span style="color: #A6ACCDC0">div</span><span style="color: #A6ACCD">></span></span>
<span class="line"><span style="color: #A6ACCD">      &#x3C;</span><span style="color: #A6ACCDC0">h1</span><span style="color: #A6ACCD">></span><span style="color: #E4F0FB">rust</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">monorepo</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">demo</span><span style="color: #91B4D5">&#x3C;/</span><span style="color: #E4F0FB">h1</span><span style="color: #91B4D5">></span></span>
<span class="line"><span style="color: #A6ACCD">      &#x3C;</span><span style="color: #A6ACCDC0">h2</span><span style="color: #A6ACCD">></span><span style="color: #E4F0FB">Greeting</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">from</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {!</span><span style="color: #A6ACCDC0">greeting</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">?</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Loading...</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">greeting</span><span style="color: #A6ACCD">}&#x3C;/</span><span style="color: #A6ACCDC0">h2</span><span style="color: #A6ACCD">></span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">&#x3C;/</span><span style="color: #E4F0FB">div</span><span style="color: #91B4D5">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>In order to greet an arbitrary person, I modified this slightly in the live
demo. See
<a href="https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>
<h3 id="run-the-app"><a aria-hidden="true" tabindex="-1" href="#run-the-app"><a href="#run-the-app" style="margin-right: 10px">#</a></a>Run the app!</h3>
<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>
<h2 id="result"><a aria-hidden="true" tabindex="-1" href="#result"><a href="#result" style="margin-right: 10px">#</a></a>Result!</h2>
<p>A screenshot of the app, showing the string "Hello Colin" which is generated via
rust and wasm</p>
<p><img src="/media/rust_wasm_demo.png" alt=""></p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>My main aim was to demonstrate creating a "simple" monorepo setup showing how
you can integrate Rust+WASM and React. Feel free to ask me any questions and go
check out the repo!</p>
<p><a href="https://github.com/cmdcolin/rust_react_monorepo_template">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>
<h2 id="other-resources"><a aria-hidden="true" tabindex="-1" href="#other-resources"><a href="#other-resources" style="margin-right: 10px">#</a></a>Other resources</h2>
<p>This article is quite helpful also, but uses a file:/ reference in their
<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite
similar though!
<a href="https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>
<h2 id="footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files"><a aria-hidden="true" tabindex="-1" href="#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files"><a href="#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files" style="margin-right: 10px">#</a></a>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>
<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of the
package import the module, they would receive <code>pkg/index.js</code> from the <code>main</code>
field in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the
<code>index.wasm</code> file. Then it is up to the consumers bundler to package that
correctly.</p>
<h2 id="footnote-2-bundlers-and-wasm"><a aria-hidden="true" tabindex="-1" href="#footnote-2-bundlers-and-wasm"><a href="#footnote-2-bundlers-and-wasm" style="margin-right: 10px">#</a></a>Footnote 2: Bundlers and wasm</h2>
<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which
has "native support" for wasm. Still, it is hidden behind a flag called
"experiments" (see first google result for webpack wasm here
<a href="https://webpack.js.org/configuration/experiments/">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to
modify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>
<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a
slightly different workflow (used a special <code>webpack</code> loader called
<code>wasm-loader</code>)</p>
<p>You can also likely use similar techniques described in this article to
incorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on how
other bundlers use wasm, feel free to leave a comment.</p>
<h2 id="footnote-3-why-do-i-have-to-use-async-imports"><a aria-hidden="true" tabindex="-1" href="#footnote-3-why-do-i-have-to-use-async-imports"><a href="#footnote-3-why-do-i-have-to-use-async-imports" style="margin-right: 10px">#</a></a>Footnote 3: Why do I have to use async imports?</h2>
<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can
be run (it is not in my experience e.g. embedded as binary data inside a js
file) which means it would be difficult to use the wasm code as a synchronous
import.</p>
<p>There are hints that this may be possible but it would rely on the bundler
embedding the wasm code in the js itself, or maybe top-level-await. If anyone
has more info, feel free to leave a comment!</p>
<h2 id="footnote-4-build-setup"><a aria-hidden="true" tabindex="-1" href="#footnote-4-build-setup"><a href="#footnote-4-build-setup" style="margin-right: 10px">#</a></a>Footnote 4: Build setup</h2>
<p>The <code>hello-wasm</code> package does not automatically recompile when we are running
e.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires
you to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to
be aware of</p>
<h2 id="footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky"><a aria-hidden="true" tabindex="-1" href="#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky"><a href="#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky" style="margin-right: 10px">#</a></a>Footnote 5: My first experience with trying to make this work was rocky!</h2>
<p>I first created an example of rust+wasm+react almost two years ago when creating
a fractal viewer <a href="https://github.com/cmdcolin/logistic_chaos_map">https://github.com/cmdcolin/logistic_chaos_map</a> and it has some
development notes on the stumbling blocks I faced
<a href="https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>
<h2 id="footnote-6-i-thought-you-said-typescript-too"><a aria-hidden="true" tabindex="-1" href="#footnote-6-i-thought-you-said-typescript-too"><a href="#footnote-6-i-thought-you-said-typescript-too" style="margin-right: 10px">#</a></a>Footnote 6: I thought you said typescript too</h2>
<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the
<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a
built-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is
produced in the <code>hello-wasm</code> build to help understand the details. I also
recommend reading the <a href="https://rustwasm.github.io/wasm-bindgen/">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you
are getting started with rust, read the Rust Book along with doing rustlings
<a href="https://github.com/rust-lang/rustlings">https://github.com/rust-lang/rustlings</a></p>
<h2 id="footnote-7-another-resource"><a aria-hidden="true" tabindex="-1" href="#footnote-7-another-resource"><a href="#footnote-7-another-resource" style="margin-right: 10px">#</a></a>Footnote 7: Another resource</h2>
<p>This article was posted on reddit and is also a great resource especially about
sync vs async webpack loading schemes for wasm</p>
<p><a href="https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/">https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/</a></p>8:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"Using Rust/WASM in a monorepo with create-react-app"}],["$","h4",null,{"children":"2022-08-22"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}],["$","$La",null,{}]]}]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Using Rust/WASM in a monorepo with create-react-app"}],["$","meta","2",{"name":"description","content":"A blog"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"128x128"}]]
7:null
