2:"$Sreact.fragment"
3:I[4839,["839","static/chunks/839-781fb1f9fbb32020.js","974","static/chunks/app/page-b8224092ad435855.js"],""]
4:I[5244,[],""]
5:I[3866,[],""]
7:I[6213,[],"OutletBoundary"]
9:I[6213,[],"MetadataBoundary"]
b:I[6213,[],"ViewportBoundary"]
d:I[4835,[],""]
1:HL["/_next/static/css/d19cfa26cd1ef694.css","style"]
0:{"P":null,"b":"TXv26tlUrn9NEsthkAVjl","p":"","c":["","posts","2020-06-03"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2020-06-03","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"mt-16","children":[["$","$L3",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L3",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L3",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L3",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L3",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L3",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L3",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L3",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["id","2020-06-03","d"],["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","dY0dauBeRNPTGpmWMpX7m",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}]]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-6ba20b6c7bd62b9f.js"],"default"]
e:T1d4a,<p>Disclaimer: I enjoy the project I am working on and this is still a work in
progress. I just had to rant about the stuff I go through in my job here, but it
does not reflect the opinions of my emplorer, and my personal opinion is despite
these troubles we are coming along nicely</p>
<p>I joined a team that was doing the big rewrite in 2018. I was involved in the
project before then and knew it's ins and outs, and frankly think it's still a
great system. In order to break it's "limitations" a grand v2 gets started. I
think my team has been good. My tech lead is really good at architecture. Where
I really resist kind of "writing new architecture that is not already there", he
can pull up entirely new concepts and abstractions that are all pretty good.
Myself, I don't much enjoy writing "new architecture" if there is something
already there that I can use, and I'll try to refer to the existence of an
existing thing instead of creating new exotic stuff.</p>
<p>Now, what happened during the big rewrite so far. 4 people on the team, 2 years
in</p>
<h2 id="persistent-confusion-about-sources-of-slowness-in-our-app"><a aria-hidden="true" tabindex="-1" href="#persistent-confusion-about-sources-of-slowness-in-our-app"><a href="#persistent-confusion-about-sources-of-slowness-in-our-app" style="margin-right: 10px">#</a></a>Persistent confusion about sources of slowness in our app</h2>
<ul>
<li>
<p>claim: "it's only slow because devtools is open"</p>
</li>
<li>
<p>cold water: maybe it is! but this is definitely a red herring. the code should
work with devtools open. reason that's been stated: devtools adds a "bunch of
instrumentation to the promises that slows it down"...stated without any
evidence during a 3 hour long planning call...</p>
</li>
<li>
<p>claim: "it's only slow because we're using a development build of react, try a
production build"</p>
</li>
<li>
<p>cold water: the production build makes some stuff faster, but it is NOT going
to save your butt if you are constantly rerending all your components
unnecessarily every millisecond during user scroll, which is something we
suffered from, and it creeps back in if you are not careful because you can't
write tests against this so often one day I'll be looking at my devtools and
suddenly things are rendering twice per frame (signature of calling an
unnecessary setState), tons of unnecessary components rendering in every frame
(signature of componentShouldUpdate/bad functional react memoizing, etc))</p>
</li>
<li>
<p>claim: "it's slow because we are hogging the main thread all the time"</p>
</li>
<li>
<p>cold water: in our app, we made a very complex webworker framework. now main
thread contention is a concern, but really our app needs to just be performant
all around, webworkers just offloads that cpu spinning to another core. what
we have done in v2 is we went whole hog and made our code rely on
OffscreenCanvas which 0 browsers support. also, our webworker bundles
(worker-loader webpack build) are huge webpack things that pretty much contain
all the code that is on the main thread so it's just massive. that makes it
slow at loading time, and makes it harder to think about our worker threads in
a lighter-weight way, and the worker concept is now very deeply entrenched in
a lot of the code (all code has to think of things in terms of rpc calls)</p>
</li>
<li>
<p>claim: "it's slow because there are processes that haven't been aborted
spinning in the background, so we must build out an intensive AbortController
thing that touches the entirety of all our code including sending abort
signals across the RPC boundary in hopes that a locked up webworker will
respond to this"</p>
</li>
<li>
<p>cold water: our first version of the software had zero aborting, did not from
my perspective suffer. arguments with the team have gotten accusatory where I
just claim that there is no evidence that the aborting is helping us, pointing
to the fact that our old code works fine, and that if our new code suffers
without aborting, that means something else is wrong. I have not really been
given a proper response for this, and so the curse of passing AbortSignals
onto every function via an extra function parameter drags on</p>
</li>
<li>
<p>claim: "it's slow because we are not multithreading"</p>
</li>
<li>
<p>cold water: so we try multi-threading, but this repeatedly downloads the same
data twice into different webworkers, and parses it separately, which leads to
more resource spent, more network IO, more slowness...</p>
</li>
</ul>
<h2 id="persistent-confusion-about-what-our-users-needs-are"><a aria-hidden="true" tabindex="-1" href="#persistent-confusion-about-what-our-users-needs-are"><a href="#persistent-confusion-about-what-our-users-needs-are" style="margin-right: 10px">#</a></a>Persistent confusion about what our users needs are</h2>
<ul>
<li>
<p>claim: there should be per-track scroll bars</p>
</li>
<li>
<p>cols water: doing this leads to many scrolls within-scrolls on the page, which
makes it very hard to scroll the page)</p>
</li>
<li>
<p>claim: the old search indexing system is "bad".</p>
</li>
<li>
<p>cold water: yes it is a bit slow but is it really THE critical problem we
face? likely not: bioinformatics people run a data pipeline, it takes a couple
days, so what. use elasticsearch if it sucks so bad</p>
</li>
<li>
<p>claim: our users are "stupid" so they need to have every single thing GUI
editable. cold water: interesting endeavor, but our design for this has been
difficult, and has not yet delivered on simplifying the system for users,
instead, the config editing GUI is monstrously complex</p>
</li>
<li>
<p>claim: our users "do not like modal popups"...so we design everything into a
tiny sidedrawer that barely can contain the relevant data. cold water: now
everything is in a tiny side drawer...a major constraint on user inteface
design</p>
</li>
<li>
<p>claim: having interest in catering to obscure or not very clear "user stories"
like displaying the same exact region twice on the screen at once saying
"someone will want to do this". cold water: this causes a lot of extra logical
weirdness in the app that has unclear benefit in the long run</p>
</li>
</ul>
<h2 id="on-going-misdirections"><a aria-hidden="true" tabindex="-1" href="#on-going-misdirections"><a href="#on-going-misdirections" style="margin-right: 10px">#</a></a>On-going misdirections</h2>
<ul>
<li>problem: not catering to emerging areas of user needs such as breaking our
large app into components that can be re-used, and instead just going full hog
on a large monolith project and treating our monolith as a giant hammer that
will solve everyones problems, when in reality, our users are also programmers
that could benefit from using smaller componentized versions of our code</li>
<li>there is confusion about "what our competitors have". my team one day claimed
"alright so if we just do that and then we will have everything product X
has?" and I just had to be clear and be like, no! the X has a really complex
system of their own that we could never hope to replicate. we likely don't
have even 20% of X. and we are slower and not as scalable as X. we do have our
own strengths that make us compelling still</li>
<li>etc...</li>
</ul>
<p>but what does all this imply?</p>
<p>there are persistent confusion about what the challenges we face are, what the
architectural needs are, what our user stores are, what our new v2 design goals
are, and more. It's really crazy</p>6:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Misconceptions your team might have during The Big Rewrite"}],["$","h4",null,{"children":"2020-06-03"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}],["$","$Lf",null,{}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Misconceptions your team might have during The Big Rewrite"}],["$","meta","2",{"name":"description","content":"A blog"}]]
8:null
