0:[[["",{"children":["posts",{"children":[["id","2020-06-03","d"],{"children":["__PAGE__?{\"id\":\"2020-06-03\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"3619","name":"","chunks":["619:619-d3e80a47715091a2","931:app/page-59752a1737368847"],"async":false}
4:I{"id":"1300","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
5:I{"id":"6022","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
1:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2020-06-03","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L6","$@7"],"segment":"__PAGE__?{\"id\":\"2020-06-03\"}"}}],"segment":["id","2020-06-03","d"]}}],"segment":"posts"}}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L3",null,{"href":"/","children":"Home"}]," ",["$","$L3",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L3",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L3",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L3",null,{"href":"/projects","children":"Projects"}]," ",["$","$L3",null,{"href":"/photos","children":"Photos"}]," ",["$","$L3",null,{"href":"/about","children":"About"}]]}]]}]}],"$@8"]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"Misconceptions your team might have during The Big Rewrite"}],["$","meta",null,{"name":"description","content":"A blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
9:I{"id":"3591","name":"","chunks":["722:app/posts/[id]/page-cb4a6e559310dd46"],"async":false}
6:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"Misconceptions your team might have during The Big Rewrite"}],["$","h4",null,{"children":"2020-06-03"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>Disclaimer: I enjoy the project I am working on and this is still a work in\nprogress. I just had to rant about the stuff I go through in my job here, but it\ndoes not reflect the opinions of my emplorer, and my personal opinion is despite\nthese troubles we are coming along nicely</p>\n<p>I joined a team that was doing the big rewrite in 2018. I was involved in the\nproject before then and knew it's ins and outs, and frankly think it's still a\ngreat system. In order to break it's \"limitations\" a grand v2 gets started. I\nthink my team has been good. My tech lead is really good at architecture. Where\nI really resist kind of \"writing new architecture that is not already there\", he\ncan pull up entirely new concepts and abstractions that are all pretty good.\nMyself, I don't much enjoy writing \"new architecture\" if there is something\nalready there that I can use, and I'll try to refer to the existence of an\nexisting thing instead of creating new exotic stuff.</p>\n<p>Now, what happened during the big rewrite so far. 4 people on the team, 2 years\nin</p>\n<p>Persistent confusion about sources of slowness in our app</p>\n<ul>\n<li>it's only slow because devtools is open (maybe it is! but this is definitely a\nred herring. the code should work with devtools open. reason that's been\nstated: devtools adds a \"bunch of instrumentation to the promises that slows\nit down\"...stated without any evidence during a 3 hour long planning call...)\n<ul>\n<li>it's only slow because we're using a development build of react, try a\nproduction build (the production build makes some stuff faster, but it is\nNOT going to save your butt if you are constantly rerending all your\ncomponents unnecessarily every millisecond during user scroll, which is\nsomething we suffered from, and it creeps back in if you are not careful\nbecause you can't write tests against this so often one day I'll be looking\nat my devtools and suddenly things are rendering twice per frame (signature\nof calling an unnecessary setState), tons of unnecessary components\nrendering in every frame (signature of componentShouldUpdate/bad functional\nreact memoizing, etc))</li>\n<li>it's slow because we are hogging the main thread all the time, our killer\nnew feature in v2 is an intense webworker framework. now main thread\ncontention is a concern, but really our app needs to just be performant all\naround, webworkers just offloads that cpu spinning to another core. what we\nhave done in v2 is we went whole hog and made our code rely on\nOffscreenCanvas which 0 browsers support. also, our webworker bundles\n(worker-loader webpack build) are huge webpack things that pretty much\ncontain all the code that is on the main thread so it's just massive. that\nmakes it slow at loading time, and makes it harder to think about our worker\nthreads in a lighter-weight way, and the worker concept is now very deeply\nentrenched in a lot of the code (all code has to think of things in terms of\nrpc calls)</li>\n<li>it's slow because there are processes that haven't been aborted spinning in\nthe background, so we must build out an intensive AbortController thing that\ntouches the entirety of all our code including sending abort signals across\nthe RPC boundary in hopes that a locked up webworker will respond to this\n(note: our first version of the software had zero aborting, did not from my\nperspective suffer. arguments with the team have gotten accusatory where I\njust claim that there is no evidence that the aborting is helping us,\npointing to the fact that our old code works fine, and that if our new code\nsuffers without aborting, that means something else is wrong. I have not\nreally been given a proper response for this, and so the curse of passing\nAbortSignals onto every function via an extra function parameter drags on</li>\n<li>it's slow because we are not multithreading..., so we put two views of the\nsame data into different webworkers (but now each webworker separately\ndownloads the same data, which leads to more resource spent, more network\nIO, more slowness)</li>\n</ul>\n</li>\n</ul>\n<p>confusion about what our old users needs are</p>\n<ul>\n<li>\n<p>tracks not having per-track scroll (problem: leads to many scrolls\nwithin-scrolls, still unresolved problem)</p>\n</li>\n<li>\n<p>the name indexing was always a big problem (yes it is slow but is it really\nTHE critical problem we face? likely not: bioinformatics people run a data\npipeline, it takes a couple days, so what). use elasticsearch if it sucks so\nbad</p>\n</li>\n<li>\n<p>our users are \"stupid\" so they need to have every single thing GUI editable\n(interesting endeavor, but our design for this has been difficult, and has not\nyet delivered on simplifying the system for users)</p>\n</li>\n<li>\n<p>our users \"do not like modal popups\" so we design everything into a tiny\nsidedrawer that barely can contain the relevant data that they want to see</p>\n</li>\n<li>\n<p>having interest in catering to obscure or not very clear \"user stories\" like\ndisplaying the same exact region twice on the screen at once saying \"someone\nwill want to do this\", but causing a ton of extra logical weirdness from this</p>\n</li>\n<li>\n<p>not catering to emerging areas of user needs such as breaking our large app\ninto components that can be re-used, and instead just going full hog on a\nlarge monolith project and treating our monolith as a giant hammer that will\nsolve everyones problems, when in reality, our users are also programmers that\ncould benefit from using smaller componentized versions of our code</p>\n</li>\n<li>\n<p>confusion about \"what our competitors have\". sometimes my team one day was\nlike \"alright we just do that and then we have everything product X has?\" and\nI just had to be clear and be like, no! the competitor has a really pretty\nintricate complex system that we could never hope to replicate. but does that\nmatter? probably not, but even still, we likely don't have even 20% of the\nfull set of functions of a competitor. luckily we have our own strengths that\nmake us compelling besides that 20%</p>\n</li>\n<li>\n<p>making it so our product requires a server side component to run, where our\nfirst version was much more amenable to running as a static site</p>\n</li>\n<li>\n<p>etc...</p>\n</li>\n</ul>\n<p>but what does all this imply?</p>\n<p>there are persistent confusion about what the challenges we face are, what the\narchitectural needs are, what our user stores are, what our new v2 design goals\nare, and more. It's really crazy</p>"}}],["$","$L9",null,{}]]}]
7:[null,null,[]]
8:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next.js"}]]]
