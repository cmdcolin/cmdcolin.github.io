3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-26142438061866f4.js","931","static/chunks/app/page-963abe75e6aad650.js"],""]
4:["id","2023-04-08-nextjs-appdir-blog","d"]
0:["5kMy9E9e4wRVol89SdmVW",[[["",{"children":["posts",{"children":[["id","2023-04-08-nextjs-appdir-blog","d"],{"children":["__PAGE__?{\"id\":\"2023-04-08-nextjs-appdir-blog\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["id","2023-04-08-nextjs-appdir-blog","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L6",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L6",null,{"href":"/","children":"Home"}],["$","$L6",null,{"href":"/archive","children":"Blog archive"}],["$","$L6",null,{"href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L6",null,{"href":"/projects","children":"Projects"}]," ",["$","$L6",null,{"href":"/photos","children":"Photos"}],["$","$L6",null,{"href":"/books","children":"Books"}],["$","$L6",null,{"href":"/about","children":"About"}],["$","$L6",null,{"href":"/uses","children":"Uses"}]]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/39906f0ead253838.css","precedence":"next","crossOrigin":"$undefined"}]],"$L7"]]]]
9:I[4910,["722","static/chunks/app/posts/%5Bid%5D/page-ce940a9c9090656b.js"],"default"]
8:Tbfdf,<p>I just converted my blog to use the Next.js 'app' directory, and thought I'd
show how you can make your own static site with it. Static export of the Next.js
'app' directory was added in version 13.3
<a href="https://nextjs.org/blog/next-13-3#static-export-for-app-router">https://nextjs.org/blog/next-13-3#static-export-for-app-router</a></p>
<h2 id="tldr"><a aria-hidden="true" tabindex="-1" href="#tldr"><a href="#tldr" style="margin-right: 10px">#</a></a>TL;DR</h2>
<p>See here</p>
<p><a href="https://github.com/cmdcolin/nextjs-appdir-blog">https://github.com/cmdcolin/nextjs-appdir-blog</a></p>
<p>If you take nothing else away from this article, let it be that</p>
<ul>
<li>
<p>The 'app' dir, with react server components, can be used to create static
websites</p>
</li>
<li>
<p>That react server components (RSC) can be "async function components" whereas
this does not exist on the client side. It's quite interesting</p>
</li>
</ul>
<p>The exact step-by-step here is probably unnecessary but just trying to show the
raw basics</p>
<h2 id="step-1-run-create-next-app"><a aria-hidden="true" tabindex="-1" href="#step-1-run-create-next-app"><a href="#step-1-run-create-next-app" style="margin-right: 10px">#</a></a>Step 1. Run create-next-app</h2>
<p>I accepted all defaults but added "YES" to the use experimental app directory</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="bash" data-theme="one-dark-pro"><code data-language="bash" data-theme="one-dark-pro" style="display: grid;"><span data-line=""> </span>
<span data-line=""><span style="color:#61AFEF">$</span><span style="color:#98C379"> npx</span><span style="color:#98C379"> create-next-app</span><span style="color:#98C379"> myblog</span></span>
<span data-line=""><span style="color:#61AFEF">✔</span><span style="color:#98C379"> Would</span><span style="color:#98C379"> you</span><span style="color:#98C379"> like</span><span style="color:#98C379"> to</span><span style="color:#98C379"> use</span><span style="color:#98C379"> TypeScript</span><span style="color:#98C379"> with</span><span style="color:#98C379"> this</span><span style="color:#98C379"> project?</span><span style="color:#98C379"> …</span><span style="color:#98C379"> No</span><span style="color:#98C379"> /</span><span style="color:#98C379"> YES</span></span>
<span data-line=""><span style="color:#61AFEF">✔</span><span style="color:#98C379"> Would</span><span style="color:#98C379"> you</span><span style="color:#98C379"> like</span><span style="color:#98C379"> to</span><span style="color:#98C379"> use</span><span style="color:#98C379"> ESLint</span><span style="color:#98C379"> with</span><span style="color:#98C379"> this</span><span style="color:#98C379"> project?</span><span style="color:#98C379"> …</span><span style="color:#98C379"> No</span><span style="color:#98C379"> /</span><span style="color:#98C379"> YES</span></span>
<span data-line=""><span style="color:#61AFEF">✔</span><span style="color:#98C379"> Would</span><span style="color:#98C379"> you</span><span style="color:#98C379"> like</span><span style="color:#98C379"> to</span><span style="color:#98C379"> use</span><span style="color:#98C379"> `</span><span style="color:#61AFEF">src/</span><span style="color:#98C379">`</span><span style="color:#61AFEF"> directory</span><span style="color:#98C379"> with</span><span style="color:#98C379"> this</span><span style="color:#98C379"> project?</span><span style="color:#98C379"> …</span><span style="color:#98C379"> NO</span><span style="color:#98C379"> /</span><span style="color:#98C379"> Yes</span></span>
<span data-line=""><span style="color:#61AFEF">✔</span><span style="color:#98C379"> Would</span><span style="color:#98C379"> you</span><span style="color:#98C379"> like</span><span style="color:#98C379"> to</span><span style="color:#98C379"> use</span><span style="color:#98C379"> experimental</span><span style="color:#98C379"> `</span><span style="color:#61AFEF">app/</span><span style="color:#98C379">`</span><span style="color:#61AFEF"> directory</span><span style="color:#98C379"> with</span><span style="color:#98C379"> this</span><span style="color:#98C379"> project?</span><span style="color:#98C379"> …</span><span style="color:#98C379"> No</span><span style="color:#98C379"> /</span><span style="color:#98C379"> YES</span></span>
<span data-line=""><span style="color:#61AFEF">✔</span><span style="color:#98C379"> What</span><span style="color:#98C379"> import</span><span style="color:#98C379"> alias</span><span style="color:#98C379"> would</span><span style="color:#98C379"> you</span><span style="color:#98C379"> like</span><span style="color:#98C379"> configured?</span><span style="color:#98C379"> …</span><span style="color:#98C379"> @/</span><span style="color:#E5C07B">*</span></span>
<span data-line=""><span style="color:#61AFEF">Creating</span><span style="color:#98C379"> a</span><span style="color:#98C379"> new</span><span style="color:#98C379"> Next.js</span><span style="color:#98C379"> app</span><span style="color:#98C379"> in</span><span style="color:#98C379"> /home/cdiesh/myblog.</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#61AFEF">Using</span><span style="color:#98C379"> npm.</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#61AFEF">Initializing</span><span style="color:#98C379"> project</span><span style="color:#98C379"> with</span><span style="color:#98C379"> template:</span><span style="color:#98C379"> app</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#61AFEF">Installing</span><span style="color:#98C379"> dependencies:</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> react</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> react-dom</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> next</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> typescript</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> @types/react</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> @types/node</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> @types/react-dom</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> eslint</span></span>
<span data-line=""><span style="color:#61AFEF">-</span><span style="color:#98C379"> eslint-config-next</span></span></code></pre></figure>
<h2 id="step-2-edit-nextconfigjs"><a aria-hidden="true" tabindex="-1" href="#step-2-edit-nextconfigjs"><a href="#step-2-edit-nextconfigjs" style="margin-right: 10px">#</a></a>Step 2. Edit next.config.js</h2>
<p>Add 'output': 'export' to the next.config.js file</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#7F848E;font-style:italic">/** </span><span style="color:#C678DD;font-style:italic">@type</span><span style="color:#E5C07B;font-style:italic"> {import('next').NextConfig}</span><span style="color:#7F848E;font-style:italic"> */</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> nextConfig</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> {</span></span>
<span data-line=""><span style="color:#E06C75">  output</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'export'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E5C07B">module</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">exports</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> nextConfig</span></span></code></pre></figure>
<h2 id="step-3-create-the-page-that-will-display-your-posts"><a aria-hidden="true" tabindex="-1" href="#step-3-create-the-page-that-will-display-your-posts"><a href="#step-3-create-the-page-that-will-display-your-posts" style="margin-right: 10px">#</a></a>Step 3. Create the page that will display your posts</h2>
<p>Create a new directory like this on the command line, yes there are square
brackets in the directory name</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="bash" data-theme="one-dark-pro"><code data-language="bash" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">mkdir</span><span style="color:#D19A66"> -p</span><span style="color:#98C379"> app/posts/</span><span style="color:#56B6C2">\[</span><span style="color:#98C379">id</span><span style="color:#56B6C2">\]</span><span style="color:#98C379">/</span></span></code></pre></figure>
<p>Then make a file page.tsx in there so it is 'app/posts/[id]/page.tsx'</p>
<p>Then on this page, fill in with this</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="tsx" data-theme="one-dark-pro"><code data-language="tsx" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">getPostById</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">getAllPosts</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@/lib/api'</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// Generate the post, note that this is a "react server component"! it is</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// allowed to be async</span></span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> default</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> Post</span><span style="color:#ABB2BF">({</span></span>
<span data-line=""><span style="color:#E06C75">  params</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75;font-style:italic">id</span><span style="color:#ABB2BF"> },</span></span>
<span data-line=""><span style="color:#ABB2BF">}: {</span></span>
<span data-line=""><span style="color:#E06C75">  params</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF"> }</span></span>
<span data-line=""><span style="color:#ABB2BF">}) {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">html</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">title</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">date</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> getPostById</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> (</span></span>
<span data-line=""><span style="color:#ABB2BF">    &#x3C;</span><span style="color:#E06C75">article</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">></span><span style="color:#C678DD">{</span><span style="color:#E06C75">title</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF">&#x3C;/</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">h4</span><span style="color:#ABB2BF">></span><span style="color:#C678DD">{</span><span style="color:#E06C75">date</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF">&#x3C;/</span><span style="color:#E06C75">h4</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">div</span><span style="color:#D19A66;font-style:italic"> dangerouslySetInnerHTML</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">{</span><span style="color:#ABB2BF">{ </span><span style="color:#E06C75">__html</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75">html</span><span style="color:#ABB2BF"> }</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF"> /></span></span>
<span data-line=""><span style="color:#ABB2BF">    &#x3C;/</span><span style="color:#E06C75">article</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">  )</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// This function can statically allow nextjs to find all the posts that you</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// have made, and statically generate them</span></span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> generateStaticParams</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> posts</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> getAllPosts</span><span style="color:#ABB2BF">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#E5C07B"> posts</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">post</span><span style="color:#C678DD"> =></span><span style="color:#ABB2BF"> ({</span></span>
<span data-line=""><span style="color:#E06C75">    id</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">post</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">  }))</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// Set the title of the page to be the post title, note that we no longer use</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// e.g. next/head in app dir, and this can be async just like the server</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// component</span></span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> generateMetadata</span><span style="color:#ABB2BF">({</span></span>
<span data-line=""><span style="color:#E06C75">  params</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75;font-style:italic">id</span><span style="color:#ABB2BF"> },</span></span>
<span data-line=""><span style="color:#ABB2BF">}: {</span></span>
<span data-line=""><span style="color:#E06C75">  params</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF"> }</span></span>
<span data-line=""><span style="color:#ABB2BF">}) {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">title</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> getPostById</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> {</span></span>
<span data-line=""><span style="color:#E06C75">    title</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<h2 id="step-4-fix-the-cart-being-ahead-of-the-horse-parse-the-markdown-blogposts"><a aria-hidden="true" tabindex="-1" href="#step-4-fix-the-cart-being-ahead-of-the-horse-parse-the-markdown-blogposts"><a href="#step-4-fix-the-cart-being-ahead-of-the-horse-parse-the-markdown-blogposts" style="margin-right: 10px">#</a></a>Step 4. Fix the cart being ahead of the horse: parse the markdown blogposts</h2>
<p>In the last post, I use functions "getAllPosts" and "getPostById", these are
functions that I define that parse my markdown blog posts.</p>
<p>So let's make those functions. The code below performs markdown parsing manually
using unified/remark/rehype and allows github flavored markdown. See Footnote 1
for more info. So first install these</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="bash" data-theme="one-dark-pro"><code data-language="bash" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">npm</span><span style="color:#98C379"> install</span><span style="color:#98C379"> gray-matter</span><span style="color:#98C379"> unified</span><span style="color:#98C379"> remark-gfm</span><span style="color:#98C379"> remark-parse</span><span style="color:#98C379"> remark-rehype</span><span style="color:#98C379"> rehype-stringify</span><span style="color:#98C379"> rehype-autolink-headings</span><span style="color:#98C379"> rehype-slug</span><span style="color:#98C379"> @leafac/rehype-shiki</span><span style="color:#98C379"> shiki</span></span></code></pre></figure>
<p>And then, add this code</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="typescript" data-theme="one-dark-pro"><code data-language="typescript" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#7F848E;font-style:italic">// lib/api.ts</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> fs</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'fs'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> matter</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'gray-matter'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> path</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'path'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">unified</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> 'unified'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> remarkGfm</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'remark-gfm'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> rehypeSlug</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'rehype-slug'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> rehypeAutolinkHeadings</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'rehype-autolink-headings'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> remarkParse</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'remark-parse'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> remarkRehype</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'remark-rehype'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> rehypeStringify</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'rehype-stringify'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> rehypePrettyCode</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'rehype-pretty-code'</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> postsDirectory</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">process</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">cwd</span><span style="color:#ABB2BF">(), </span><span style="color:#98C379">'_posts'</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> getPostFiles</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#E5C07B"> fs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readdirSync</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">postsDirectory</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">function</span><span style="color:#61AFEF"> getParser</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#61AFEF"> unified</span><span style="color:#ABB2BF">()</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">remarkParse</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">remarkRehype</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">remarkGfm</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">rehypePrettyCode</span><span style="color:#ABB2BF">, {</span></span>
<span data-line=""><span style="color:#E06C75">      theme</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'one-dark-pro'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">    })</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">rehypeStringify</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">rehypeStringify</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">rehypeSlug</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">    .</span><span style="color:#61AFEF">use</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">rehypeAutolinkHeadings</span><span style="color:#ABB2BF">, {</span></span>
<span data-line=""><span style="color:#61AFEF">      content</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75;font-style:italic">arg</span><span style="color:#C678DD"> =></span><span style="color:#ABB2BF"> ({</span></span>
<span data-line=""><span style="color:#E06C75">        type</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'element'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">        tagName</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'a'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">        properties</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">          href</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">`#</span><span style="color:#C678DD">${</span><span style="color:#61AFEF">String</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">arg</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">properties</span><span style="color:#ABB2BF">?.</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">          style</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'margin-right: 10px'</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#ABB2BF">        },</span></span>
<span data-line=""><span style="color:#E06C75">        children</span><span style="color:#ABB2BF">: [{ </span><span style="color:#E06C75">type</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'text'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">value</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'#'</span><span style="color:#ABB2BF"> }],</span></span>
<span data-line=""><span style="color:#ABB2BF">      }),</span></span>
<span data-line=""><span style="color:#ABB2BF">    })</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic">// small speedup from caching this parser</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> parser</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getParser</span><span style="color:#ABB2BF">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> getPostById</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">id</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> realId</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> id</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">replace</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">/</span><span style="color:#56B6C2">\.</span><span style="color:#E06C75">md</span><span style="color:#C678DD">$</span><span style="color:#E06C75">/</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">''</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> fullPath</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">postsDirectory</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">`</span><span style="color:#C678DD">${</span><span style="color:#E06C75">realId</span><span style="color:#C678DD">}</span><span style="color:#98C379">.md`</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">data</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">content</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> matter</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">await</span><span style="color:#E5C07B"> fs</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">promises</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readFile</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">fullPath</span><span style="color:#ABB2BF">, </span><span style="color:#98C379">'utf8'</span><span style="color:#ABB2BF">))</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> html</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">content</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> date</span><span style="color:#56B6C2"> =</span><span style="color:#E5C07B"> data</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">date</span><span style="color:#C678DD"> as</span><span style="color:#E5C07B"> Date</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> {</span></span>
<span data-line=""><span style="color:#ABB2BF">    ...</span><span style="color:#E06C75">data</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    title</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">data</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">title</span><span style="color:#C678DD"> as</span><span style="color:#E5C07B"> string</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    id</span><span style="color:#ABB2BF">: </span><span style="color:#E06C75">realId</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    date</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">`</span><span style="color:#C678DD">${</span><span style="color:#E5C07B">date</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toISOString</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">slice</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">, </span><span style="color:#D19A66">10</span><span style="color:#ABB2BF">)</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    html</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">html</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">(),</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> getPageMarkdown</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">string_</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">data</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">content</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#61AFEF"> matter</span><span style="color:#ABB2BF">(</span></span>
<span data-line=""><span style="color:#E5C07B">    fs</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">readFileSync</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">path</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">join</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'_pages'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">string_</span><span style="color:#ABB2BF">), </span><span style="color:#98C379">'utf8'</span><span style="color:#ABB2BF">),</span></span>
<span data-line=""><span style="color:#ABB2BF">  )</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> html</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#E5C07B"> parser</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">process</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">content</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> {</span></span>
<span data-line=""><span style="color:#ABB2BF">    ...</span><span style="color:#E06C75">data</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    html</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">html</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">toString</span><span style="color:#ABB2BF">(),</span></span>
<span data-line=""><span style="color:#ABB2BF">  }</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> getAllPosts</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> posts</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#E5C07B"> Promise</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">all</span><span style="color:#ABB2BF">(</span><span style="color:#61AFEF">getPostFiles</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">id</span><span style="color:#C678DD"> =></span><span style="color:#61AFEF"> getPostById</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">id</span><span style="color:#ABB2BF">)))</span></span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#E5C07B"> posts</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">post1</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">post2</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=></span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">post1</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">date</span><span style="color:#56B6C2"> ></span><span style="color:#E5C07B"> post2</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">date</span><span style="color:#C678DD"> ?</span><span style="color:#56B6C2"> -</span><span style="color:#D19A66">1</span><span style="color:#C678DD"> :</span><span style="color:#D19A66"> 1</span><span style="color:#ABB2BF">))</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<h2 id="step-5-create-a-blog-index-showing-all-your-blogposts"><a aria-hidden="true" tabindex="-1" href="#step-5-create-a-blog-index-showing-all-your-blogposts"><a href="#step-5-create-a-blog-index-showing-all-your-blogposts" style="margin-right: 10px">#</a></a>Step 5. Create a 'blog index' showing all your blogposts</h2>
<p>Edit the <code>app/page.tsx</code> file, and replace with the below: this is the root of
your site</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="tsx" data-theme="one-dark-pro"><code data-language="tsx" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#7F848E;font-style:italic">// app/page.tsx</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#E06C75"> Link</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> 'next/link'</span></span>
<span data-line=""><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">getAllPosts</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@/lib/api'</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">export</span><span style="color:#C678DD"> default</span><span style="color:#C678DD"> async</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> Page</span><span style="color:#ABB2BF">() {</span></span>
<span data-line=""><span style="color:#C678DD">  const</span><span style="color:#E5C07B"> posts</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> getAllPosts</span><span style="color:#ABB2BF">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#C678DD">  return</span><span style="color:#ABB2BF"> (</span></span>
<span data-line=""><span style="color:#ABB2BF">    &#x3C;</span><span style="color:#E06C75">div</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">>My blog&#x3C;/</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">></span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">h2</span><span style="color:#ABB2BF">>All posts:&#x3C;/</span><span style="color:#E06C75">h2</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;</span><span style="color:#E06C75">ul</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#C678DD">        {</span><span style="color:#E5C07B">posts</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">map</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75;font-style:italic">post</span><span style="color:#C678DD"> =></span><span style="color:#ABB2BF"> {</span></span>
<span data-line=""><span style="color:#C678DD">          const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">id</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">date</span><span style="color:#ABB2BF">, </span><span style="color:#E5C07B">title</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#E06C75"> post</span></span>
<span data-line=""><span style="color:#C678DD">          return</span><span style="color:#ABB2BF"> (</span></span>
<span data-line=""><span style="color:#ABB2BF">            &#x3C;</span><span style="color:#E06C75">li</span><span style="color:#D19A66;font-style:italic"> key</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">{</span><span style="color:#E06C75">id</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">              &#x3C;</span><span style="color:#E5C07B">Link</span><span style="color:#D19A66;font-style:italic"> href</span><span style="color:#56B6C2">=</span><span style="color:#C678DD">{</span><span style="color:#98C379">`/posts/</span><span style="color:#C678DD">${</span><span style="color:#E06C75">id</span><span style="color:#C678DD">}</span><span style="color:#98C379">`</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#C678DD">                {</span><span style="color:#E06C75">date</span><span style="color:#C678DD">}</span><span style="color:#ABB2BF"> - </span><span style="color:#C678DD">{</span><span style="color:#E06C75">title</span><span style="color:#C678DD">}</span></span>
<span data-line=""><span style="color:#ABB2BF">              &#x3C;/</span><span style="color:#E5C07B">Link</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">            &#x3C;/</span><span style="color:#E06C75">li</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">          )</span></span>
<span data-line=""><span style="color:#ABB2BF">        })</span><span style="color:#C678DD">}</span></span>
<span data-line=""><span style="color:#ABB2BF">      &#x3C;/</span><span style="color:#E06C75">ul</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">    &#x3C;/</span><span style="color:#E06C75">div</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">  )</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<h2 id="step-6-put-markdown-files-in-the-_posts-dir"><a aria-hidden="true" tabindex="-1" href="#step-6-put-markdown-files-in-the-_posts-dir"><a href="#step-6-put-markdown-files-in-the-_posts-dir" style="margin-right: 10px">#</a></a>Step 6. Put markdown files in the <code>_posts</code> dir</h2>
<p>Example</p>
<p>_posts/2023-04-08-first-post.md</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="markdown" data-theme="one-dark-pro"><code data-language="markdown" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">---</span></span>
<span data-line=""><span style="color:#ABB2BF">title: First post</span></span>
<span data-line=""><span style="color:#ABB2BF">date: 2023-04-08</span></span>
<span data-line=""><span style="color:#E06C75">---</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#ABB2BF">Hello world!</span></span></code></pre></figure>
<h2 id="step-7-deploy-to-github-pages"><a aria-hidden="true" tabindex="-1" href="#step-7-deploy-to-github-pages"><a href="#step-7-deploy-to-github-pages" style="margin-right: 10px">#</a></a>Step 7. Deploy to Github Pages</h2>
<p>Create your repo named <code>yourname.github.io</code> under yourname account</p>
<p>Then run</p>
<pre><code>npm install gh-pages
</code></pre>
<p>Then add a "predeploy" and "deploy" script to package.json</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="json" data-theme="one-dark-pro"><code data-language="json" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">{</span></span>
<span data-line=""><span style="color:#E06C75">  "private"</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "scripts"</span><span style="color:#ABB2BF">: {</span></span>
<span data-line=""><span style="color:#E06C75">    "dev"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"next"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "build"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"next build"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "start"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"next dev"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "lint"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"next lint"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "predeploy"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"npm run build &#x26;&#x26; touch out/.nojekyll"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "deploy"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"gh-pages -d out -t true"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">    "postdeploy"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"git push --follow-tags"</span></span>
<span data-line=""><span style="color:#ABB2BF">  },</span></span>
<span data-line=""><span style="color:#FFFFFF">...</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>Then when you use <code>npm run deploy</code> it will build, push to github pages, and push
to the the regular content to the main branch too</p>
<h2 id="result"><a aria-hidden="true" tabindex="-1" href="#result"><a href="#result" style="margin-right: 10px">#</a></a>Result</h2>
<p>Source <a href="https://github.com/cmdcolin/nextjs-appdir-blog">https://github.com/cmdcolin/nextjs-appdir-blog</a></p>
<p>Deployed <a href="https://cmdcolin.github.io/nextjs-appdir-blog">https://cmdcolin.github.io/nextjs-appdir-blog</a></p>
<p>I manually added <code>basePath: "/nextjs-appdir-blog",</code> to <code>next.config.js</code> to
deploy it to that sub-URI, if you deploy without a sub-URI, you won't need this</p>
<h2 id="footnote-1-the-unifiedremarkrehype-stack"><a aria-hidden="true" tabindex="-1" href="#footnote-1-the-unifiedremarkrehype-stack"><a href="#footnote-1-the-unifiedremarkrehype-stack" style="margin-right: 10px">#</a></a>Footnote 1. The unified/remark/rehype stack</h2>
<p>I use the 'unified/remark/rehype' stack for parsing my blogpost markdown. My
unified/remark/rehype setup allows github flavored markdown (so e.g. links are
automatically converted to <code>&#x3C;a href></code>s) and code will be highlighted by
<a href="https://github.com/shikijs/shiki">https://github.com/shikijs/shiki</a> which I found did a pretty good job with e.g.
typescript (I look forward to maybe a treesitter powered coloring, if you find
this let me know)</p>
<h2 id="footnote-2-why-not-mdx"><a aria-hidden="true" tabindex="-1" href="#footnote-2-why-not-mdx"><a href="#footnote-2-why-not-mdx" style="margin-right: 10px">#</a></a>Footnote 2. Why not MDX?</h2>
<p>There may be some temptation to use things like MDX for your blog, and indeed, I
used MDX with my original blog setup with the <code>pages</code> directory
(<a href="https://cmdcolin.github.io/posts/2021-12-26-nextjs#using-mdx-for-blogposts-in-nextjs">https://cmdcolin.github.io/posts/2021-12-26-nextjs#using-mdx-for-blogposts-in-nextjs</a>)
but to me it is overkill and harder to understand. If it is desirable or needed
to use it for your setup, see
<a href="https://github.com/hashicorp/next-mdx-remote#react-server-components-rsc--nextjs-app-directory-support">https://github.com/hashicorp/next-mdx-remote#react-server-components-rsc--nextjs-app-directory-support</a></p>2:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"Making a static site blog with the Next.js 'app' directory"}],["$","h4",null,{"children":"2023-04-08"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}],["$","$L9",null,{}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Making a static site blog with the Next.js 'app' directory"}],["$","meta","3",{"name":"description","content":"A blog"}]]
1:null
