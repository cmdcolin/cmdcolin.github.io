1:HL["/_next/static/css/97dc5fe527f5d592.css","style",{"crossOrigin":""}]
0:["bz5aV2LMVteda_JJP_fVO",[[["",{"children":["posts",{"children":[["id","2021-12-31-npm-package","d"],{"children":["__PAGE__?{\"id\":\"2021-12-31-npm-package\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next","crossOrigin":""}]],"$L3"]]]]
4:I{"id":4724,"chunks":["724:static/chunks/724-f777e11942c9f205.js","931:static/chunks/app/page-dc728b3619945451.js"],"name":"","async":false}
5:I{"id":1443,"chunks":["272:static/chunks/webpack-19ac6e418b88dab7.js","971:static/chunks/fd9d1056-e43fdc25c1167267.js","864:static/chunks/864-f0261ea346b46dc5.js"],"name":"","async":false}
6:I{"id":8639,"chunks":["272:static/chunks/webpack-19ac6e418b88dab7.js","971:static/chunks/fd9d1056-e43fdc25c1167267.js","864:static/chunks/864-f0261ea346b46dc5.js"],"name":"","async":false}
2:[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2021-12-31-npm-package","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7","$L8",null],"segment":"__PAGE__?{\"id\":\"2021-12-31-npm-package\"}"},"styles":[]}],"segment":["id","2021-12-31-npm-package","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}],["$","$L4",null,{"href":"/archive","children":"Blog archive"}],["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}],["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}],["$","$L4",null,{"href":"/books","children":"Books"}],["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
a:I{"id":2775,"chunks":["722:static/chunks/app/posts/[id]/page-cca14fd8141e3e22.js"],"name":"","async":false}
9:Tde44,<p>There is a lot of mystery around making your own <code>npm</code> package. Every package
likely does it a bit differently, and it can be tricky to get a setup you like.
Should you use a "starter kit" or a boilerplate example? Or just roll your own?
Should you use a bundler? How do you use typescript? Well, why don't we try
starting from scratch and seeing where we can get?</p>
<p>TLDR: here is a github repo with a template package
<a href="https://github.com/cmdcolin/npm-package-tutorial/">https://github.com/cmdcolin/npm-package-tutorial/</a></p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><a href="#introduction" style="margin-right: 10px">#</a></a>Introduction</h2>
<p>An <code>npm</code> package can be very bare bones. In some sense, npmjs.com is just an
arbitrary file host, and you can upload pretty much anything you want to it.</p>
<p>The magic is in the package.json file, which tells npm:</p>
<ul>
<li>what files are part of your package (by default, the whole folder with your
package.json is published, with the "files" field you can say what particular
folders or files are uploaded or you can use .npmignore to choose which files
NOT to publish)</li>
<li>what to use as the "entry point" (e.g. the file that should be referenced when
you say <code>const lib = require('mypackage')</code>, this is governed by the "main"
field, "module" field which is bundler specific, and "export maps" which are
newer but tricky)</li>
<li>what pre- and post- processing steps should be done when the package is being
published (the various "scripts", where you can have "clean", "build", "test",
"lint", "prebuild", etc)</li>
<li>and more!</li>
</ul>
<p>Let's try an experiment...</p>
<h1 id="part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format"><a aria-hidden="true" tabindex="-1" href="#part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format"><a href="#part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format" style="margin-right: 10px">#</a></a>Part 1: the most basic package with plain JS code in commonjs format</h1>
<p>Open up a terminal, and run</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">mkdir</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">mypackage</span></span>
<span class="line"><span style="color: #91B4D5">cd</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">mypackage</span></span>
<span class="line"><span style="color: #91B4D5">git</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">init</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0; font-style: italic"># make mypackage version controlled</span></span>
<span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">init</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0; font-style: italic"># or yarn init</span></span></code></pre>
<p>This init command outputs something like this, and we accept the defaults</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">This</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">utility</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">will</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">walk</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">you</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">through</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">creating</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">a</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">package.json</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">file.</span></span>
<span class="line"><span style="color: #91B4D5">It</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">only</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">covers</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">the</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">most</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">common</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">items,</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">and</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">tries</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">to</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">guess</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">sensible</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">defaults.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">See</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">`</span><span style="color: #91B4D5">npm</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">help</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">init</span><span style="color: #A6ACCD">`</span><span style="color: #A6ACCD"> for definitive documentation on these fields</span></span>
<span class="line"><span style="color: #91B4D5">and</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">exactly</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">what</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">they</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">do.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">Use</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">`</span><span style="color: #91B4D5">npm</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">install</span><span style="color: #5DE4C7"> </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #ADD7FF">pk</span><span style="color: #5DE4C7">g</span><span style="color: #91B4D5">></span><span style="color: #A6ACCD">`</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">afterwards</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">to</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">a</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">package</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">and</span></span>
<span class="line"><span style="color: #91B4D5">save</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">it</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">as</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">a</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">dependency</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">in</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">the</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">package.json</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">file.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">Press</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">^C</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">at</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">any</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">time</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">to</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">quit.</span></span>
<span class="line"><span style="color: #91B4D5">package</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">name:</span><span style="color: #A6ACCD"> (mypackage)</span></span>
<span class="line"><span style="color: #91B4D5">version:</span><span style="color: #A6ACCD"> (1.0.0)</span></span>
<span class="line"><span style="color: #91B4D5">description:</span></span>
<span class="line"><span style="color: #91B4D5">entry</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">point:</span><span style="color: #A6ACCD"> (index.js)</span></span>
<span class="line"><span style="color: #91B4D5">test</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">command:</span></span>
<span class="line"><span style="color: #91B4D5">git</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">repository:</span></span>
<span class="line"><span style="color: #91B4D5">keywords:</span></span>
<span class="line"><span style="color: #91B4D5">license:</span><span style="color: #A6ACCD"> (ISC)</span></span>
<span class="line"><span style="color: #91B4D5">About</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">to</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">write</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">to</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">/home/cdiesh/mypackage/package.json:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"name"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"version"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"description"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">""</span><span style="color: #ADD7FF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"main"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">index.js</span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"scripts"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">{</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">"test"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo </span><span style="color: #5FB3A1">\"</span><span style="color: #5DE4C7">Error: no test specified</span><span style="color: #5FB3A1">\"</span><span style="color: #5DE4C7"> &#x26;&#x26; exit 1</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"author"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">"license"</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">ISC</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span></code></pre>
<p>Then, you can create a file named <code>index.js</code> (in your package.json it says
<code>"main": "index.js"</code> to refer to this file, the entrypoint)</p>
<p>In your <code>index.js</code> file, generally, you would do things like export a function
or functions. I will use commonjs exports here for maximum compatibility:</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">hello</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">()</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello world</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">  </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="publishing-a-package"><a aria-hidden="true" tabindex="-1" href="#publishing-a-package"><a href="#publishing-a-package" style="margin-right: 10px">#</a></a>Publishing a package</h2>
<p>This npm package, <code>mypackage</code> can now be published to <code>npm</code> with a simple
command.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">publish</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">publish</span></span></code></pre>
<p>This will prompt you for your npmjs.com username, password, email, and if
needed, 2FA token (highly recommended)</p>
<h2 id="using-your-package-after-it-is-published"><a aria-hidden="true" tabindex="-1" href="#using-your-package-after-it-is-published"><a href="#using-your-package-after-it-is-published" style="margin-right: 10px">#</a></a>Using your package after it is published</h2>
<p>Once it is published, you can use it in your create-react-app app or other npm
package.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">mypackage</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">add</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">mypackage</span></span></code></pre>
<p>Then you can use</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">hello</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">'</span></span></code></pre>
<p>in any of your other codebases</p>
<h2 id="summary-of-the-simplest-npm-package"><a aria-hidden="true" tabindex="-1" href="#summary-of-the-simplest-npm-package"><a href="#summary-of-the-simplest-npm-package" style="margin-right: 10px">#</a></a>Summary of the simplest NPM package</h2>
<p>This all seems pretty boring thus far but it tells us a couple things</p>
<ol>
<li>packages can be very very bare bones</li>
<li>no transpiler or bundler is needed for publishing an npm package</li>
<li>our package can consist of a single file and it is uploaded to npm, and the
"main" field in package.json provides an entry point</li>
<li>the filename index.js is not special, probably it is a hangover from the name
index.html. you can use whatever name you want</li>
</ol>
<h1 id="part-2-adding-typescript"><a aria-hidden="true" tabindex="-1" href="#part-2-adding-typescript"><a href="#part-2-adding-typescript" style="margin-right: 10px">#</a></a>Part 2: Adding typescript</h1>
<p>Let's try adding typescript</p>
<p>To do this, we will use the typescript compiler to compile a directory of files
in our "src" directory and output the compiled files to a directory named "dist"</p>
<p>To start, let's add typescript</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--save-dev</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">typescript</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">add</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-D</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">typescript</span></span></code></pre>
<p>Our package.json now will have <code>typescript</code> in it's <code>devDependencies</code> (this
means that when someone installs your package, it they don't get typescript as a
dependency, it is just a dependency for while you are developing the library
locally).</p>
<p>Then we need to create a tsconfig.json for typescript to use</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">tsc</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--init</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">npx</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">tsc</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--init</span></span></code></pre>
<p>This will generate a <code>tsconfig.json</code> file (needed by <code>typescript</code>) with a bunch
of options, but I have stripped it down in my projects to look like this</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">include</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">compilerOptions</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">target</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">es2018</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">moduleResolution</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0; font-style: italic">// don't have to import actual filenames, can import extensionless files</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">declaration</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0; font-style: italic">// generate .d.ts files</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">sourceMap</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0; font-style: italic">// generate source map</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">outDir</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0; font-style: italic">// output compiled js, d.ts, and source map to dist folder</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">strict</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">esModuleInterop</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Now, let's wrote a little typescript. We can now use "ESM" style code, we will
compile it to commonjs format.</p>
<p>util.ts</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>index.ts</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./util</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">sayMessage</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">getMessage</span><span style="color: #A6ACCD">())</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>And then we will add a <code>"build"</code> script to <code>package.json</code> to compile the
library, and refer to the <code>"dist"</code> directory for the <code>"files"</code> and <code>"main"</code>
fields in <code>package.json</code></p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">description</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">""</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src/index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">], </span><span style="color: #767C9DB0; font-style: italic">// we publish both dist and src to get proper sourceMaps</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">author</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">license</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">ISC</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.5.4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>We can now run</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">run</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">build</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">build</span></span></code></pre>
<p>And this will run the <code>"build"</code> script we created, which in turn, just runs
<code>tsc</code> with no arguments.</p>
<p>You can also add a <code>"prebuild"</code> script that clears out the old contents. In
fact, npm scripts generalizes the naming system -- you can make scripts with
whatever name you want, e.g.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">preparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo preparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">party</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo party</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">postparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo postparty</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then running</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">$</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">party</span></span>
<span class="line"><span style="color: #91B4D5">preparty</span></span>
<span class="line"><span style="color: #91B4D5">party</span></span>
<span class="line"><span style="color: #91B4D5">postparty</span></span></code></pre>
<p>To make this useful, we will use <code>rimraf</code> (a node package) to make a
cross-platform removal of the <code>dist</code> directory</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">install</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--save-dev</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">rimraf</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">add</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-D</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">rimraf</span></span></code></pre>
<p>and then update your package.json</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">rimraf dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">prebuild</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">rimraf</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^3.0.2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.5.4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>We could make it say "rm -rf dist" instead of "rimraf dist" (e.g. run arbitrary
shell commands), but rimraf allows it to be cross-platform</p>
<h2 id="making-sure-you-create-a-fresh-build-before-you-publish"><a aria-hidden="true" tabindex="-1" href="#making-sure-you-create-a-fresh-build-before-you-publish"><a href="#making-sure-you-create-a-fresh-build-before-you-publish" style="margin-right: 10px">#</a></a>Making sure you create a fresh build before you publish</h2>
<p>Without extra instructions, your <code>yarn publish</code> command would not create a fresh
build and you could publish an older version that was lingering in the <code>dist</code>
folder.</p>
<p>We can use a <code>preversion</code> script that will automatically get invoked when you
run <code>yarn publish</code> to make sure you get a fresh build in the <code>dist</code> folder
before you publish</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">preversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="making-sure-you-push-your-tag-to-github-after-publish"><a aria-hidden="true" tabindex="-1" href="#making-sure-you-push-your-tag-to-github-after-publish"><a href="#making-sure-you-push-your-tag-to-github-after-publish" style="margin-right: 10px">#</a></a>Making sure you push your tag to github after publish</h2>
<p>When you run <code>yarn publish</code>, npm will automatically create a commit with the
version name and a git tag, it <em>will not</em> automatically push tag to your
repository.</p>
<p>Add a <code>postversion</code> script that pushes the tag to your repo after your publish</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">postversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">git push --follow-tags</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="incremental-builds"><a aria-hidden="true" tabindex="-1" href="#incremental-builds"><a href="#incremental-builds" style="margin-right: 10px">#</a></a>Incremental builds</h2>
<p>We can use this to do incremental/watch builds</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">run</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--watch</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--watch</span></span></code></pre>
<h2 id="adding-testing-with-ts-jest"><a aria-hidden="true" tabindex="-1" href="#adding-testing-with-ts-jest"><a href="#adding-testing-with-ts-jest" style="margin-right: 10px">#</a></a>Adding testing with ts-jest</h2>
<p>You can use ts-jest to test your code. This involves installing jest,
typescript, ts-jest, @types/jest, and then initializing a jest.config.json</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">i</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-D</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">typescript</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">add</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--dev</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">typescript</span></span></code></pre>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">i</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">-D</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ts-jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">@types/jest</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">add</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">--dev</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ts-jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">@types/jest</span></span></code></pre>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npx</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ts-jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">config:init</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ts-jest</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">config:init</span></span></code></pre>
<p>We can then create a test</p>
<p><code>test/util.spec.ts</code></p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">../src/util</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">expected message returned</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">getMessage</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>Then we can then create a script in the package.json that says <code>"test": "jest"</code>,
and then we can say</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">npm</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">run</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">test</span></span>
<span class="line"><span style="color: #767C9DB0; font-style: italic"># or</span></span>
<span class="line"><span style="color: #91B4D5">yarn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">test</span></span></code></pre>
<p>You can also create an alternative system where you use <code>babel-eslint</code> and
various babel strategies to test your code, but if you are using <code>typescript</code>,
<code>ts-jest</code> and <code>typescript</code> works great.</p>
<h2 id="add-a-gitignore"><a aria-hidden="true" tabindex="-1" href="#add-a-gitignore"><a href="#add-a-gitignore" style="margin-right: 10px">#</a></a>Add a .gitignore</h2>
<p>Create a .gitignore with just a line that references this <code>dist</code> folder and
<code>node_modules</code> folder</p>
<pre><code>dist
node_modules
</code></pre>
<h2 id="the-future-of-esm-modules"><a aria-hidden="true" tabindex="-1" href="#the-future-of-esm-modules"><a href="#the-future-of-esm-modules" style="margin-right: 10px">#</a></a>The future of ESM modules</h2>
<p>There is a shift happening where modules are changing to be pure ESM rather than
keeping commonjs equivalents</p>
<p><a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>
<p>There are many challenges here, but one shortcut that I have used is to actually
go "halfway to ESM" and just publish a "dual" package: one "main" field in the
package.json referring to a commonjs file, and one "module" field with an ESM
style build for bundlers. I do it like this:</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">rimraf dist esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">prebuild</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build:cjs</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs --ourDir dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build:esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --target es2018 --outDir esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build:esm &#x26;&#x26; npm run build:cjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist/index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esm/index.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The "module" field is understood by bundlers like webpack and you can do
slightly less polyfilling/babeling on it (hence the different <code>--target</code>
attributes)</p>
<p>This is not "pure ESM" with the "type":"module" in package.json, but it does
help to have less "babelification" (which in our case is done by tsc) of your
source code.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>This tutorial shows you how you can create a basic package that you can publish
to <code>npm</code>. This little boilerplate includes these features:</p>
<ul>
<li>Makes clean build when running <code>yarn build</code> or <code>yarn publish</code></li>
<li>Pushes to github after publish</li>
<li>Uses <code>ts-jest</code> for testing</li>
<li>Uses esm modules</li>
</ul>
<p>You also have full control, and understand the decisions we took to get to this
point. This package does not use any bundling (rollup or webpack or otherwise).
It just uses <code>tsc</code> is used to compile the files to the <code>dist</code> folder, and the
dist folder is published to <code>npm</code>!</p>
<p>If you need your package to be usable by consumers that don't themselves use
bundlers, consider looking into <code>&#x3C;script type="module"></code> for importing ESM
modules in the browser, or you can bundle your library using rollup or webpack
and output e.g. a UMD bundle</p>
<h2 id="final-product"><a aria-hidden="true" tabindex="-1" href="#final-product"><a href="#final-product" style="margin-right: 10px">#</a></a>Final product</h2>
<p>See <a href="https://github.com/cmdcolin/npm-package-tutorial/">https://github.com/cmdcolin/npm-package-tutorial/</a></p>
<p>This is a setup that works for me, but there are many ways to publish a package
so take it with a grain of salt!</p>
<p>Also see my follow up rant: you may not need a bundler
<a href="https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler">https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</a></p>
<h2 id="footnote-1---what-about-monorepos"><a aria-hidden="true" tabindex="-1" href="#footnote-1---what-about-monorepos"><a href="#footnote-1---what-about-monorepos" style="margin-right: 10px">#</a></a>Footnote 1 - what about monorepos?</h2>
<p>There are many high powered "monorepo" setups like lerna, nx, turborepo, etc.</p>
<p>I think for many purposes, these can be a bit overkill. I would start with yarn
workspaces. Basically, the way this works is you can have e.g. in your root
package.json in your repo something likely</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">root</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">private</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">workspaces</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">lib</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">app</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>And then in your <code>lib</code> directory you can have your library as we created above
and <code>app</code> for example can be an instance of a <code>vite</code> app that uses your library.
You can reference your lib by name in the <code>app</code> folders package.json, and it
will automatically get the latest version of it that you have built from the
<code>lib</code> directory e.g. your <code>app</code> will look at the libs "dist" folder: it's
compiled outputs. That means you can run <code>yarn tsc --watch</code> in the lib folder to
continuously build it, and then e.g. when you are running e.g. <code>yarn dev</code> in the
<code>app</code> directory, it will see updates to the <code>lib</code> dist directory and auto-update
via hot module refresh</p>
<p>High powered solutions like nx, turborepo, etc may have solutions for
'automatically building all the stuff' without you explicitly having to run the
build in the <code>lib</code> directory, but for simple monorepo setups, this works ok</p>8:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"How to make your own npm package with typescript"}],["$","h4",null,{"children":"2021-12-31"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}],["$","$La",null,{}]]}]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"How to make your own npm package with typescript"}],["$","meta","2",{"name":"description","content":"A blog"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"128x128"}]]
7:null
