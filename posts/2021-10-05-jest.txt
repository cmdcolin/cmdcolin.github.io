1:HL["/_next/static/css/97dc5fe527f5d592.css",{"as":"style"}]
0:["qFPe4n-4LEM7FzAwOaTL6",[[["",{"children":["posts",{"children":[["id","2021-10-05-jest","d"],{"children":["__PAGE__?{\"id\":\"2021-10-05-jest\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next"}]],"$L3"]]]]
4:I{"id":6685,"chunks":["685:static/chunks/685-ccbb7d7ff1945e5d.js","185:static/chunks/app/layout-3759995e3b279a75.js"],"name":"","async":false}
5:I{"id":7767,"chunks":["272:static/chunks/webpack-40edba06f6f71edb.js","971:static/chunks/fd9d1056-442c50ae6fbbd388.js","596:static/chunks/596-ed3b1820f7e6eb53.js"],"name":"default","async":false}
6:I{"id":7920,"chunks":["272:static/chunks/webpack-40edba06f6f71edb.js","971:static/chunks/fd9d1056-442c50ae6fbbd388.js","596:static/chunks/596-ed3b1820f7e6eb53.js"],"name":"default","async":false}
2:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2021-10-05-jest","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L7",null],"segment":"__PAGE__?{\"id\":\"2021-10-05-jest\"}"},"styles":[]}],"segment":["id","2021-10-05-jest","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}]," ",["$","$L4",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}]," ",["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
9:I{"id":6306,"chunks":["722:static/chunks/app/posts/[id]/page-8cf76b3c924a344e.js"],"name":"","async":false}
8:T5ff6,<p>I found that there is a little bit of confusion and misunderstanding around how
things like parallelization work in jest, which sometimes leads to additional
hacking around problems that may not exist or speculating incorrectly about test
failure. This is also of course a point of concern when you have code that for
some reason or another uses global variables. Here are a short summary of things
that may cause confusion.</p>
<h2 id="tests-in-a-single-file-are-not-run-in-parallel"><a aria-hidden="true" tabindex="-1" href="#tests-in-a-single-file-are-not-run-in-parallel"><a href="#tests-in-a-single-file-are-not-run-in-parallel" style="margin-right: 10px">#</a></a>Tests in a single file are NOT run in parallel</h2>
<p>Simple example, the global variable r is included in the test condition, but it
is accurately run in all cases because the tests are not run in parallel.</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">setTimeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">describe</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">tests</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t3</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>This test will take 3 seconds, and will accurately count the global variable. If
it was in parallel, it may only take 1 second, and would inaccurately count the
global variable due to race conditions</p>
<h2 id="tests-in-different-files-are-run-in-parallel"><a aria-hidden="true" tabindex="-1" href="#tests-in-different-files-are-run-in-parallel"><a href="#tests-in-different-files-are-run-in-parallel" style="margin-right: 10px">#</a></a>Tests in different files ARE run in parallel</h2>
<p>Let's take another example where we use a global variable, and then two
different tests use the global variable.</p>
<p>file_using_some_globals.js</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myGlobal</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">resetMyGlobal</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">setTimeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>test_global_vars1.test.js</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./dostuff</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">file1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toEqual</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>test_global_vars2.test.js</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./dostuff</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">file1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toEqual</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>This test completes in less than 2 seconds, and these tests are run in parallel.
They use different instances of the global state, and therefore have no worries
with colliding their state.</p>
<h2 id="does-a-mock-from-one-test-affect-another-test"><a aria-hidden="true" tabindex="-1" href="#does-a-mock-from-one-test-affect-another-test"><a href="#does-a-mock-from-one-test-affect-another-test" style="margin-right: 10px">#</a></a>Does a mock from one test affect another test?</h2>
<p>While seeking the fabled "squawk-less" test, it is often useful to mock console
so that tests that produce an expected error don't actually print an error
message. However, if not done carefully, you will remove errors across tests</p>
<p>So, could a mock from one test affect another test? If it's in the same file,
yes!</p>
<p>mock_console.test.js</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">fn</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">wow</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toHaveBeenCalled</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0; font-style: italic">// this console.error will not appear because test1 mocked away console.error</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0; font-style: italic">// without restoring it</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Help I can't see!</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>To properly mock these, you should restore the console mock at the end of your
function</p>
<pre class="shiki poimandres" style="background-color: #1b1e28" tabindex="0"><code><span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">orig</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">fn</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should not see this!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toHaveBeenCalled</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">orig</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">consoleMock</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">spyOn</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">error</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">mockImplementation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should not see this!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">consoleMock</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">mockRestore</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test3</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should see this error!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<h2 id="add-on-achieve-squawkless-tests"><a aria-hidden="true" tabindex="-1" href="#add-on-achieve-squawkless-tests"><a href="#add-on-achieve-squawkless-tests" style="margin-right: 10px">#</a></a>Add-on: Achieve squawkless tests!</h2>
<p>Your test output should just be a big list of PASS statements, not interleaved
with console.error outputs from when you are testing error conditions of your
code</p>
<p>"Squawkless tests" is a term I made up, but it means that if you have code under
test that prints some errors to the console, then mock the console.error
function, as in the previous section. Don't stand for having a bunch of verbose
errors in your CI logs! However, I also suggest only mocking out console.error
for tests that are <strong>expected</strong> to have errors, lest you paper over unexpected
errors.</p>
<p><img src="/media/squawkless_tests.png" alt=""></p>
<p>Figure: a nice clean test suite without a bunch of crazy console.error outputs</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>Getting better at testing requires exercise, and understanding the basics of
your tools can help! Hopefully this helps you achieve a better understanding and
write cleaner jest tests.</p>7:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"Jest parallelization, globals, mocks, and squawkless tests"}],["$","h4",null,{"children":"2021-10-05"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}],["$","$L9",null,{}]]}]
3:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Jest parallelization, globals, mocks, and squawkless tests"}],["$","meta","2",{"name":"description","content":"A blog"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]]
