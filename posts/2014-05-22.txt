1:HL["/_next/static/css/97dc5fe527f5d592.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["id","2014-05-22","d"],{"children":["__PAGE__?{\"id\":\"2014-05-22\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"414","chunks":["414:static/chunks/414-6d6e10881f5d1a2e.js","467:static/chunks/app/archive/page-b9afc96c23d1c7f9.js"],"name":"","async":false}
5:I{"id":"9544","chunks":["272:static/chunks/webpack-3224743bbfce757e.js","667:static/chunks/2443530c-b193ff79fd6a1567.js","139:static/chunks/139-a55d005ec0ce8e4f.js"],"name":"","async":false}
6:I{"id":"99","chunks":["272:static/chunks/webpack-3224743bbfce757e.js","667:static/chunks/2443530c-b193ff79fd6a1567.js","139:static/chunks/139-a55d005ec0ce8e4f.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2014-05-22","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L7",null],"segment":"__PAGE__?{\"id\":\"2014-05-22\"}"},"styles":[]}],"segment":["id","2014-05-22","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}]," ",["$","$L4",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}]," ",["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
8:I{"id":"6677","chunks":["722:static/chunks/app/posts/[id]/page-29425205b46f5335.js"],"name":"","async":false}
7:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"High DPI rendering on HTML5 canvas - some problems and solutions"}],["$","h4",null,{"children":"2014-05-22"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>Recently our code has been moving towards the use of HTML5 canvas, as it has\nmany benefits. I felt that if we were going to keep this going towards canvas,\nthe rendering needed to match the quality of regular HTML based tracks.\nUnfortunately, the HTML5 canvas by default looks very \"fuzzy\" on a high\nresolution display (Figure 1).</p>\n<p><img src=\"/media/86542847038_0.jpg\" alt=\"\"></p>\n<p><em>Figure 1.</em> An example of really bad font rendering before and after enabling\nhigh resolution on the HTML5 canvas.</p>\n<h2 id=\"background\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#background\"><a href=\"#background\" style=\"margin-right: 10px\">#</a></a>Background</h2>\n<p>Major credit goes to the tutorial at\n<a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a> for pioneering this! The\nhtml5rocks tutorial, written in 2010 it still remains relevant. The major thing\nit introduces is these browser variables called devicePixelRatio and\nbackingStoreRatio that can be used to adjust your canvas drawing. In my\ninterpretation, these two variables have the following purpose:</p>\n<p><em>devicePixelRatio</em></p>\n<p>On high DPI displays, screen pixels are actually abstracted away from the\nphysical pixels, so, when you create some HTML element with width 100, height\n100, that element actually takes up a larger number of pixels than 100x100. The\nactual ratio of the pixels that it takes up is 100<em>devicePixelRatio x\n100</em>devicePixelRatio. On a high DPI platform like Retina, the devicePixelRatio\nis normally 2 at 100% zoom.</p>\n<p><em>backingStoreRatio</em></p>\n<p>The backing store ratio doesn't seem to change as much from platform to\nplatform, but my interpretation of this value is that it essentially gives the\nsize of the memory buffer for the canvas. On my platform, the backingStoreRatio\nis \"1\". I think this value had more historical use, but it may not really be\nused anymore (update aug 7th, 2015 deprecated?\n<a href=\"http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated\">http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated</a>)</p>\n<p>So, what are the consequences of the backing store ratio and the device pixel\nratio? If the backing store ratio equals the device pixel ratio, then no scaling\ntakes place, but what we often see is that they are not equal, so the image is\nup-scaled from the backing store to the screen, and then it is stretched and\nblurred.</p>\n<h2 id=\"so-how-do-you-enable-the-high-dpi-mode\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#so-how-do-you-enable-the-high-dpi-mode\"><a href=\"#so-how-do-you-enable-the-high-dpi-mode\" style=\"margin-right: 10px\">#</a></a>So, how do you enable the high DPI mode?</h2>\n<p>The solution to properly scale your HTML5 canvas content involves a couple of\nsteps that are described in the tutorial here\n<a href=\"http://www.html5rocks.com/en/tutorials/canvas/hidpi/\">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a>, but here is the essence:</p>\n<ol>\n<li>\n<p>Use the canvas.scale method, which tells the canvas's drawing area to become\nbigger, but keeps drawing operations consistent.</p>\n</li>\n<li>\n<p>The scaling factor for the canvas.scale method is\ndevicePixelRatio/backingStoreRatio. This will be 2 for instance on a Retina\nscreen at a typical 100% zoom level. The zoom level is relevant which will be\ndiscussed later in this post...</p>\n</li>\n<li>\n<p>Multiply the width and height attributes of the canvas by\ndevicePixelRatio/backingStoreRatio, so that the \"canvas object\" is as big as\nthe scaled size.</p>\n</li>\n<li>\n<p>Here's the tricky part: set the CSS width and height attributes to be the\nUNSCALED size that you want.</p>\n</li>\n</ol>\n<p>Note: you can also set CSS width:100% or something and then the canvas will be\nsized appropriately. Normally though, what you will have is something like\n<code>&#x3C;canvas width=640 height=480 style=\"width:320px;height:240px\"></code> so you can see\nthat the canvas size is larger than what the CSS actually resizes it to be.</p>\n<h2 id=\"issues-browser-zoom-and-fractional-devicepixelratios\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#issues-browser-zoom-and-fractional-devicepixelratios\"><a href=\"#issues-browser-zoom-and-fractional-devicepixelratios\" style=\"margin-right: 10px\">#</a></a>Issues: Browser zoom and fractional devicePixelRatios</h2>\n<p>When I first started this project, the benefit of this high resolution rendering\nseemed limited to the fancy people who had Retina or other High DPI screens.\nHowever, what I didn't even realize is that the devicePixelRatio value changes\ndepending on browser zoom settings, so even people with a regular screen can\nhave improved rendering of the HTML5 canvas. (Update: we even saw that if you\nhave customized canvas renderings, then you an generate good screenshots of the\ncanvas with PhantomJS too. See\n<a href=\"http://searchvoidstar.tumblr.com/post/112494997473/creating-high-resolution-screenshots-of-jbrowse\">my other more recent article</a>)</p>\n<p>The issue with these zoom settings though is that when you change the zoom\nlevel, especially on chrome and firefox browsers, the devicePixelRatio can end\nup being a fractional value e.g. 2.223277 which can result in sub-pixel\nrendering problems.</p>\n<p>Remember that when we scaled the canvas, it also scales the drawing functions to\nbe consistent, so that essentially if you draw a 1 pixel width line on a scaled\ncanvas, it might draw a 2.223277 pixel width line. Hence, we can get fuzzy\nrendering issues.</p>\n<p>This issue is very noticeable if you draw many 1px wide lines right next to each\nother. In this case, there will be noticeable gaps between the lines due to the\nimperfect rendering (see green box below).</p>\n<p><img src=\"/media/86542847038_1.png\" alt=\"\"></p>\n<p><em>Figure 2.</em> Examples of 1px wide lines rendered next to each other when there is\nfractional devicePixelRatio.</p>\n<p>Bottom Green box: 1px wide lines drawn 1px apart. (note: bad rendering! tiny\ngaps) Middle Blue box: 1px wide line rendered every 2 px (intentional gaps for\ndemonstration). Top Red box: 1.3px wide lines (a fudge factor is used to make\neliminate the tiny gaps).</p>\n<h2 id=\"my-solution-the-red-box----add-a-fudge-factor\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#my-solution-the-red-box----add-a-fudge-factor\"><a href=\"#my-solution-the-red-box----add-a-fudge-factor\" style=\"margin-right: 10px\">#</a></a>My solution: The Red Box -- add a fudge factor</h2>\n<p>As you can see in the above figure, my solution to the sub-pixel rendering is to\nadd a \"fudge factor\" to the line width to make it render lines that are 1.3px\nwide instead of 1px wide when the devicePixelRatio is not a whole number, which\neffectively eliminates any gaps due to the sub-pixel rendering problem.</p>\n<p>I heuristically determined the value 1.3px to be sufficient, as testing values\nlike 1.1px, 1.2px and even 1.25px were too small. I'd love to see a proof of\ndetermining this value empirically, or even better, something that isn't this\nbig of a hack, but for now that's what I have.</p>\n<p>You can see the effect of the fudge factor (red box) vs the bad rendering (green\nbox) in Figure 2. You can also try this out yourself here\n<a href=\"http://jsfiddle.net/4xe4d/\">http://jsfiddle.net/4xe4d/</a>, just zoom your browser and then refresh (zooming and\nnot refreshing doesn't modify device pixel ratio) to test out different values\nof devicePixelRatio.</p>\n<h2 id=\"conclusion\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#conclusion\"><a href=\"#conclusion\" style=\"margin-right: 10px\">#</a></a>Conclusion</h2>\n<p>In conclusion...we now have high resolution rendering on canvas! The solution\nfor drawing lots of lines right next to each other is sort of suboptimal, so the\nquestion continues...what shall be done in this case?</p>\n<p>Maybe someone could implement some sort of library that replaces the\ncanvas.scale method to do better layout and obtain more pixel perfect rendering.\nAlternatively, you could force the scaling factor to always round to a whole\nnumber. This is actually not a bad solution, because the canvas is already being\nresized, and then you can control your rendering better.</p>\n<p>Thanks for reading</p>"}}],["$","$L8",null,{}]]}]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"High DPI rendering on HTML5 canvas - some problems and solutions"}],["$","meta",null,{"name":"description","content":"A blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
