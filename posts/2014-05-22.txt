1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-6b587cfeb6dde470.js","974","static/chunks/app/page-57a57e19ddd8ea21.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/cc26266985a3f391.css","style"]
0:{"P":null,"b":"NNnUWJlhrw-cqGIH3Wo1M","p":"","c":["","posts","2014-05-22"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2014-05-22","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cc26266985a3f391.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2014-05-22","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","_wk-LakfeMJ2jR42CfY7V",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-efdb81ac98a36819.js"],"default"]
d:T2048,<p>Recently our code has been moving towards the use of HTML5 canvas, as it has
many benefits. I felt that if we were going to keep this going towards canvas,
the rendering needed to match the quality of regular HTML based tracks.
Unfortunately, the HTML5 canvas by default looks very "fuzzy" on a high
resolution display (Figure 1).</p>
<p><img src="/media/86542847038_0.jpg" alt=""></p>
<p><em>Figure 1.</em> An example of really bad font rendering before and after enabling
high resolution on the HTML5 canvas.</p>
<h2 id="background"><a aria-hidden="true" tabindex="-1" href="#background"><a href="#background" style="margin-right: 10px">#</a></a>Background</h2>
<p>Major credit goes to the tutorial at
<a href="http://www.html5rocks.com/en/tutorials/canvas/hidpi/">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a> for pioneering this! The
html5rocks tutorial, written in 2010 it still remains relevant. The major thing
it introduces is these browser variables called devicePixelRatio and
backingStoreRatio that can be used to adjust your canvas drawing. In my
interpretation, these two variables have the following purpose:</p>
<p><em>devicePixelRatio</em></p>
<p>On high DPI displays, screen pixels are actually abstracted away from the
physical pixels, so, when you create some HTML element with width 100, height
100, that element actually takes up a larger number of pixels than 100x100. The
actual ratio of the pixels that it takes up is 100<em>devicePixelRatio x
100</em>devicePixelRatio. On a high DPI platform like Retina, the devicePixelRatio
is normally 2 at 100% zoom.</p>
<p><em>backingStoreRatio</em></p>
<p>The backing store ratio doesn't seem to change as much from platform to
platform, but my interpretation of this value is that it essentially gives the
size of the memory buffer for the canvas. On my platform, the backingStoreRatio
is "1". I think this value had more historical use, but it may not really be
used anymore (update aug 7th, 2015 deprecated?
<a href="http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated">http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated</a>)</p>
<p>So, what are the consequences of the backing store ratio and the device pixel
ratio? If the backing store ratio equals the device pixel ratio, then no scaling
takes place, but what we often see is that they are not equal, so the image is
up-scaled from the backing store to the screen, and then it is stretched and
blurred.</p>
<h2 id="so-how-do-you-enable-the-high-dpi-mode"><a aria-hidden="true" tabindex="-1" href="#so-how-do-you-enable-the-high-dpi-mode"><a href="#so-how-do-you-enable-the-high-dpi-mode" style="margin-right: 10px">#</a></a>So, how do you enable the high DPI mode?</h2>
<p>The solution to properly scale your HTML5 canvas content involves a couple of
steps that are described in the tutorial here
<a href="http://www.html5rocks.com/en/tutorials/canvas/hidpi/">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a>, but here is the essence:</p>
<ol>
<li>
<p>Use the canvas.scale method, which tells the canvas's drawing area to become
bigger, but keeps drawing operations consistent.</p>
</li>
<li>
<p>The scaling factor for the canvas.scale method is
devicePixelRatio/backingStoreRatio. This will be 2 for instance on a Retina
screen at a typical 100% zoom level. The zoom level is relevant which will be
discussed later in this post...</p>
</li>
<li>
<p>Multiply the width and height attributes of the canvas by
devicePixelRatio/backingStoreRatio, so that the "canvas object" is as big as
the scaled size.</p>
</li>
<li>
<p>Here's the tricky part: set the CSS width and height attributes to be the
UNSCALED size that you want.</p>
</li>
</ol>
<p>Note: you can also set CSS width:100% or something and then the canvas will be
sized appropriately. Normally though, what you will have is something like
<code>&#x3C;canvas width=640 height=480 style="width:320px;height:240px"></code> so you can see
that the canvas size is larger than what the CSS actually resizes it to be.</p>
<h2 id="issues-browser-zoom-and-fractional-devicepixelratios"><a aria-hidden="true" tabindex="-1" href="#issues-browser-zoom-and-fractional-devicepixelratios"><a href="#issues-browser-zoom-and-fractional-devicepixelratios" style="margin-right: 10px">#</a></a>Issues: Browser zoom and fractional devicePixelRatios</h2>
<p>When I first started this project, the benefit of this high resolution rendering
seemed limited to the fancy people who had Retina or other High DPI screens.
However, what I didn't even realize is that the devicePixelRatio value changes
depending on browser zoom settings, so even people with a regular screen can
have improved rendering of the HTML5 canvas. (Update: we even saw that if you
have customized canvas renderings, then you an generate good screenshots of the
canvas with PhantomJS too. See
<a href="http://searchvoidstar.tumblr.com/post/112494997473/creating-high-resolution-screenshots-of-jbrowse">my other more recent article</a>)</p>
<p>The issue with these zoom settings though is that when you change the zoom
level, especially on chrome and firefox browsers, the devicePixelRatio can end
up being a fractional value e.g. 2.223277 which can result in sub-pixel
rendering problems.</p>
<p>Remember that when we scaled the canvas, it also scales the drawing functions to
be consistent, so that essentially if you draw a 1 pixel width line on a scaled
canvas, it might draw a 2.223277 pixel width line. Hence, we can get fuzzy
rendering issues.</p>
<p>This issue is very noticeable if you draw many 1px wide lines right next to each
other. In this case, there will be noticeable gaps between the lines due to the
imperfect rendering (see green box below).</p>
<p><img src="/media/86542847038_1.png" alt=""></p>
<p><em>Figure 2.</em> Examples of 1px wide lines rendered next to each other when there is
fractional devicePixelRatio.</p>
<p>Bottom Green box: 1px wide lines drawn 1px apart. (note: bad rendering! tiny
gaps) Middle Blue box: 1px wide line rendered every 2 px (intentional gaps for
demonstration). Top Red box: 1.3px wide lines (a fudge factor is used to make
eliminate the tiny gaps).</p>
<h2 id="my-solution-the-red-box----add-a-fudge-factor"><a aria-hidden="true" tabindex="-1" href="#my-solution-the-red-box----add-a-fudge-factor"><a href="#my-solution-the-red-box----add-a-fudge-factor" style="margin-right: 10px">#</a></a>My solution: The Red Box -- add a fudge factor</h2>
<p>As you can see in the above figure, my solution to the sub-pixel rendering is to
add a "fudge factor" to the line width to make it render lines that are 1.3px
wide instead of 1px wide when the devicePixelRatio is not a whole number, which
effectively eliminates any gaps due to the sub-pixel rendering problem.</p>
<p>I heuristically determined the value 1.3px to be sufficient, as testing values
like 1.1px, 1.2px and even 1.25px were too small. I'd love to see a proof of
determining this value empirically, or even better, something that isn't this
big of a hack, but for now that's what I have.</p>
<p>You can see the effect of the fudge factor (red box) vs the bad rendering (green
box) in Figure 2. You can also try this out yourself here
<a href="http://jsfiddle.net/4xe4d/">http://jsfiddle.net/4xe4d/</a>, just zoom your browser and then refresh (zooming and
not refreshing doesn't modify device pixel ratio) to test out different values
of devicePixelRatio.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>In conclusion...we now have high resolution rendering on canvas! The solution
for drawing lots of lines right next to each other is sort of suboptimal, so the
question continues...what shall be done in this case?</p>
<p>Maybe someone could implement some sort of library that replaces the
canvas.scale method to do better layout and obtain more pixel perfect rendering.
Alternatively, you could force the scaling factor to always round to a whole
number. This is actually not a bad solution, because the canvas is already being
resized, and then you can control your rendering better.</p>
<p>Thanks for reading</p>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"High DPI rendering on HTML5 canvas - some problems and solutions"}],["$","h4",null,{"children":"2014-05-22"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"High DPI rendering on HTML5 canvas - some problems and solutions"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
