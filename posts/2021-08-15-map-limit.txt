0:[[["",{"children":["posts",{"children":[["id","2021-08-15-map-limit","d"],{"children":["__PAGE__?{\"id\":\"2021-08-15-map-limit\"}",{}]}]}]},"$undefined","$undefined",true],"$L1","$L2"]]
3:I{"id":"3619","name":"","chunks":["619:619-d3e80a47715091a2","931:app/page-59752a1737368847"],"async":false}
4:I{"id":"1300","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
5:I{"id":"6022","name":"","chunks":["272:webpack-3224743bbfce757e","667:2443530c-7c83a1ec49cb3fce","961:961-0b7193e5f574b882"],"async":false}
1:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2021-08-15-map-limit","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L6","$@7"],"segment":"__PAGE__?{\"id\":\"2021-08-15-map-limit\"}"}}],"segment":["id","2021-08-15-map-limit","d"]}}],"segment":"posts"}}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L3",null,{"href":"/","children":"Home"}]," ",["$","$L3",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L3",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L3",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L3",null,{"href":"/projects","children":"Projects"}]," ",["$","$L3",null,{"href":"/photos","children":"Photos"}]," ",["$","$L3",null,{"href":"/rss.xml","children":"RSS"}]," ",["$","$L3",null,{"href":"/about","children":"About"}]]}]]}]}],"$@8"]
9:I{"id":"3591","name":"","chunks":["722:app/posts/[id]/page-cb4a6e559310dd46"],"async":false}
6:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"An amazing error message if you put more than 2^24 items in a JS Map object"}],["$","h4",null,{"children":"2021-08-15"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>One of the fun things about working with big data is that you can often hit\nweird limits with a system.</p>\n<p>I was personally trying to load every 'common' single nucleotide polymorphism\nfor the human genome into memory (dbSNP), of which there are over 37 million\nentries (there are many more uncommon ones) for the purposes of making a custom\nsearch index for them [1].</p>\n<p>Turns out, you may run into some hard limits. Note that these are all V8-isms\nand may not apply to all browsers or engines (I was using node.js for this)</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">new</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FBD0\">Map</span><span style=\"color: #A6ACCD\">()</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">for (</span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x3C;=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">50_000_000</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #91B4D5\">++</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">set</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">, </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">%</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">100000</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">==</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This will crash after adding approx 16.7M elements and say</p>\n<pre><code>0\n100000\n200000\n...\n16400000\n16500000\n16600000\n16700000\n\nUncaught RangeError: Value undefined out of range for undefined options\nproperty undefined\n</code></pre>\n<p>That is a very weird error message. It says \"undefined\" three times! Much better\nthan your usual <code>TypeError: Can’t find property ‘lol’ of undefined</code>. See\n<a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=11852\">https://bugs.chromium.org/p/v8/issues/detail?id=11852</a> for a bug filed to help\nimprove the error message perhaps.</p>\n<p>Now, also interestingly enough, if you use an Object instead of a Map</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> {};</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">for (</span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x3C;=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">50_000_000</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #91B4D5\">++</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #A6ACCD\">'</span><span style=\"color: #5DE4C7\">myobj_’+i]=i</span><span style=\"color: #D0679D\">;</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FBD0\">if</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #91B4D5\">%</span><span style=\"color: #5DE4C7\">100000</span><span style=\"color: #91B4D5\">==</span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">) {</span><span style=\"color: #E4F0FB\"> console.log(i) </span><span style=\"color: #A6ACCD\">}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>Then it will print...</p>\n<pre><code>0\n100000\n200000\n...\n8000000\n8100000\n8200000\n8300000\n</code></pre>\n<p>And it will actually just hang there...frozen...no error message though! And it\nis failing at ~8.3M elements. Weird right? This is roughly half the amount of\nelements as the 16.7M case</p>\n<p>Turns out there is a precise hard limit for the Map case</p>\n<p>For the Map: 2^24=16,777,216</p>\n<p>For the Object it is around 2^23=8,388,608 HOWEVER, I can actually add more than\nthis, e.g. I can add 8,388,609 or 8,388,610 or even more, but the operations\nstart taking forever to run, e.g. 8,388,999 was taking many minutes</p>\n<p>Very weird stuff! If you expected me to dig into this and explain it in deep\ntechnical detail, well, you’d be wrong. However, this helpful post on\nstackoverflow by a V8 js engine developer clarifies the Map case!!\n<a href=\"https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map\">https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map</a></p>\n<pre><code>V8 developer here. I can confirm that 2^24 is the maximum number of entries in\na Map. That’s not a bug, it’s just the implementation-defined limit.\n\nThe limit is determined by:\n\nThe FixedArray backing store of the Map has a maximum size of 1GB (independent\nof the overall heap size limit) On a 64-bit system that means 1GB / 8B = 2^30 /\n2^3 = 2^27 ~= 134M maximum elements per FixedArray A Map needs 3 elements per\nentry (key, value, next bucket link), and has a maximum load factor of 50% (to\navoid the slowdown caused by many bucket collisions), and its capacity must be\na power of 2. 2^27 / (3 * 2) rounded down to the next power of 2 is 2^24, which\nis the limit you observe.  FWIW, there are limits to everything: besides the\nmaximum heap size, there’s a maximum String length, a maximum Array length, a\nmaximum ArrayBuffer length, a maximum BigInt size, a maximum stack size, etc.\nAny one of those limits is potentially debatable, and sometimes it makes sense\nto raise them, but the limits as such will remain. Off the top of my head I\ndon’t know what it would take to bump this particular limit by, say, a factor\nof two – and I also don’t know whether a factor of two would be enough to\nsatisfy your expectations.\n\n</code></pre>\n<p>Great details there. It would also be good to know what the behavior is for the\nObject, which has those 100% CPU stalls after ~8.3M, but not the same error\nmessage...</p>\n<p>Another fun note: if I modify the Object code to use only “integer IDs” the code\nactually works fine, does not hit any errors, and is “blazingly fast” as the\nkids call it</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">for (</span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x3C;=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">50_000_000</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #91B4D5\">++</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">%</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">100000</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">==</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>I presume that this code works because it detects that I’m using it like an\narray and it decides to transform how it is working internally and not use a\nhash-map-style data structure, so does not hit a limit. There is a slightly\nhigher limit though, e.g. 1 billion elements gives “Uncaught RangeError: Invalid\narray length”</p>\n<pre class=\"shiki poimandres\" style=\"background-color: #1b1e28\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #91B4D5\">const</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">for (</span><span style=\"color: #91B4D5\">let</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">&#x3C;=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">1_000_000_000</span><span style=\"color: #A6ACCD\">; </span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #91B4D5\">++</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  </span><span style=\"color: #E4F0FB\">myObject</span><span style=\"color: #A6ACCD\">[</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">] </span><span style=\"color: #91B4D5\">=</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #E4F0FB\">i</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  if (</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">%</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">100000</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #91B4D5\">==</span><span style=\"color: #A6ACCD\"> </span><span style=\"color: #5DE4C7\">0</span><span style=\"color: #A6ACCD\">) {</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">    </span><span style=\"color: #E4F0FB\">console</span><span style=\"color: #A6ACCD\">.</span><span style=\"color: #E4F0FBD0\">log</span><span style=\"color: #A6ACCD\">(</span><span style=\"color: #E4F0FB\">i</span><span style=\"color: #A6ACCD\">)</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">  }</span></span>\n<span class=\"line\"><span style=\"color: #A6ACCD\">}</span></span></code></pre>\n<p>This has been another episode of ....the twilight zone (other episodes\ncatalogued here) <a href=\"https://github.com/cmdcolin/technical_oddities/\">https://github.com/cmdcolin/technical_oddities/</a></p>\n<p>[1] The final product of this adventure was this, to create a search index for a\nlarge number of elements <a href=\"https://github.com/GMOD/ixixx-js\">https://github.com/GMOD/ixixx-js</a></p>"}}],["$","$L9",null,{}]]}]
7:[null,null,[]]
8:[null,null,[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next.js"}]]]
2:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"An amazing error message if you put more than 2^24 items in a JS Map object"}],["$","meta",null,{"name":"description","content":"A blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
