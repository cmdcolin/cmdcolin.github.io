3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-142f89de81886a79.js","931","static/chunks/app/page-963abe75e6aad650.js"],""]
4:["id","2024-08-03-shortcircuit","d"]
0:["SG-wVxTeBRseid_h2nemX",[[["",{"children":["posts",{"children":[["id","2024-08-03-shortcircuit","d"],{"children":["__PAGE__?{\"id\":\"2024-08-03-shortcircuit\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["id","2024-08-03-shortcircuit","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L6",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","footer",null,{"className":"mt-16","children":[["$","$L6",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L6",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L6",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L6",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L6",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L6",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L6",null,{"className":"m-2","href":"/about","children":"About"}]]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L7"]]]]]
9:I[1458,["722","static/chunks/app/posts/%5Bid%5D/page-eab76b8f11630cf7.js"],"default"]
8:Tc97,<h2 id="background"><a aria-hidden="true" tabindex="-1" href="#background"><a href="#background" style="margin-right: 10px">#</a></a>Background</h2>
<p>This idea that I had is a little bit similar to the nullish coalescing operator</p>
<p>With the nullish coalescing we have a cool operator like this</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> result</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> value</span><span style="color:#56B6C2"> ??</span><span style="color:#E06C75"> default</span></span></code></pre></figure>
<p>In the above code, if <code>value</code> is <code>undefined</code> (or <code>null</code>!), then we get variable
<code>default</code> in the result, otherwise we get <code>value</code></p>
<h2 id="my-idea-the-short-circuit"><a aria-hidden="true" tabindex="-1" href="#my-idea-the-short-circuit"><a href="#my-idea-the-short-circuit" style="margin-right: 10px">#</a></a>My idea: the short circuit</h2>
<p>Sometimes I want a behavior more like this:</p>
<ul>
<li>if <code>value</code> is undefined, then make the result undefined</li>
<li>else, do the right side of the operator</li>
</ul>
<pre><code>const result = key ??? map[key]
</code></pre>
<p>Then, if <code>key</code> is <code>undefined</code>, then make result <code>undefined</code>, and not try to
access the map. If it is defined, I get to access the map</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> result</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> key</span><span style="color:#56B6C2"> ===</span><span style="color:#D19A66"> undefined</span><span style="color:#C678DD"> ?</span><span style="color:#D19A66"> undefined</span><span style="color:#C678DD"> :</span><span style="color:#E06C75"> map</span><span style="color:#ABB2BF">[</span><span style="color:#E06C75">key</span><span style="color:#ABB2BF">]</span></span></code></pre></figure>
<p>Currently I always write ternary operator to represent this instead. Ternary is
quite flexible, so ultimately, this idea is not that good. Just stick with ther
ternary right?</p>
<h2 id="subtext-of-this-article--conclusion"><a aria-hidden="true" tabindex="-1" href="#subtext-of-this-article--conclusion"><a href="#subtext-of-this-article--conclusion" style="margin-right: 10px">#</a></a>Subtext of this article / conclusion</h2>
<p>I think it is important to make sure to propagate <code>undefined</code> states through
your codebase carefully. Avoid trying to just force something into being defined
just because it is more convenient for representing a value, or to make
typescript happy, etc.</p>
<p>I don't intend to try to push this idea really but let me know if you have any
thoughts</p>2:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Idea for a \"short-circuiting evaluation\" operator in javascript"}],["$","h4",null,{"children":"2024-08-03"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}],["$","$L9",null,{}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Idea for a \"short-circuiting evaluation\" operator in javascript"}],["$","meta","3",{"name":"description","content":"A blog"}]]
1:null
