3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-e83b3341411c9548.js","931","static/chunks/app/page-963abe75e6aad650.js"],""]
4:["id","2021-10-30-spooky","d"]
0:["RotvGgJI_w02Kb1mFcwW8",[[["",{"children":["posts",{"children":[["id","2021-10-30-spooky","d"],{"children":["__PAGE__?{\"id\":\"2021-10-30-spooky\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["id","2021-10-30-spooky","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L6",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"mt-16","children":[["$","$L6",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L6",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L6",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L6",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L6",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L6",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L6",null,{"className":"m-2","href":"/about","children":"About"}]]}]]}]}]],null],null],["$L7",null]]]]
9:I[1458,["722","static/chunks/app/posts/%5Bid%5D/page-eab76b8f11630cf7.js"],"default"]
8:T1bb9,<p>Now gather round for a spooky story</p>
<p>Late one night... in the haunted office/castle the midnight candles were burning
bright and we entered data for a user file....</p>
<p>(hindenbugs cackling in the background, dusty technical books line the dark
shelves)</p>
<p>A simple 52MB gzipped datafile that we want to process in the browser. We unzip
it, decode it, and ... we see an error!!! <strong>LIGHTNING CRACKS</strong></p>
<p><img src="/media/pumpkin-dark.jpg" alt=""></p>
<p>But... our code is so simple (we of course abide by the religion of writing
"simple code" you know)...what could be happening?</p>
<p>The code looks like this</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> buf</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> unzip</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">file</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> str</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TextDecoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">buf</span><span style="color:#ABB2BF">)</span></span></code></pre></figure>
<p>We trace it back and run a <code>console.log(str)</code></p>
<p>It looks empty. We try running <code>console.log(str.length)</code> ... it prints out 0</p>
<p>But if we look at <code>console.log(buffer.length)</code> we get 546,483,710 bytes...</p>
<p>What could be happening?</p>
<p>We see in the <code>TextDecoder</code> documentation that it has a note called "fatal". We
try</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> buf</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> unzip</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">file</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> str</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TextDecoder</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'utf8'</span><span style="color:#ABB2BF">, { </span><span style="color:#E06C75">fatal</span><span style="color:#ABB2BF">: </span><span style="color:#D19A66">true</span><span style="color:#ABB2BF"> }).</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">buf</span><span style="color:#ABB2BF">)</span></span></code></pre></figure>
<p>This doesn't change the results though</p>
<p>Then it dawns on us while the lightning hits and the thunderclap booms and the
wind blows through the rattly windows</p>
<p>We have hit...the maximum string length in Chrome</p>
<p>BWAHAHAHAHA</p>
<p>The maximum string length!!! Nooooooo</p>
<p>It is 512MB on the dot... 536,870,888 bytes. We test this to be sure</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="js" data-theme="one-dark-pro"><code data-language="js" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> len</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 536_870_888</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> buf</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Uint8Array</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">len</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#C678DD">for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">let</span><span style="color:#E06C75"> i</span><span style="color:#56B6C2"> =</span><span style="color:#D19A66"> 0</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">i</span><span style="color:#56B6C2"> &#x3C;</span><span style="color:#E06C75"> len</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">i</span><span style="color:#56B6C2">++</span><span style="color:#ABB2BF">) {</span></span>
<span data-line=""><span style="color:#E06C75">  buf</span><span style="color:#ABB2BF">[</span><span style="color:#E06C75">i</span><span style="color:#ABB2BF">] </span><span style="color:#56B6C2">=</span><span style="color:#98C379"> 'a'</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">charCodeAt</span><span style="color:#ABB2BF">(</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span>
<span data-line=""><span style="color:#C678DD">const</span><span style="color:#E5C07B"> str</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> TextDecoder</span><span style="color:#ABB2BF">().</span><span style="color:#61AFEF">decode</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">buf</span><span style="color:#ABB2BF">)</span></span>
<span data-line=""><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">str</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">length</span><span style="color:#ABB2BF">)</span></span></code></pre></figure>
<p>This is correct, outputs 536,870,888</p>
<p>With anything, even one byte more, it fails and outputs 0</p>
<p>happy halloween!!</p>
<p>pumpkin photo source:
<a href="http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html">http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html</a></p>
<ul>
<li>
<p>chrome 95 tested</p>
</li>
<li>
<p>nodejs 15 - at 512MB+1 bytes it prints an error message
<code>Error: Cannot create a string longer than 0x1fffffe8 characters</code> for
significantly greater than 512MB e.g. 600MB it actually prints a different
error
<code>TypeError [ERR_ENCODING_INVALID_ENCODED_DATA]: The encoded data was not valid for encoding utf-8</code>)</p>
</li>
<li>
<p>firefox 93 - goes up to ~1GB but then gives Exception
<code>{ name: "NS_ERROR_OUT_OF_MEMORY", message: "", result: 2147942414 }</code></p>
</li>
<li>
<p>midori 6 (safari-alike/webkit) - goes up to ~2GB fine! will have to test more</p>
</li>
</ul>2:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"A spooky error when you have a string bigger than 512MB in Chrome"}],["$","h4",null,{"children":"2021-10-30"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}],["$","$L9",null,{}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"A spooky error when you have a string bigger than 512MB in Chrome"}],["$","meta","3",{"name":"description","content":"A blog"}]]
1:null
