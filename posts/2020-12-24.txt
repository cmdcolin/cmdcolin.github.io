2:"$Sreact.fragment"
3:I[231,["231","static/chunks/231-fc74e6e791c0837d.js","931","static/chunks/app/page-95d4a906a5a795f0.js"],""]
4:I[9275,[],""]
5:I[1343,[],""]
7:I[3120,[],"OutletBoundary"]
9:I[3120,[],"MetadataBoundary"]
b:I[3120,[],"ViewportBoundary"]
d:I[6130,[],""]
1:HL["/_next/static/css/d19cfa26cd1ef694.css","style"]
0:{"P":null,"b":"E3kSRc3QoqqvBT2unnLOA","p":"","c":["","posts","2020-12-24"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2020-12-24","d"],{"children":["__PAGE__?{\"id\":\"2020-12-24\"}",{}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"mt-16","children":[["$","$L3",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L3",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L3",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L3",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L3",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L3",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L3",null,{"className":"m-2","href":"/about","children":"About"}]]}]]}]}]]}],{"children":["posts",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["id","2020-12-24","d"],["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","Mo5ZlS6YNwBOZ2ZWhDlJC",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}]]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:I[1458,["722","static/chunks/app/posts/%5Bid%5D/page-e50cd2f34f19f050.js"],"default"]
e:T1ddb,<p>I set out to make a serverless website for photo uploads. Our dearly departed
dixie dog needed a place to have photo uploads.</p>
<p>I didn't want to get charged dollars per month for a running ec2 instance, so I
wanted something that was lightweight e.g. serverless, and easy</p>
<p>I decided to follow this tutorial</p>
<p><a href="https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/">https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/</a></p>
<p>I really liked the command line deployment (aws-sam) because fiddling around
with the AWS web based control panel is ridiculously complicated</p>
<p>For example I also tried following this tutorial which uses the web based UI
(<a href="https://www.youtube.com/watch?v=mw_-0iCVpUc">https://www.youtube.com/watch?v=mw_-0iCVpUc</a>) and it just did not work for
me....I couldn't stay focused (blame ADHD or just my CLI obsession?) and certain
things like "Execution role" that they say to modify are not there in the web UI
anymore, so I just gave up (I did try though!)</p>
<p>To install aws-sam I used homebrew</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="sh" data-theme="one-dark-pro"><code data-language="sh" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">brew</span><span style="color:#98C379"> tap</span><span style="color:#98C379"> aws/tap</span></span>
<span data-line=""><span style="color:#61AFEF">brew</span><span style="color:#98C379"> install</span><span style="color:#98C379"> aws-sam-cli</span></span>
<span data-line=""><span style="color:#61AFEF">brew</span><span style="color:#98C379"> install</span><span style="color:#98C379"> aws-sam-cli</span><span style="color:#7F848E;font-style:italic"> # I had to run the install command twice ref https://github.com/aws/aws-sam-cli/issues/2320#issuecomment-721414971</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#61AFEF">git</span><span style="color:#98C379"> clone</span><span style="color:#98C379"> https://github.com/aws-samples/amazon-s3-presigned-urls-aws-sam</span></span>
<span data-line=""><span style="color:#56B6C2">cd</span><span style="color:#98C379"> amazon-s3-presigned-urls-aws-sam</span></span>
<span data-line=""><span style="color:#61AFEF">sam</span><span style="color:#98C379"> deploy</span><span style="color:#D19A66"> --guided</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic"># proceeds with a guided installation, I used all defaults except I</span></span>
<span data-line=""><span style="color:#7F848E;font-style:italic"># made "UploadRequestFunction may not have authorization definedIs</span></span>
<span data-line=""><span style="color:#61AFEF">Is</span><span style="color:#98C379"> this</span><span style="color:#98C379"> okay?</span><span style="color:#ABB2BF"> [y/N]: y</span><span style="color:#98C379">"</span></span></code></pre></figure>
<p><img src="/media/638408397901987840_0.png" alt=""></p>
<p>They then in the tutorial describe trying to use postman to test</p>
<p>I test with <code>curl</code> instead</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="sh" data-theme="one-dark-pro"><code data-language="sh" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">curl</span><span style="color:#98C379"> 'https://fjgbqj5436.execute-api.us-east-2.amazonaws.com/uploads'</span></span>
<span data-line=""> </span></code></pre></figure>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="json" data-theme="one-dark-pro"><code data-language="json" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">{</span></span>
<span data-line=""><span style="color:#E06C75">  "uploadURL"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host"</span><span style="color:#ABB2BF">,</span></span>
<span data-line=""><span style="color:#E06C75">  "Key"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"112162.jpg"</span></span>
<span data-line=""><span style="color:#ABB2BF">}</span></span></code></pre></figure>
<p>The premise of this is you make a request, and then the response from the API is
a pre-signed URL that then allows you to upload directly to S3. You can use
<code>curl &#x3C;url> --upload-file yourfile.jpg</code>. This automatically does a PUT request
to the s3 bucket (yes, this is talking directly to s3 now, not the lambda! the
lambda is just for generating the "pre-signed URL" to let you upload). Careful
to copy it exactly as is</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="sh" data-theme="one-dark-pro"><code data-language="sh" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">curl</span><span style="color:#98C379"> "https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host"</span><span style="color:#D19A66"> --upload-file</span><span style="color:#98C379"> test.jpg</span></span></code></pre></figure>
<p>There is no response, but I can then check the s3 console and see the file
upload is successful (all files are renamed)</p>
<p><img src="/media/638408397901987840_1.png" alt=""></p>
<p>Figure shows that the file upload is successful :)</p>
<p>Then we can edit the file frontend/index.html from the repo we cloned to contain
the lambda with the /uploads/ suffix</p>
<p>Then we manually upload this file to another s3 bucket or test it locally</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="sh" data-theme="one-dark-pro"><code data-language="sh" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#61AFEF">aws</span><span style="color:#98C379"> s3</span><span style="color:#98C379"> cp</span><span style="color:#98C379"> index.html</span><span style="color:#98C379"> s3://mybucket/</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#7F848E;font-style:italic"># then ...visit that in the browser</span></span></code></pre></figure>
<p>At this point the files are getting uploaded but not publicly accessible. To
make them publicly accessible we uncomment the ACL: 'public-read' in the
getSignedURL/app.js folder in the github repo</p>
<p><img src="/media/638408397901987840_3.png" alt=""></p>
<p>Figure showing the public-read uncommented</p>
<p><img src="/media/638408397901987840_4.png" alt=""></p>
<p>Figure showing the lines that need uncommenting in template.yaml in the root of
the github repo that allows putObject in s3 with the public-read ACL</p>
<p>Re-run <code>sam deploy --guided</code>, same thing as at the start</p>
<p>Now the objects are publicly accessible!</p>6:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Making a serverless website for photo upload pt. 1"}],["$","h4",null,{"children":"2020-12-24"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}],["$","$Lf",null,{}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Making a serverless website for photo upload pt. 1"}],["$","meta","2",{"name":"description","content":"A blog"}]]
8:null
