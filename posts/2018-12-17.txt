1:"$Sreact.fragment"
2:I[8173,["173","static/chunks/173-c4204d8a61969f1d.js","974","static/chunks/app/page-587629221be7b0d2.js"],""]
3:I[5244,[],""]
4:I[3866,[],""]
6:I[6213,[],"OutletBoundary"]
8:I[6213,[],"MetadataBoundary"]
a:I[6213,[],"ViewportBoundary"]
c:I[4835,[],""]
:HL["/_next/static/css/53ac0649e8acd1de.css","style"]
0:{"P":null,"b":"M2yIPI-FI3CTAHFMfu9Ji","p":"","c":["","posts","2018-12-17"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2018-12-17","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/53ac0649e8acd1de.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L2",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"mt-16","children":[["$","$L2",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L2",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L2",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L2",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L2",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L2",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L2",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L2",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","2018-12-17","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":"$L7"}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","RjoWg4I49jXN_KFyQpu3e",{"children":[["$","$L8",null,{"children":"$L9"}],["$","$La",null,{"children":"$Lb"}],null]}]]}],false]],"m":"$undefined","G":["$c","$undefined"],"s":false,"S":true}
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-cc4771b5e3a551f2.js"],"default"]
d:T35d5,<p>Every once in awhile, you might see that your favorite program, JBrowse, has a
new release. There are a ton of little snippets in the release notes, you might
as well just go ahead and upgrade, but what went into all those little fixes?
Going to the blog post has links to the github issues,
<a href="http://jbrowse.org/blog/2018/12/13/jbrowse-1-16-0.html">http://jbrowse.org/blog/2018/12/13/jbrowse-1-16-0.html</a> but I felt like maybe I'd
add a little more context for some of them:</p>
<p>PS This is sort of motivated by @zcbenz blog on Electron
(<a href="https://twitter.com/zcbenz">https://twitter.com/zcbenz</a> <a href="http://cheng.guru/">http://cheng.guru/</a>) which tells the software in
terms of actual commit messages and such.</p>
<ul>
<li>
<p>The <code>webpack</code> build doing a production build by default. This seems pretty
straightforward, but was also difficult because I use WSL and the UglifyJs
plugin had trouble on WSL using the parallel: 4 option to use multiple
processors. This was really annoying and resulted in the webpack build just
hanging for no reason and only careful google-fu really uncovered other people
having this issue. I removed the parallelism as the speed gain wasn't even
really justifiable <a href="https://github.com/gmod/jbrowse/pull/1223">https://github.com/gmod/jbrowse/pull/1223</a></p>
</li>
<li>
<p>The incorporation of the <code>@gmod/bam</code> module. This was an almost 2 months
process after my first module, <code>@gmod/indexedfasta</code>. It required really
getting down to the binary level for BAM and was pretty tough. The module has
already itself had 12 releases
<a href="https://github.com/GMOD/bam-js/blob/master/CHANGELOG.md">here</a></p>
</li>
<li>
<p>Added support for indexing arbitrary fields from GFF3Tabix files. This was
fairly straightforward but required making design decisions about this.
Previously flatfile-to-json.pl files would have a command line flag to index
arbitrary fields. Since gff3tabix files are specified via config, I allowed
specifying arbitrary fields via config.</p>
</li>
<li>
<p>Added ability to render non-coding transcript types to the default Gene glyph.
This one was a nice feature and enables you to see non-coding types, but
required some weird design decisions because I could not override the
<code>box->style->color</code> from a higher level type simply using the <code>_defaultConfig</code>
function, so I needed to override the <code>getStyle</code> callback that was passed down
to the lower levels, so that it was able to use the default lower level style
and also our non-coding transcript style. See this part of the code for
details
<a href="https://github.com/GMOD/jbrowse/commit/ec638ea1cc62c8727#diff-a14e88322d8f4e8e940f995417277878R22">https://github.com/GMOD/jbrowse/commit/ec638ea1cc62c8727#diff-a14e88322d8f4e8e940f995417277878R22</a></p>
</li>
<li>
<p>Added <code>hideImproperPairs</code> filter. This was fairly straightforward but it is
one of these bugs that went unnoticed for years...the <code>hideMissingMatepairs</code>
flag would hide things didn't have the sam 0x02 flag for "read mapped in
proper pair", but reads with this flag could still be paired. Doing the 1.16
release that focused on paired reads helped focus on this issue and now
hideMissingMatepairs filters on "mate unmapped" and <code>hideImproperPairs</code> is the
"read mapped in proper pair"</p>
</li>
<li>
<p>Added <code>useTS</code> flag. This one is fairly straightforward, it is similar to
<code>useXS</code> which colors reads based on their alignment in canonical splice site
orientations. I figured I could just copy the <code>useXS</code> to the <code>useTS</code> since I
figured they are the same, but I went ahead and manually generated RNA-seq
alignments with minimap2 and found that the useTS is actually flipped the
opposite of <code>useXS</code>, so it was valuable to get actual test data here.</p>
</li>
<li>
<p>Fixed issue where some <code>generate-names</code> setups would fail to index features.
This was a bad bug that was brought to light by a user. I was kind of mind
boggled when I saw it. In JBrowse 1.13-JBrowse 1.15 a change was introduced to
name indexing with a memory leak. In JBrowse 1.15 that was removed. But, there
was another change where refseqs could return empty name records, because they
were handled separately. But if the initial fill up of the name buffer of
50000 was exceeded by the reference sequence, then there would be empty name
records after this point and cause the name indexing to stop. Therefore this
bug would only happen when the reference sequence indexing buffer exceeded
50000 items which could happen even when there are less than 50000 refseqs due
to autocompletions</p>
</li>
<li>
<p>Fixed issue with getting feature density from BAM files via the index stats
estimation. This involved parsing the "dummy bin" from index files, and I
found it was failing on certain 1000 genomes files. I actually don't really
know what the story behind this was, but our tabix code was better at parsing
the dummy bins than my bam code, and it was the same concept, so I took a note
from their codebase to use it in bam-js code. Commit here
<a href="https://github.com/GMOD/bam-js/commit/d5796dfc8750378ac8b875615ae0a7e81371af76">https://github.com/GMOD/bam-js/commit/d5796dfc8750378ac8b875615ae0a7e81371af76</a></p>
</li>
<li>
<p>Fixed issue with some GFF3Tabix tracks having some inconsistent layout of
features. This is a persistently annoying fact in tabix files where we cannot
really get a unique ID of a feature based on it's file offset. Therefore this
takes the full crc32 of a line as it's unique ID.</p>
</li>
<li>
<p>Fixed CRAM store not renaming reference sequences in the same way as other
stores. This one was interesting because rbuels made a fix but it caused
features from one chromosome to show up on the wrong ones, so chr1 reads where
showing up on chrMT. This happened because it was falling back to the refseq
index if it chrMT wasn't in the embedded "sam header" in the CRAM file, but it
should only fallback to refseq index if there is not any embedded "sam header"
in the CRAM file.</p>
</li>
<li>
<p>Fixed bug where older browsers e.g. IE11 were not being properly supported via
babel. This was a absolutely terrible bug that I found over thanksgiving
break. It was a regression from 1.15 branch of JBrowse. Previous versions from
1.13 when webpack was up until 1.15 used <code>@babel/env</code>. It was changed to
babel-preset-2015 but it was not being run correctly. Then I found that even
if I did get it running correctly, it was unable to properly babel-ify the
lru-cache module because it used something called
<code>Object.defineProperty('length', ...)</code> to change how the length property was
interpreted which was illegal in IE11. The 'util.promisify' NPM module also
did this in some contexts. I found that I could use the quick-lru module and
the es6-promisify module instead of lru-cache and util.promisify as a
workaround. Then I had to update all <code>@gmod/tabix</code>, <code>@gmod/vcf</code>,
<code>@gmod/bgzf-filehandle</code>, <code>@gmod/indexedfasta</code>, <code>@gmod/tribble-index</code>,
<code>@gmod/bam</code>, and JBrowse proper to use these modules instead, and make the
babel chain, which typically does not parse node_modules, to build these
modules specifically (I didn't want to setup babel toolchains for every single
one of these modules, just one in the jbrowse main codebase...). This was
really a lot of work to support IE11 but now that works so ...ya</p>
</li>
<li>
<p>Fixed bug where some files were not being fetched properly when changing
refseqs. This was actually fixed when I changed out lru-cache for quick-lru
and fixed a bug where the cache size was set to 0 due to a erroneous comment
that said <code>50*1024 // 50MB</code>...of course it should have said
<code>50*1024*1024 // 50MB</code> <a href="https://github.com/GMOD/jbrowse/commit/2025dc0aa0091b70">https://github.com/GMOD/jbrowse/commit/2025dc0aa0091b70</a></p>
</li>
<li>
<p>Fixed issue where JBrowse would load the wrong area of the refseq on startup
resulting in bad layouts and excessive data fetches. This was actually a
heinous bug where jbrowse upon loading would just navigateTo the start of the
reference sequence automatically and then to wherever was specified by the
user. This resulted in track data to start downloading immediately from the
start of the chromosome and resulted in for example 350 kilobases of reference
sequence from all tracks to start downloading, which when I was implementing
view as pairs, was causing me to download over 100MB routinely. This was
terrible, and after fixing I only download about 10MB over even large regions
for most BAM files. Additionally, this bug was causing the track heights to be
calculated incorrectly because the track heights would actually be calculated
based on distorted canvas bitmaps. <a href="https://github.com/gmod/jbrowse/issues/1187">https://github.com/gmod/jbrowse/issues/1187</a></p>
</li>
<li>
<p>JBrowse Desktop was not fetching remote files. This was a weird issue where
remote file requests were considered a CORS requests to any external remote.
This was solved by changing the usage of the fetch API in JBrowse for
node-fetch which does not obey CORS. Note that electron-fetch was also
considered, which uses Chromiums network stack instead of node's, but that had
specific assumptions about the context in which it was called.</p>
</li>
<li>
<p>Fixed issue where some parts of a CRAM file would not be displayed in JBrowse
due to a CRAM index parsing issue. This was based on a sort of binary search
that was implemented in JBrowse where the elements of the lists were
non-overlapping regions, and the query was a region, and the output should be
a list of the non-overlapping regions that overlap the query. Most algorithms
for binary search don't really tell you how to do searches on ranges so needed
to roll up my sleeves and write a little custom code. An interval tree could
have been used but this is too heavy-weight for non-overlapping regions from
the index <a href="https://github.com/GMOD/cram-js/pull/10">https://github.com/GMOD/cram-js/pull/10</a></p>
</li>
<li>
<p>Fixed an issue where BAM features were not lazily evaluating their tags. When
a function <code>feature.get('blahblah')</code> is called on a BAM feature, it checks to
see if it's part of a default list of things that are parsed like feature
start, end, id, but if not, it has to parse all the BAM tags to see if it is a
tag. Since they are called "lazy features" the tag processing is deferred
until it is absolutely needed. As it turned out, the incorporation of CRAM in
1.15 was calling a function to try to get the CRAM's version of CIGAR/MD on
the BAM features unnecessarily invoking the tag parsing on every feature up
front and therefore making the feature not really lazy anymore. This restored
the "laziness" aspect of BAM.</p>
</li>
<li>
<p>Fixed issue where CRAM layout and mouseover would be glitchy due to ID
collisions on features. In the 1.15 releases, CRAM was introduced, and we
thought that the concept of taking CRC32 of the entire feature data days were
over because there is the concept of a "unique ID" on the features. However,
this ID was only unique within the slices, so around the slice boundaries
there were a lot of bad feature layouts and mouseovers would fail because they
would map to multiple features, etc. I found a way to unique-ify this by
giving it the sliceHeader file offset. <a href="https://github.com/GMOD/cram-js/pull/10">https://github.com/GMOD/cram-js/pull/10</a></p>
</li>
<li>
<p>We also had behind the scenes work by igv.js team member jrobinso who helped
on the CRAM codebase to incorporate a feature where for lossy read names, so
that a read and it's mate pair would consistently be assigned the same read
name based on the unique ID mentioned above. There was also a rare issue where
sometimes the mate pair's orientation was incorrectly reported based on the
CRAM flags, but the embedded BAM flags correctly reported it.</p>
</li>
<li>
<p>Finally the paired reads feature. This was a feature that I really wanted to
get right. It started when garrett and rbuels were going to san diego for the
CIVIC hackathon, and we talked about doing something that matched a "variant
review system" that they had done for the IGV codebase, which involved
detailed inspection of reads. I thought it would probably be feasible for
jbrowse to do this, but I thought essentially at some point that enhancing
jbrowse's read visualizations with paired reads would be a big win. I had
thought about this at the JBrowse hackathon also and my discussions then were
that this was very hard. Overall, I invented a compromise that I thought was
reasonable which was that there can be a "maxInsertSize" for the pileup view
beyond which the pairing wouldn't be resolved. This allowed (a) a significant
reduction in data fetches because I implemented a "read redispatcher" that
would actually literally resolve the read pairs in the separate chunks and (b)
a cleaner view because the layout wouldn't be polluted by very long read
inserts all the time and also, for example, if you scrolled to the right, and
suddenly a read was paired to the left side of your view, it would result in a
bad layout (but with max insert size, the window of all reads within
maxinsertsize are always resolved so this does not happen) and finally ( c)
the paired arc view was incorporated which does not use read redispatching and
which can do very long reads. All of these things took time to think through
and resolve, but it is now I think a pretty solid system and I look forward to
user feedback!</p>
</li>
</ul>5:["$","div",null,{"className":"lg:w-1/2 m-auto","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Behind the release - the story of the bugs and features in JBrowse 1.16.0"}],["$","h4",null,{"children":"2018-12-17"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$d"}}],["$","$Le",null,{}]]}]
9:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Behind the release - the story of the bugs and features in JBrowse 1.16.0"}],["$","meta","2",{"name":"description","content":"A blog"}]]
7:null
