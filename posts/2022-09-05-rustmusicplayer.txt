2:"$Sreact.fragment"
3:I[4839,["839","static/chunks/839-781fb1f9fbb32020.js","974","static/chunks/app/page-b8224092ad435855.js"],""]
4:I[5244,[],""]
5:I[3866,[],""]
7:I[6213,[],"OutletBoundary"]
9:I[6213,[],"MetadataBoundary"]
b:I[6213,[],"ViewportBoundary"]
d:I[4835,[],""]
1:HL["/_next/static/css/d19cfa26cd1ef694.css","style"]
0:{"P":null,"b":"A4cqhq3Xe4qrWWOSMPrC5","p":"","c":["","posts","2022-09-05-rustmusicplayer"],"i":false,"f":[[["",{"children":["posts",{"children":[["id","2022-09-05-rustmusicplayer","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$2","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d19cfa26cd1ef694.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"className":"mb-8","children":["$","$L3",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"mt-16","children":[["$","$L3",null,{"className":"m-2","href":"/","children":"Home"}],["$","$L3",null,{"className":"m-2","href":"/archive","children":"Blog archive"}],["$","$L3",null,{"className":"m-2","href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L3",null,{"className":"m-2","href":"/projects","children":"Projects"}],["$","$L3",null,{"className":"m-2","href":"/photos","children":"Photos"}],["$","$L3",null,{"className":"m-2","href":"/books","children":"Books"}],["$","$L3",null,{"className":"m-2","href":"/about","children":"About"}],["$","$L3",null,{"className":"m-2","href":"/rss.xml","children":"RSS"}]]}]]}]}]]}],{"children":["posts",["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":[["id","2022-09-05-rustmusicplayer","d"],["$","$2","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$0:f:0:1:2:children:2:children:0","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]]}],{"children":["__PAGE__",["$","$2","c",{"children":["$L6",null,["$","$L7",null,{"children":"$L8"}]]}],{},null]},null]},null]},null],["$","$2","h",{"children":[null,["$","$2","UjzyjK8Uh_lBIURxV65wD",{"children":[["$","$L9",null,{"children":"$La"}],["$","$Lb",null,{"children":"$Lc"}],null]}]]}]]],"m":"$undefined","G":["$d","$undefined"],"s":false,"S":true}
c:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
f:I[7928,["880","static/chunks/app/posts/%5Bid%5D/page-6ba20b6c7bd62b9f.js"],"default"]
e:T26bd,<p>I have started endeavoring to learn Rust. I did the rustlings exercises but I
knew the concepts would fade rapidly from my brain without some practice. I have
now started making a music player using Rust+GTK4.</p>
<p>I chose GTK4 to have a linux native GUI music player. Particularly, I have a
particular <code>foobar2000</code> setup that I wanted to emulate. I have used <code>foobar2000</code>
under wine (windows emulator on linux) and it's not terrible, but it has
background CPU consumption of about 15% idle and doesn't feel quite right
sometimes. I have used a variety of other linux music players such as
<code>quodlibet</code> (GUI/GTK based) and <code>cmus</code> (command line) but they didn't really
feel quite right.</p>
<h3 id="choosing-a-tech-stack"><a aria-hidden="true" tabindex="-1" href="#choosing-a-tech-stack"><a href="#choosing-a-tech-stack" style="margin-right: 10px">#</a></a>Choosing a tech stack</h3>
<p>I started by attempting with <code>Relm4</code>, which I may return to at some point, but
trying to juggle learning Relm4-style widgets, GTK, and rust all at once was a
bit much. I stepped to using <code>gtk4-rs</code> directly.</p>
<h3 id="create-a-spreadsheet-style-data-grid-of-tracks-with-columnview"><a aria-hidden="true" tabindex="-1" href="#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview"><a href="#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview" style="margin-right: 10px">#</a></a>Create a "spreadsheet style" data grid of tracks with <code>ColumnView</code></h3>
<p>Then, I wanted to create a data grid showing to display e.g. a table with
artist, track, album, etc. I chose to use the GTK
<a href="https://docs.gtk.org/gtk4/class.ColumnView.html"><code>ColumnView</code></a> to drive this. I
stumbled around looking for example code, but there was none specifically for
the <code>ColumnView</code>. I also realized the <code>ListView</code> example from the <code>gtk4-rs</code>
examples with it's factory function had similar needs that the <code>ColumnView</code>.</p>
<p>I found out that I basically needed to create a <code>ListStore</code>. I thought if I
could make my own <code>GObject</code> subclass, it would solve everything, but I had
trouble getting making this work (rust doesn't have the concept of extending a
class for one thing, you implement various traits instead). Finally, I randomly
stumbled on this link using a <code>BoxedAnyObject</code> with a good example of storing
data in a ListStore
<a href="https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html">https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html</a></p>
<p>The <code>BoxedAnyObject</code> is a <code>GObject</code>, so this was an good route to storing the
<code>ListView</code> items. There was no example code for connecting the <code>ListStore</code> with
the <code>ColumnView</code>, so I stuggled for awhile before realizing that the <code>ListView</code>
example in the <code>gtk4-rs</code> codebase has similar concepts.</p>
<p>See [1] for minimal usage of <code>ColumnView</code> that I contributed to the <code>gtk4-rs</code>
repo!</p>
<h3 id="choosing-an-audio-library"><a aria-hidden="true" tabindex="-1" href="#choosing-an-audio-library"><a href="#choosing-an-audio-library" style="margin-right: 10px">#</a></a>Choosing an audio library</h3>
<p>To actually play audio, I looked at a couple options. There was even one option
called GTK
<a href="https://gtk-rs.org/gtk4-rs/git/docs/gtk4/struct.MediaFile.html"><code>MediaFile</code></a>
which should to be able to play e.g. mp3s, making my job of making a media
player much simpler, but it produced an error
<a href="https://www.google.com/search?q=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;oq=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;aqs=chrome..69i57.267j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8">"GTK could not find a media module. Check your installation."</a>
which had very few references on the internet. I figured this could be difficult
to solve or point to issues I could face later on making minimal executables for
users.</p>
<p>So, next I tried out <code>symphonia</code> (<a href="https://github.com/pdeljanov/Symphonia/">https://github.com/pdeljanov/Symphonia/</a>).
Symphonia requires a lot more code to work (~1000 lines so far, copying from the
<code>symphonia-play</code> example) but it has broad file format support, pure-rust audio
stack, etc. I got confused about how to package it into an easy-to-use system
though, having to create a symphonia player on a separate thread, so I looked
elsewhere...</p>
<p>Next I turned to <code>rodio</code>. This works well, and automatically plays on a separate
thread, but I found two issues 1) I have to initialize the rodio player in "fn
main" and not anywhere else, or it would just play a short blip of audio
(<a href="https://github.com/RustAudio/rodio/issues/381">https://github.com/RustAudio/rodio/issues/381</a>). Then, it turned out that the
<code>rodio</code>
<a href="https://docs.rs/rodio/0.14.0/rodio/struct.Sink.html#method.stop"><code>Sink</code></a>
instance (which you pass audio to) cannot stop and then play new song xref
(<a href="https://github.com/RustAudio/rodio/issues/315">https://github.com/RustAudio/rodio/issues/315</a>). To workaround, I replace it
with a new <code>Sink</code>.</p>
<p>This required me to learn about <code>RefCell</code>. I googled probably about 50 things
just grasping at straws for awhile, but then landed on the solution of putting
the <code>Sink</code> in a <code>Rc&#x3C;RefCell&#x3C;Sink>></code>, then that allows me to pass it into my
callback that handles double clicking the songs in the <code>ColumnView</code>, and then I
borrow the <code>RefCell</code> mutably to replace it with a new <code>Sink</code>.</p>
<h3 id="reading-audio-metadata-into-an-sqlite-db"><a aria-hidden="true" tabindex="-1" href="#reading-audio-metadata-into-an-sqlite-db"><a href="#reading-audio-metadata-into-an-sqlite-db" style="margin-right: 10px">#</a></a>Reading audio metadata into an <code>sqlite</code> DB</h3>
<p>I also wanted to have the option of reading and writing audio metadata.
Symphonia only reads metadata, so I found the <code>lofty</code> crate.</p>
<p>I also realized that reading tens of thousands of file's metadata at each app
startup would be slow, so I endeavored to store that data in an <code>sqlite</code>
database. I found that music players like <code>foobar2000</code> and <code>0xdeadbeef</code> have
databases of track metadata also (Example folder on <code>foobar2000</code> (1.x) for this
snap/foobar2000/433/foobar2000/profile/library/74E45640B1C695CC/meta-0001,
meta-0002, etc.)</p>
<p>I used the <code>walkdir</code> crate to walk a directory for files, <code>lofty</code> to read the
metadata, and then finally inserted the data into the <code>sqlite</code> db. I am still
working out the schema for the database but it provisionally associates data
with a primary key of filename.</p>
<h3 id="learning-about-reference-counting-and-move-semantics"><a aria-hidden="true" tabindex="-1" href="#learning-about-reference-counting-and-move-semantics"><a href="#learning-about-reference-counting-and-move-semantics" style="margin-right: 10px">#</a></a>Learning about reference counting and move semantics</h3>
<p>Originally I queried the sqlite database and stored a <code>Vec&#x3C;Track></code>, where
<code>Track</code> is a struct with artist, album, song title, etc. I realized that this
causes issues passing this around to different functions, and storing them in
the <code>BoxedAnyObject</code>, (example thread discussing issue
<a href="https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust">https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust</a>)
so I changed functions to accept slices of the Vec, and to make it a
<code>Vec&#x3C;Rc&#x3C;Track>></code> instead of just <code>Vec&#x3C;Track></code> (another related thread
<a href="https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3">https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3</a>).</p>
<h3 id="result"><a aria-hidden="true" tabindex="-1" href="#result"><a href="#result" style="margin-right: 10px">#</a></a>Result</h3>
<p>The current work is at <a href="https://github.com/cmdcolin/fml9000">https://github.com/cmdcolin/fml9000</a></p>
<p><img src="/media/fml9000_1.png" alt=""></p>
<p>Screenshot shows the current look and feel. Some stuff in the screenshot is
mocked and not fully functional, but it has been a great learning experience
thus far</p>
<h3 id="footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage"><a aria-hidden="true" tabindex="-1" href="#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage"><a href="#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage" style="margin-right: 10px">#</a></a>Footnote 1: Creating a PR to the <code>gtk4-rs</code> repo to demonstrate example ColumnView usage</h3>
<p>I created a PR (<a href="https://github.com/gtk-rs/gtk4-rs/pull/1111">https://github.com/gtk-rs/gtk4-rs/pull/1111</a>) to demonstrate
simple <code>ColumnView</code> usage. The code review that was given on the PR was
excellent. They explained how to simplify the code I submitted so that each grid
cell was very minimal (starting from a <code>gtk::Box</code> with a <code>gtk::Label</code> inside of
it, to just being a <code>gtk::Inscription</code> which is very fast). Big thanks to the
team for helping out with this!</p>
<p>After this hurdle was crossed, I felt much more comfortable in the GTK mindset,
and I quickly fleshed out some more UI for the app</p>6:["$","div",null,{"className":"lg:w-1/2","children":[["$","div",null,{"children":[["$","h1",null,{"children":"Creating a music player using Rust/GTK4 - fml9000"}],["$","h4",null,{"children":"2022-09-05"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$e"}}],["$","$Lf",null,{}]]}]
a:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Creating a music player using Rust/GTK4 - fml9000"}],["$","meta","2",{"name":"description","content":"A blog"}]]
8:null
