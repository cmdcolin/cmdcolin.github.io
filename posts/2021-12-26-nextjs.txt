3:I[9275,[],""]
5:I[1343,[],""]
6:I[231,["231","static/chunks/231-26142438061866f4.js","931","static/chunks/app/page-963abe75e6aad650.js"],""]
4:["id","2021-12-26-nextjs","d"]
0:["qGd5kBl6-yqUd7-dPC1yf",[[["",{"children":["posts",{"children":[["id","2021-12-26-nextjs","d"],{"children":["__PAGE__?{\"id\":\"2021-12-26-nextjs\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["id","2021-12-26-nextjs","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L6",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L6",null,{"href":"/","children":"Home"}],["$","$L6",null,{"href":"/archive","children":"Blog archive"}],["$","$L6",null,{"href":"https://github.com/cmdcolin/","children":"Github"}],["$","$L6",null,{"href":"/projects","children":"Projects"}]," ",["$","$L6",null,{"href":"/photos","children":"Photos"}],["$","$L6",null,{"href":"/books","children":"Books"}],["$","$L6",null,{"href":"/about","children":"About"}],["$","$L6",null,{"href":"/uses","children":"Uses"}]]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/39906f0ead253838.css","precedence":"next","crossOrigin":"$undefined"}]],"$L7"]]]]
9:I[4910,["722","static/chunks/app/posts/%5Bid%5D/page-ce940a9c9090656b.js"],"default"]
8:T2e4c,<p>TL;DR src here <a href="https://github.com/cmdcolin/cmdcolin.github.io">https://github.com/cmdcolin/cmdcolin.github.io</a></p>
<p>Update 2023: converted to app directory mode, see
<a href="https://cmdcolin.github.io/posts/2023-04-08-nextjs-appdir-blog">https://cmdcolin.github.io/posts/2023-04-08-nextjs-appdir-blog</a></p>
<p>My personal homepage originally used statocles, a perl-based static site
generator (<a href="http://preaction.me/statocles/">http://preaction.me/statocles/</a>). I didn't really blog using it, just
a homepage for myself plus some links to my tumblr blog. But, if I linked people
to the tumblr blog directly, it would give people terrible popup ads and
trackers. So, I switched to github pages+next.js this year. I considered a
number of alternative static site systems, but next.js seemed to hit some nice
goals</p>
<ul>
<li>Flexible</li>
<li>React-based (as opposed to template-based like jekyll, eleventy, etc.)</li>
<li>Markdown driven, and can use MDX (edit 2022: I removed MDX, I disliked the
complicated that it brought. Now all posts are plain markdown, parsed with
<code>remark-gfm</code> for github flavored markdown, and all pages are <code>tsx</code>)</li>
<li>RSS feed (bonus)</li>
<li>Active community</li>
</ul>
<p>Other systems almost worked and were attempted but aborted</p>
<h3 id="first-and-second-iterations"><a aria-hidden="true" tabindex="-1" href="#first-and-second-iterations"><a href="#first-and-second-iterations" style="margin-right: 10px">#</a></a>First and second iterations</h3>
<p>The first iteration of my next.js blog</p>
<ul>
<li>I put every blog post in the "pages" folder. This worked ok but I had to
manually edit the index.mdx file to have long lists of stuff like this
<code>![link to new blogpost](manually_inserted_link_here)</code></li>
</ul>
<p>The second iteration, I wanted to automatically generate a list of recent
blogposts from files on disk</p>
<ul>
<li>
<p>I used the next.js "blog-template-typescript" example folder from their
<a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript">monorepo</a>.</p>
</li>
<li>
<p>The new blog posts are generated from markdown files in the <code>_posts</code> folder,
and get rendered by the file <code>pages/posts/[slug].tsx</code> (yes, the filename
includes square brackets).</p>
</li>
<li>
<p>getAllPosts in
<a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/master/lib/api.ts"><code>lib/api.ts</code></a>
gets a listing of the files in _posts folder, which I can call from the
<code>getStaticProps</code> method on next.js pages</p>
</li>
</ul>
<h3 id="stripping-off-unnecessary-stuff-from-blog-starter-typescript"><a aria-hidden="true" tabindex="-1" href="#stripping-off-unnecessary-stuff-from-blog-starter-typescript"><a href="#stripping-off-unnecessary-stuff-from-blog-starter-typescript" style="margin-right: 10px">#</a></a>Stripping off unnecessary stuff from blog-starter-typescript</h3>
<p>The <code>blog-starter-typescript</code> template has many tiny components, I removed some
of them to make it easier for me to orient myself</p>
<ul>
<li><a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter/components">theirs</a></li>
<li><a href="https://github.com/cmdcolin/cmdcolin.github.io/tree/master/components">mine</a></li>
</ul>
<h3 id="removing-tailwind-css"><a aria-hidden="true" tabindex="-1" href="#removing-tailwind-css"><a href="#removing-tailwind-css" style="margin-right: 10px">#</a></a>Removing tailwind CSS</h3>
<p>The <code>blog-starter-typescript</code> template uses tailwind CSS and uses "modern web
design" (aka: gigantic "tiles" instead of links, images that are way too large,
etc <a href="https://next-blog-starter.vercel.app/">https://next-blog-starter.vercel.app/</a>)</p>
<p>I started making a more basic design. I tried to roll with the tailwind CSS for
a bit, but ended up removing it entirely.</p>
<p>Tailwind CSS is sort of like a CSS-in-JS system, except every CSS attribute is
encoded in a CSS classname. For example, here are some tailwind CSS snippets</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282c34;color:#abb2bf" tabindex="0" data-language="html" data-theme="one-dark-pro"><code data-language="html" data-theme="one-dark-pro" style="display: grid;"><span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">div</span><span style="color:#D19A66"> className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"container mx-auto px-5"</span><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">div</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">footer</span><span style="color:#D19A66"> className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"bg-accent-1 border-t border-accent-2"</span><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">footer</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">div</span><span style="color:#D19A66"> className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"max-w-1xl mx-auto"</span><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">div</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">div</span><span style="color:#D19A66"> className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"min-h-screen"</span><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">div</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">a</span><span style="color:#D19A66"> className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"hover:underline"</span><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">a</span><span style="color:#ABB2BF">></span></span>
<span data-line=""><span style="color:#ABB2BF">&#x3C;</span><span style="color:#E06C75">h1</span></span>
<span data-line=""><span style="color:#D19A66">  className</span><span style="color:#ABB2BF">=</span><span style="color:#98C379">"text-2xl md:text-2xl lg:text-2xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left"</span></span>
<span data-line=""><span style="color:#ABB2BF">>&#x3C;/</span><span style="color:#E06C75">h1</span><span style="color:#ABB2BF">></span></span></code></pre></figure>
<p>They claim this is better than using external CSS (see comparison here
<a href="https://tailwindcss.com/docs/utility-first">https://tailwindcss.com/docs/utility-first</a>) but it is yet another language to
learn, and kind of tricky.</p>
<p>But, the reason I gave up with tailwind is actually because tailwind CSS resets
a lot of HTML styles so things like <code>&#x3C;h1></code>, <code>&#x3C;h2></code>, <code>&#x3C;ul></code>, <code>&#x3C;li></code>, <code>&#x3C;a></code> have
no styling at all. This is done by <code>tailwind preflight</code>
<a href="https://tailwindcss.com/docs/preflight">https://tailwindcss.com/docs/preflight</a> (which you can disable, but it is enabled
by default)</p>
<p>Stackoverflow has some ways to help restore styling and keep preflight, but it
still struck me as odd. Examples</p>
<ul>
<li>
<p><a href="https://stackoverflow.com/a/68853223/2129219">Example: you have to manually restore underlines on <code>&#x3C;a></code> elements if using tailwind XSS</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/69264976/cant-display-markdown-on-nextjs">Another example: "It looks like you're using TailwindCSS, the default styles for elements are reset, that's why the h1 text will look like any other text."</a></p>
</li>
<li>
<p><a href="https://raw.githubusercontent.com/vercel/next.js/canary/examples/blog-starter-typescript/components/markdown-styles.module.css">Another example <code>blog-template-typescript</code> uses this file to try to style the markdown using some general styles</a></p>
</li>
</ul>
<p>To me it was surprising the extend that tailwind goes to unstyle the default
browser styles, removing "idiomatic HTML" styles, so I removed tailwind for now.
Perhaps I'll return to it another time</p>
<h2 id="using-mdx-for-blogposts-in-nextjs"><a aria-hidden="true" tabindex="-1" href="#using-mdx-for-blogposts-in-nextjs"><a href="#using-mdx-for-blogposts-in-nextjs" style="margin-right: 10px">#</a></a>Using MDX for blogposts in next.js</h2>
<p>(UPDATE 2022) I no longer use MDX in my blog, my blogposts are all plain
markdown and pages tsx, but leave this here for reference</p>
<p>In the template from next.js team, the <code>blog-template-typescript</code>, it uses a
fairly simple <code>lib/markdownToHtml.ts</code> function right in the
<code>pages/posts/[slug].tsx</code> file (the markdown is statically pre-rendered in the
true static blog sense, using the getStaticProps function). This is,
unfortunately, over-simplified for the MDX case, because MDX properly needs to
hydrate the components using react on the client side also</p>
<p>To fix, the module <a href="https://github.com/hashicorp/next-mdx-remote">https://github.com/hashicorp/next-mdx-remote</a> offers a way to
load actual MDX files.</p>
<h2 id="adding-syntax-highlighting-the-nextjs-code-snippets"><a aria-hidden="true" tabindex="-1" href="#adding-syntax-highlighting-the-nextjs-code-snippets"><a href="#adding-syntax-highlighting-the-nextjs-code-snippets" style="margin-right: 10px">#</a></a>Adding syntax highlighting the next.js code snippets</h2>
<p>(UPDATE 2022) I changed to using plain remark with
<a href="https://github.com/wooorm/starry-night">https://github.com/wooorm/starry-night</a> (UPDATE 2022 v2) I changed from
starry-night to rehype-highlight. starry-night did not have good typescript/tsx
support</p>
<p>There are a couple results from google about how to add syntax highlighting to
next.js but I still found it difficult.</p>
<p>My method ended up a bit different where I manually included the prism JS and
CSS from a CDN essentially and it worked</p>
<p><a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15">https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15</a></p>
<p><a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17">https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17</a></p>
<p>Other methods e.g. adding react-prism in next.config.js (like
<a href="https://github.com/mikeesto/next-mdx-prism-example">https://github.com/mikeesto/next-mdx-prism-example</a> does) I think clashed with
MDXRemote perhaps, or maybe I was tussling with tailwind CSS too much to make a
clear thought out of it, but syntax blocks on my blogposts should now be
properly highlighted</p>
<h2 id="rss-feed"><a aria-hidden="true" tabindex="-1" href="#rss-feed"><a href="#rss-feed" style="margin-right: 10px">#</a></a>RSS feed</h2>
<p>I also followed this great guide to add a RSS file for next.js
<a href="https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site">https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site</a></p>
<p>Link here, for your feed readers <a href="https://cmdcolin.github.io/rss.xml">https://cmdcolin.github.io/rss.xml</a></p>
<p>Not many people may use RSS much anymore, but I do use it (via feedly), and I
love music blogs that keep posting on blogspot year after year, and the
occasional programming post is nice too</p>2:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"My next.js static blog setup"}],["$","h4",null,{"children":"2021-12-26"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$8"}}],["$","$L9",null,{}]]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"My next.js static blog setup"}],["$","meta","3",{"name":"description","content":"A blog"}]]
1:null
