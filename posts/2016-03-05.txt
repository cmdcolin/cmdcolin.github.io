1:HL["/_next/static/css/97dc5fe527f5d592.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["id","2016-03-05","d"],{"children":["__PAGE__?{\"id\":\"2016-03-05\"}",{}]}]}]},"$undefined","$undefined",true],"$L2",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/97dc5fe527f5d592.css","precedence":"next"}]],["$L3",null]]]]
4:I{"id":"414","chunks":["414:static/chunks/414-6d6e10881f5d1a2e.js","467:static/chunks/app/archive/page-b9afc96c23d1c7f9.js"],"name":"","async":false}
5:I{"id":"9544","chunks":["272:static/chunks/webpack-3224743bbfce757e.js","667:static/chunks/2443530c-b193ff79fd6a1567.js","139:static/chunks/139-a55d005ec0ce8e4f.js"],"name":"","async":false}
6:I{"id":"99","chunks":["272:static/chunks/webpack-3224743bbfce757e.js","667:static/chunks/2443530c-b193ff79fd6a1567.js","139:static/chunks/139-a55d005ec0ce8e4f.js"],"name":"","async":false}
2:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":[["$","div",null,{"style":{"marginBottom":100},"children":["$","$L4",null,{"href":"/","children":"Misc scribbles"}]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["id","2016-03-05","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$L7",null],"segment":"__PAGE__?{\"id\":\"2016-03-05\"}"},"styles":[]}],"segment":["id","2016-03-05","d"]},"styles":[]}],"segment":"posts"},"styles":[]}],["$","footer",null,{"style":{"marginTop":100},"children":[["$","$L4",null,{"href":"/","children":"Home"}]," ",["$","$L4",null,{"href":"/archive","children":"Blog archive"}]," ",["$","$L4",null,{"href":"https://github.com/cmdcolin/","children":"Github"}]," ",["$","$L4",null,{"href":"https://twitter.com/cmdcolin","children":"Twitter"}]," ",["$","$L4",null,{"href":"/projects","children":"Projects"}]," ",["$","$L4",null,{"href":"/photos","children":"Photos"}]," ",["$","$L4",null,{"href":"/about","children":"About"}]]}]]}]}],null]
3:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"On over-reproducibility"}],["$","meta",null,{"name":"description","content":"A blog"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
8:I{"id":"6677","chunks":["722:static/chunks/app/posts/[id]/page-29425205b46f5335.js"],"name":"","async":false}
7:["$","article",null,{"children":[["$","div",null,{"children":[["$","h1",null,{"children":"On over-reproducibility"}],["$","h4",null,{"children":"2016-03-05"}]]}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"<p>Recently, some posts were made by <a href=\"https://twitter.com/arjunrajlab\">https://twitter.com/arjunrajlab</a> about how\nperhaps we are aiming at \"over-reproducibility\". I think this is interesting,\nand would generally agree that not everyone needs to achieve total automation of\ntheir whole pipeline, but I think the post does a lot of \"blaming your tools\"\nand disparaging good development practices with regards to version control and\nfigure generation.</p>\n<p>I think that the complaint that version control and automated figures are not\nfor everyone is probably true, but it is overgeneralizing a different problem.\nFor example, students are not \"trained\" to work with Git, and they are not\n\"trained\" to do software engineering. In fact, even computer science students\nare not generally \"trained\" to do any of those things (computer science !=\nsoftware engineering). But that doesn't mean that your lab needs to forego using\nall those tools. Software development can be incredibly complex and\nsophisticated, but it's important to make sure things are \"done right\"!\nHigh-quality and easy-to-reproduce software is really about process, and\nengineering. But that is also why there is no one-true-way for reproducibility.\nMaybe Arjun doesn't have a reproducible workflow right now, but what about 5\nyears down the road, where he suddenly has a great framework for such things?\nThis happens all the time in software development (for example, how long ago was\nit that \"push to deploy\" did not exist? how often would you just edit your files\nlive on your site? now that is seen as bad practice!), but that said, processes\nfor software quality can evolve pretty organically, so even though some best\npractices exist, people can grow their own quality environment.</p>\n<p>Even if we agree that software development+version control=good, there are still\na lot of complaints about it in the blogpost. For example, the complaint that\ngit is too hard is pretty silly, and the xkcd comic about calling over graph\ntheorist doesn't really help. As a software developer at work, I think that\nversion control simply helps define a disciplined way of working. Version\ncontrol makes you analyze your progress, summarize it as a commit message,\nformat the code properly, make sure it passes tests, and then talk to your\ncollaborators about accepting it. Dropbox might accomplish some of those things,\nbut I would really doubt that it is covering that full scope. Arjun seems to\nagree with using version control for some of his labs software development, so\nagain, there is a spectrum of needs being met. Nevertheless, there are some\nweird comments about whether commit messages are like a \"lab notebook\", but\nhint: they are not, write documentation for your project or keep a separate\njournal or blog or wiki. Commit messages in my opinion should be about one line,\nand the changes should be very self explanatory. But another big argument in the\nblogpost is whether version control works for something like paper writing, and\nI believe that this underscores something else: that paper writing is really a\npretty messy procedure.</p>\n<p>I think that perhaps the \"google docs\" mode of writing is probably pretty ok for\nmany things, but it still needs a gatekeeper to incorporate the comments from\ncoauthors and reviewers into the document in an organized way. In my experience\nas a \"gatekeeper\" with writing my senior thesis, I organized my paper using\nknitr, and I automated figures being generated by R wherever possible, and then\nI would convert the paper to .docx to share with my advisors. Then I would take\ntheir comments on the .docx and incorporate it back into my paper. This could be\nseen as burdensome (\"why not just use google docs\"), but I felt that it was a\ngood way to incorporate review into a reproducible workflow.</p>\n<p>Now, my pipeline precludes your PI from having to learn git to make a pull\nrequest on your paper. That's a good thing... and we still have reproducibility.\nBut what about the figures themselves? I said I had knitr for reproducible\nfigures, but what about everyone else? I think figures have high value, and so\npeople might want to have more reproducibility invested in them. In the blog\npost, it was claimed that making \"complex\" pub-quality figures was difficult\n(i.e. the plea for Adobe Illustrator), but look at the annotation functions from\nggplot2, and multifaceted images. I found these annotation functions to be very\neasy to pick up. There is also the on-going debate about ggplot2 vs base\ngraphics on the simplystatistics blog, which covers making publication quality\nfigures, and last I checked, I think the ggplot2â€²ers were winning. I don't know\nhow it works in high profile journals like Nature, because it looks like they\njust re-do all the figures to make them have some consistent style, but that\ndoesn't mean your original figure should be irreproducible.</p>\n<p>The debate about reproducible figures is pretty tangible too in things like\nmicroscopy images. Simply look at the large amount of discussion from pubpeer\nabout image fraud and possible duplications. The pubpeer community obviously has\nsome pretty sophisticated tools for hunting out possibly manipulated microscopy\nimages. These types of things also lead to investigations, and you can see in\nthe high-profile retraction case over STAP cells that it looks like the\ninvestigating committee were simply asking how some figures were made, and upon\nfinding that lab members don't know, a paper was retracted. The RetractionWatch\nblog covers these investigations\n<a href=\"http://retractionwatch.com/2016/02/26/stap-stem-cell-researcher-obokata-loses-another-paper/\">http://retractionwatch.com/2016/02/26/stap-stem-cell-researcher-obokata-loses-another-paper/</a></p>\n<p>You can't depend on other people to back your figure up, so you need to take\nresponsibility for making sure your papers and your work are reproducible (and,\nthere is a spectrum for reproducibility, but I believe that version control is a\ngreat example of highly disciplined work). I also think that just having folders\non some hard drive is not a good way to do things either. There is a saying in\nsoftware development that is \"if it's not in version control, it doesn't exist\".\nThat's not to say that version control is for everything, big data obviously has\ntrouble with being stored in git. But that shouldn't block you from creating\nreproducible analyses.</p>\n<p>Another example from the over-reproducibility blogpost says that if you have\n\"analysis1\" and \"analysis2\", then version control advocates would tell you to\ndelete analysis1 and just remember that it is in your history. I think that this\nis just a different issue. If you actually care about both analyses, just make\nthem separate repositories, with basic README.md files explaining each them, and\nstop worrying about it. Having one repository containing too many miscellaneous\nscripts is actually an anti-pattern. Stop making repositories called\n\"bioinfo-scripts\" that just contain a mish-mash of analysis scripts! Make your\nwork purpose driven and do tasks. Also, this is an argument against REPL tools:\nyour R REPL history is not a reproducible script. Make your code into a script\nthat generates well defined outputs. Windows users: you might not understand\nthis because the command line on windows is crippled, but you have to make\nthings run on the command line.</p>\n<p>Now I wish I could say that I live by my words, but having been involved in\ncoauthoring several papers, I will just have to admit that it is really a messy\nprocedure despite my best intentions as an editor and coauthor. I wish things\nwould be better!</p>\n<p>On over-reproducibility: there is no such thing! There are pretty good arguments\nto really automate most of a process, especially if it is done repeatedly, to\nremove human errors, because meat-machines genuinely do things wrong all the\ntime.</p>\n<p>And, as my parents would say around the dinner table: \"you can always have more,\nbut you can never have less\"...so, you're not going to get to a point of\nover-reproducibility. We shouldn't cargo cult it as the only way to do science\nbut it's not a bad thing to have.</p>"}}],["$","$L8",null,{}]]}]
