<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Misc scribblings</title>
        <link>https://cmdcolin.github.io</link>
        <description>Blog by Colin Diesh</description>
        <lastBuildDate>Sun, 13 Nov 2022 01:15:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>n/a</copyright>
        <item>
            <title><![CDATA[Handling component state with React...you gotta reset it sometimes]]></title>
            <link>https://cmdcolin.github.io/posts/2022-10-10-reactstate</link>
            <guid>https://cmdcolin.github.io/posts/2022-10-10-reactstate</guid>
            <pubDate>Mon, 10 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you make a React component that has, say, a prop for a item id, and an async
action in a <code>useEffect</code> to fetch data for that item from an API, then you
probably also have a <code>useState</code> to set data after you get results back from
your API (or an error occurs). But, the interesting thing to me is</p>
<p><strong>you have to remember to reset that state, including error state, when your
props change</strong></p>
<p>It seems obvious, but I just wanted to write some working examples here</p>
<h2 id="part-1-having-component-state-for-api-response-or-error"><a aria-hidden="true" tabindex="-1" href="#part-1-having-component-state-for-api-response-or-error"><a href="#part-1-having-component-state-for-api-response-or-error" style="margin-right: 10px">#</a></a>Part 1: Having component state for API response or error</h2>
<p>Working codesandbox</p>
<p><a href="https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003">https://codesandbox.io/s/practical-rubin-l2d5el?file=/src/App.tsx:0-2003</a></p>
<p>In the below example, we will handle fetching from the Pokemon API, and use a
<code>useState</code> to handle the returned data or a returned error. The important thing
to highlight is: when you go to refetch a new item from the API, you likely
need to clear the state of what was previously there (unless you want to
display stale results)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">useState</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">useEffect</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">react</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">interface</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonType</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  type</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #91B4D5">interface</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonInfo</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span></span>
<span class="line"><span style="color: #A6ACCD">  types</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonType</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">// util fetch function to throw if !response.ok, I use this util often</span></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">RequestInit</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">Error fetching </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">: HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #5DE4C7C0">await</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">text</span><span style="color: #A6ACCD">()</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ErrorMessage</span><span style="color: #A6ACCD">({ </span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> }</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> { error</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">unknown</span><span style="color: #A6ACCD"> }) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">background</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">red</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}>{</span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">}`</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">PokemonCard</span><span style="color: #A6ACCD">({ </span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD"> }</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> { pokemonName</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD"> }) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setError</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">unknown</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">pokemonInfo</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setPokemonInfo</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">PokemonInfo</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">false</span></span>
<span class="line"><span style="color: #A6ACCD">    ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #767C9DB0">// important: reset the error and item state of the component!</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setPokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">https://pokeapi.co/api/v2/pokemon/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">        )</span></span>
<span class="line"><span style="color: #A6ACCD">        if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #E4F0FBD0">setPokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        }</span></span>
<span class="line"><span style="color: #A6ACCD">      } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        }</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">  }, [</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      {error </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">ErrorMessage</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">error</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{error} /></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> pokemonInfo </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name} is of type{</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">types</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">map</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">t </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> t</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">join</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">, </span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Loading...&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export default </span><span style="color: #91B4D5">function</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">()</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #91B4D5">const</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">setValue</span><span style="color: #A6ACCD">]</span><span style="color: #5DE4C7"> </span><span style="color: #91B4D5">=</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">oddish</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #5DE4C7">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">className</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">App</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">htmlFor</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pokemon_name</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>Pokemon name&#x3C;/</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">input</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">id</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pokemon_name</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">type</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">value</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value}</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{e </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">setValue</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">      /></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">PokemonCard</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">pokemonName</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value} /></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="part-2-a-custom-hook"><a aria-hidden="true" tabindex="-1" href="#part-2-a-custom-hook"><a href="#part-2-a-custom-hook" style="margin-right: 10px">#</a></a>Part 2: A custom hook?</h2>
<p>Can we make a hook to make this easier? I don't often make custom hooks, but
you can try to "encapsulate" some of the multiple-related hooks (the useStates
for error, pokemonInfo, and useEffect) into a single hook. This does not
drastically affect our approach, but in the below example, we can call
<code>usePokemonInfo(pokemonName)</code> and error handling and fetching is handled for us</p>
<p>Working codesandbox</p>
<p><a href="https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234">https://codesandbox.io/s/fragrant-wind-008pfn?file=/src/App.tsx:0-2234</a></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">useState</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">useEffect</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">react</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">interface</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonType</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  type</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #91B4D5">interface</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonInfo</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span></span>
<span class="line"><span style="color: #A6ACCD">  types</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">PokemonType</span><span style="color: #A6ACCD">[]</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">// util fetch function to throw if !response.ok, I use this util often</span></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">RequestInit</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">Error fetching </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">: HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #5DE4C7C0">await</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">text</span><span style="color: #A6ACCD">()</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">usePokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setError</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">unknown</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">pokemonInfo</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setItemInfo</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">PokemonInfo</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">false</span></span>
<span class="line"><span style="color: #A6ACCD">    ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setItemInfo</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0">// &#x3C;-- important to reset the state of the app</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0">// &#x3C;-- important to reset the state of the app</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">https://pokeapi.co/api/v2/pokemon/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">        )</span></span>
<span class="line"><span style="color: #A6ACCD">        if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #E4F0FBD0">setItemInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        }</span></span>
<span class="line"><span style="color: #A6ACCD">      } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        }</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">  }, [</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">pokemonInfo</span><span style="color: #A6ACCD">] </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">const</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">ErrorMessage</span><span style="color: #A6ACCD">({ </span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> }</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> { error</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">unknown</span><span style="color: #A6ACCD"> }) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">background</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">red</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}>{</span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">}`</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">PokemonCard</span><span style="color: #A6ACCD">({ </span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD"> }</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> { pokemonName</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD"> }) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">pokemonInfo</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">usePokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      {error </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">ErrorMessage</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">error</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{error} /></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> pokemonInfo </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name} is of type{</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">types</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">map</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">t </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> t</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">join</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">, </span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Loading...&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export default </span><span style="color: #91B4D5">function</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">()</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #91B4D5">const</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">setValue</span><span style="color: #A6ACCD">]</span><span style="color: #5DE4C7"> </span><span style="color: #91B4D5">=</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">oddish</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #5DE4C7">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">className</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">App</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">htmlFor</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pokemon_name</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>Pokemon name&#x3C;/</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">input</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">id</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pokemon_name</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">type</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">value</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value}</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #91B4D5">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{e </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">setValue</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">      /></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">PokemonCard</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">pokemonName</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value} /></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>I think it's sometimes common to forget error handling in async JS code
(useEffect async or many other contexts, etc), and there aren't e.g. lint rules
to really help, leaving errors uncaught or handled poorly. If you don't
manually handle the error in the <code>useEffect</code>, your user probably will not see
that an error occured.</p>
<p>In addition to this error handling rant, the other point of this article is you
need to reset your component state when props change, which in the code above,
are the calls to setError(undefined) and setPokemonInfo(undefined) before I
fetch a new Pokemon from the API.</p>
<h2 id="footnote-0---web-perf-pontificating"><a aria-hidden="true" tabindex="-1" href="#footnote-0---web-perf-pontificating"><a href="#footnote-0---web-perf-pontificating" style="margin-right: 10px">#</a></a>Footnote 0 - Web perf pontificating</h2>
<p>I think sometimes, this manner of fetching data inside a component can lead to
what some web-perf-experts refer to as waterfall. Can you get your state from
your parent? That might result in fewer individual requests made, but is also
quite a different architecture.</p>
<h2 id="footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error"><a aria-hidden="true" tabindex="-1" href="#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error"><a href="#footnote-1---errorboundaries-dont-automatically-save-you-from-manually-handling-error" style="margin-right: 10px">#</a></a>Footnote 1 - ErrorBoundaries don't automatically save you from manually handling error</h2>
<p>You can also consider using an ErrorBoundary, but this does not automatically
catch errors that happen in e.g. a useEffect. If you want your ErrorBoundary to
handle your useEffect related error, then you can use something like this. This
assumes a <code>react-error-boundary</code> type ErrorBoundary.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">ErrorBoundary</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">react-error-boundary</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">PokemonCard</span><span style="color: #A6ACCD">({ </span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD"> }</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> { pokemonName</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD"> }) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">pokemonInfo</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">usePokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">error</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      {pokemonInfo </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name} is of type{</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          {pokemonInfo</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">types</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">map</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">t </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> t</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">join</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">, </span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Loading...&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export default </span><span style="color: #91B4D5">function</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">()</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #91B4D5">const</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">setValue</span><span style="color: #A6ACCD">]</span><span style="color: #5DE4C7"> </span><span style="color: #91B4D5">=</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">oddish</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #5DE4C7">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">ErrorBoundary</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">FallbackComponent</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">({</span><span style="color: #E4F0FB"> error </span><span style="color: #A6ACCD">})</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>{</span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">}`</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>}></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">PokemonCard</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">pokemonName</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{value} /></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">ErrorBoundary</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #5DE4C7">  </span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Another trick, instead of throwing in the body of the component is throwing in
the callback form of the useState-setter. Then you wouldn't necessarily need to
have a separate useState for the error state, but you would then need an
ErrorBoundary or something to help display a nice error.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">false</span></span>
<span class="line"><span style="color: #A6ACCD">  ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// important: reset the error and item state of the component!</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FBD0">setPokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">https://pokeapi.co/api/v2/pokemon/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      )</span></span>
<span class="line"><span style="color: #A6ACCD">      if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setPokemonInfo</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setPokemonInfo</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span></span>
<span class="line"><span style="color: #A6ACCD">        })</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">  })()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">cancelled</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}, [</span><span style="color: #E4F0FB">pokemonName</span><span style="color: #A6ACCD">])</span></span></code></pre>
<h2 id="footnote-2-the-future-with-react-data-fetching"><a aria-hidden="true" tabindex="-1" href="#footnote-2-the-future-with-react-data-fetching"><a href="#footnote-2-the-future-with-react-data-fetching" style="margin-right: 10px">#</a></a>Footnote 2: The future with React data fetching</h2>
<p>See <a href="https://github.com/reactjs/rfcs/pull/229">https://github.com/reactjs/rfcs/pull/229</a></p>
<p>This was just announced so there is a lot to unpack there, I can update this
blog post if I come up with an analogous example using this RFC</p>
<h2 id="footnote-3-using-react-query-or-swr"><a aria-hidden="true" tabindex="-1" href="#footnote-3-using-react-query-or-swr"><a href="#footnote-3-using-react-query-or-swr" style="margin-right: 10px">#</a></a>Footnote 3: Using react-query or swr</h2>
<p>There are helper libraries that try to help</p>
<p>One helper library suggested was called <code>react-query</code>, so I made a demo using
<code>@tanstack/react-query</code> v4.</p>
<p><a href="https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx">https://codesandbox.io/s/hungry-framework-ctmhkz?file=/src/App.tsx</a></p>
<p>Another is <code>swr</code>, here is a demo for that library</p>
<p><a href="https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx">https://codesandbox.io/s/condescending-poitras-fiwxym?file=/src/App.tsx</a></p>
<p>These libraries definitely <strong>do</strong> a lot of things, so take on some more baggage
than the simple hooks described above, but may be helpful to you also.</p>
<h2 id="footnote-4-fetching-is-just-one-aspect-of-this-blogpost"><a aria-hidden="true" tabindex="-1" href="#footnote-4-fetching-is-just-one-aspect-of-this-blogpost"><a href="#footnote-4-fetching-is-just-one-aspect-of-this-blogpost" style="margin-right: 10px">#</a></a>Footnote 4: Fetching is just one aspect of this blogpost</h2>
<p>Really, the thing I wanted to make more clear in general was also how "sticky"
useState can be. I find other patterns in my codebase besides just fetching
where I have to "reset" the useState hook to a neutral state, sometimes related
to controlled components.</p>
<h2 id="footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state"><a aria-hidden="true" tabindex="-1" href="#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state"><a href="#footnote-5-you-can-also-use-the-key-prop-as-an-alternative-to-manually-resetting-state" style="margin-right: 10px">#</a></a>Footnote 5: You can also use the "key" prop as an alternative to manually resetting state</h2>
<p>See <a href="https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx">https://codesandbox.io/s/cool-grass-9nb43y?file=/src/App.tsx</a></p>
<p>I am not sure I recommend this as it basically forces the component to unmount,
which may be ok in some cases but I don't know all the ramifications. A quote
from <a href="https://kentcdodds.com/blog/understanding-reacts-key-prop">https://kentcdodds.com/blog/understanding-reacts-key-prop</a> explains</p>
<p>"This allows you to return the exact same element type, but force React to
unmount the previous instance, and mount a new one. This means that all state
that had existed in the component at the time is completely removed and the
component is "reinitialized" for all intents and purposes. "</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Making an audio slideshow with ffmpeg]]></title>
            <link>https://cmdcolin.github.io/posts/2022-10-08-ffmpeg-slideshow</link>
            <guid>https://cmdcolin.github.io/posts/2022-10-08-ffmpeg-slideshow</guid>
            <pubDate>Sat, 08 Oct 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Inspired by a new trend of posting "playlists" on youtube with visual
accompaniment (<a href="https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s">https://www.youtube.com/watch?v=zG92ss_2Vjw&#x26;t=1937s</a>), I wanted
to try to make my own with a slideshow. I used ffmpeg as the heavy lifting tool</p>
<h2 id="step-1---prepare-your-playlist"><a aria-hidden="true" tabindex="-1" href="#step-1---prepare-your-playlist"><a href="#step-1---prepare-your-playlist" style="margin-right: 10px">#</a></a>Step 1 - prepare your playlist</h2>
<p>I like foobar2000, because it can combine multiple files into a single output
file.</p>
<p>Use right-click -> "Convert ..." in the foobar2000 playlist</p>
<p><img src="/media/foobar1.png" alt=""></p>
<p>Use "Merge all tracks into one file" in the "Convert..." dialog</p>
<p><img src="/media/foobar2.png" alt=""></p>
<p>Note: If you have a folder of mp3's only, you can directly concatenate them
with <code>cat *.mp3 > out.mp3</code> or use ffmpeg to concatenate them for a pure
command-line alternative.</p>
<h2 id="step-2---prepare-the-slideshow"><a aria-hidden="true" tabindex="-1" href="#step-2---prepare-the-slideshow"><a href="#step-2---prepare-the-slideshow" style="margin-right: 10px">#</a></a>Step 2 - prepare the slideshow</h2>
<p>Use 10 seconds per picture. Note the glob pattern is in quotes</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">ffmpeg -framerate 1/10 -pattern_type glob -i </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">*.jpg</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> pics.mp4</span></span></code></pre>
<h2 id="step-3---combine-the-slideshow-and-playlist"><a aria-hidden="true" tabindex="-1" href="#step-3---combine-the-slideshow-and-playlist"><a href="#step-3---combine-the-slideshow-and-playlist" style="margin-right: 10px">#</a></a>Step 3 - combine the slideshow and playlist</h2>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">ffmpeg -stream_loop -1 -i pics.mp4 -i playlist.wav -shortest -vcodec copy output.mp4</span></span></code></pre>
<p>Using <code>-stream_loop -1</code> on pics.mp4 will loop the pics until playlist.wav ends,
but then limit itself to the length of the playlist.wav with <code>-shortest</code></p>
<h2 id="step-4---upload-to-youtube"><a aria-hidden="true" tabindex="-1" href="#step-4---upload-to-youtube"><a href="#step-4---upload-to-youtube" style="margin-right: 10px">#</a></a>Step 4 - upload to youtube</h2>
<p>Done!</p>
<h3 id="footnote-1-what-if-you-just-want-a-single-picture"><a aria-hidden="true" tabindex="-1" href="#footnote-1-what-if-you-just-want-a-single-picture"><a href="#footnote-1-what-if-you-just-want-a-single-picture" style="margin-right: 10px">#</a></a>Footnote 1: What if you just want a single picture?</h3>
<p>Common for posting an album to youtube, you post the album art and some audio, you can try searching from stackoverflow for options related to this</p>
<p>Example <a href="https://superuser.com/a/332867/415552">https://superuser.com/a/332867/415552</a></p>
<h3 id="footnote-2-distortion"><a aria-hidden="true" tabindex="-1" href="#footnote-2-distortion"><a href="#footnote-2-distortion" style="margin-right: 10px">#</a></a>Footnote 2: Distortion</h3>
<p>The pictures may get distorted to fit the video frame, I haven't experimented
with options that modify this behavior</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Creating a music player using Rust/GTK4 - fml9000]]></title>
            <link>https://cmdcolin.github.io/posts/2022-09-05-rustmusicplayer</link>
            <guid>https://cmdcolin.github.io/posts/2022-09-05-rustmusicplayer</guid>
            <pubDate>Mon, 05 Sep 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have started endeavoring to learn Rust. I did the rustlings exercises but I
knew the concepts would fade rapidly from my brain without some practice. I
have now started making a music player using Rust+GTK4.</p>
<p>I chose GTK4 to have a linux native GUI music player. Particularly, I have a
particular <code>foobar2000</code> setup that I wanted to emulate. I have used
<code>foobar2000</code> under wine (windows emulator on linux) and it's not terrible, but
it has background CPU consumption of about 15% idle and doesn't feel quite
right sometimes. I have used a variety of other linux music players such as
<code>quodlibet</code> (GUI/GTK based) and <code>cmus</code> (command line) but they didn't really
feel quite right.</p>
<h3 id="choosing-a-tech-stack"><a aria-hidden="true" tabindex="-1" href="#choosing-a-tech-stack"><a href="#choosing-a-tech-stack" style="margin-right: 10px">#</a></a>Choosing a tech stack</h3>
<p>I started by attempting with <code>Relm4</code>, which I may return to at some point, but
trying to juggle learning Relm4-style widgets, GTK, and rust all at once was a
bit much. I stepped to using <code>gtk4-rs</code> directly.</p>
<h3 id="create-a-spreadsheet-style-data-grid-of-tracks-with-columnview"><a aria-hidden="true" tabindex="-1" href="#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview"><a href="#create-a-spreadsheet-style-data-grid-of-tracks-with-columnview" style="margin-right: 10px">#</a></a>Create a "spreadsheet style" data grid of tracks with <code>ColumnView</code></h3>
<p>Then, I wanted to create a data grid showing to display e.g. a table with
artist, track, album, etc. I chose to use the GTK
<a href="https://docs.gtk.org/gtk4/class.ColumnView.html"><code>ColumnView</code></a> to drive this.
I stumbled around looking for example code, but there was none specifically for
the <code>ColumnView</code>. I also realized the <code>ListView</code> example from the <code>gtk4-rs</code>
examples with it's factory function had similar needs that the <code>ColumnView</code>.</p>
<p>I found out that I basically needed to create a <code>ListStore</code>. I thought if
I could make my own <code>GObject</code> subclass, it would solve everything, but I had
trouble getting making this work (rust doesn't have the concept of extending a
class for one thing, you implement various traits instead). Finally, I randomly
stumbled on this link using a <code>BoxedAnyObject</code> with a good example of storing
data in a ListStore
<a href="https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html">https://gtk-rs.org/gtk-rs-core/git/docs/glib/struct.BoxedAnyObject.html</a></p>
<p>The <code>BoxedAnyObject</code> is a <code>GObject</code>, so this was an good route to storing the
<code>ListView</code> items. There was no example code for connecting the <code>ListStore</code> with
the <code>ColumnView</code>, so I stuggled for awhile before realizing that the <code>ListView</code>
example in the <code>gtk4-rs</code> codebase has similar concepts.</p>
<p>See [1] for minimal usage of <code>ColumnView</code> that I contributed to the <code>gtk4-rs</code>
repo!</p>
<h3 id="choosing-an-audio-library"><a aria-hidden="true" tabindex="-1" href="#choosing-an-audio-library"><a href="#choosing-an-audio-library" style="margin-right: 10px">#</a></a>Choosing an audio library</h3>
<p>To actually play audio, I looked at a couple options. There was even one option
called GTK
<a href="https://gtk-rs.org/gtk4-rs/git/docs/gtk4/struct.MediaFile.html"><code>MediaFile</code></a>
which should to be able to play e.g. mp3s, making my job of making a media
player much simpler, but it produced an error <a href="https://www.google.com/search?q=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;oq=%22GTK+could+not+find+a+media+module.+Check+your+installation.%22&#x26;aqs=chrome..69i57.267j0j7&#x26;sourceid=chrome&#x26;ie=UTF-8">"GTK could not find a media
module. Check your
installation."</a>
which had very few references on the internet. I figured this could be
difficult to solve or point to issues I could face later on making minimal
executables for users.</p>
<p>So, next I tried out <code>symphonia</code> (<a href="https://github.com/pdeljanov/Symphonia/">https://github.com/pdeljanov/Symphonia/</a>).
Symphonia requires a lot more code to work (~1000 lines so far, copying from
the <code>symphonia-play</code> example) but it has broad file format support, pure-rust
audio stack, etc. I got confused about how to package it into an easy-to-use system though, having to create a symphonia player on a separate thread, so I looked elsewhere...</p>
<p>Next I turned to <code>rodio</code>. This works well, and automatically plays on a
separate thread, but I found two issues 1) I have to initialize the rodio
player in "fn main" and not anywhere else, or it would just play a short blip
of audio (<a href="https://github.com/RustAudio/rodio/issues/381">https://github.com/RustAudio/rodio/issues/381</a>). Then, it turned out
that the <code>rodio</code>
<a href="https://docs.rs/rodio/0.14.0/rodio/struct.Sink.html#method.stop"><code>Sink</code></a>
instance (which you pass audio to) cannot stop and then play new song xref
(<a href="https://github.com/RustAudio/rodio/issues/315">https://github.com/RustAudio/rodio/issues/315</a>). To workaround, I replace it
with a new <code>Sink</code>.</p>
<p>This required me to learn about <code>RefCell</code>. I googled probably about 50 things
just grasping at straws for awhile, but then landed on the solution of putting
the <code>Sink</code> in a <code>Rc&#x3C;RefCell&#x3C;Sink>></code>, then that allows me to pass it into my
callback that handles double clicking the songs in the <code>ColumnView</code>, and then I
borrow the <code>RefCell</code> mutably to replace it with a new <code>Sink</code>.</p>
<h3 id="reading-audio-metadata-into-an-sqlite-db"><a aria-hidden="true" tabindex="-1" href="#reading-audio-metadata-into-an-sqlite-db"><a href="#reading-audio-metadata-into-an-sqlite-db" style="margin-right: 10px">#</a></a>Reading audio metadata into an <code>sqlite</code> DB</h3>
<p>I also wanted to have the option of reading and writing audio metadata.
Symphonia only reads metadata, so I found the <code>lofty</code> crate.</p>
<p>I also realized that reading tens of thousands of file's metadata at each app
startup would be slow, so I endeavored to store that data in an <code>sqlite</code>
database. I found that music players like <code>foobar2000</code> and <code>0xdeadbeef</code> have
databases of track metadata also (Example folder on <code>foobar2000</code> (1.x) for this
snap/foobar2000/433/foobar2000/profile/library/74E45640B1C695CC/meta-0001,
meta-0002, etc.)</p>
<p>I used the <code>walkdir</code> crate to walk a directory for files, <code>lofty</code> to read the
metadata, and then finally inserted the data into the <code>sqlite</code> db. I am still
working out the schema for the database but it provisionally associates data
with a primary key of filename.</p>
<h3 id="learning-about-reference-counting-and-move-semantics"><a aria-hidden="true" tabindex="-1" href="#learning-about-reference-counting-and-move-semantics"><a href="#learning-about-reference-counting-and-move-semantics" style="margin-right: 10px">#</a></a>Learning about reference counting and move semantics</h3>
<p>Originally I queried the sqlite database and stored a <code>Vec&#x3C;Track></code>, where
<code>Track</code> is a struct with artist, album, song title, etc. I realized that this
causes issues passing this around to different functions, and storing them in
the <code>BoxedAnyObject</code>, (example thread discussing issue
<a href="https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust">https://stackoverflow.com/questions/42954008/how-to-pass-one-vec-to-multiple-functions-in-rust</a>)
so I changed functions to accept slices of the Vec, and to make it a
<code>Vec&#x3C;Rc&#x3C;Track>></code> instead of just <code>Vec&#x3C;Track></code> (another related thread
<a href="https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3">https://users.rust-lang.org/t/self-has-an-anonymous-lifetime-but-it-needs-to-satisfy-a-static-lifetime-requirement/58641/3</a>).</p>
<h3 id="result"><a aria-hidden="true" tabindex="-1" href="#result"><a href="#result" style="margin-right: 10px">#</a></a>Result</h3>
<p>The current work is at <a href="https://github.com/cmdcolin/fml9000">https://github.com/cmdcolin/fml9000</a></p>
<p><img src="/media/fml9000_1.png" alt=""></p>
<p>Screenshot shows the current look and feel. Some stuff in the screenshot is
mocked and not fully functional, but it has been a great learning experience
thus far</p>
<h3 id="footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage"><a aria-hidden="true" tabindex="-1" href="#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage"><a href="#footnote-1-creating-a-pr-to-the-gtk4-rs-repo-to-demonstrate-example-columnview-usage" style="margin-right: 10px">#</a></a>Footnote 1: Creating a PR to the <code>gtk4-rs</code> repo to demonstrate example ColumnView usage</h3>
<p>I created a PR (<a href="https://github.com/gtk-rs/gtk4-rs/pull/1111">https://github.com/gtk-rs/gtk4-rs/pull/1111</a>) to demonstrate
simple <code>ColumnView</code> usage. The code review that was given on the PR was
excellent. They explained how to simplify the code I submitted so that each
grid cell was very minimal (starting from a <code>gtk::Box</code> with a <code>gtk::Label</code>
inside of it, to just being a <code>gtk::Inscription</code> which is very fast). Big
thanks to the team for helping out with this!</p>
<p>After this hurdle was crossed, I felt much more comfortable in the GTK mindset,
and I quickly fleshed out some more UI for the app</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Making a twitter bot in the year 2022 with node.js]]></title>
            <link>https://cmdcolin.github.io/posts/2022-08-26-twitterbot</link>
            <guid>https://cmdcolin.github.io/posts/2022-08-26-twitterbot</guid>
            <pubDate>Fri, 26 Aug 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Recently, we made the logistic map fractal visualizer app, but, how do we keep
USER ENGAGEMENT METRICS up? Gotta make a twitter bot to post fractals, that's
how!</p>
<p>I found it somewhat tricky to get this working, because there is a lot of odd
lingo out there. There are libraries that may help you, but this post goes
through making an OAuth client in node.js to post to the twitter API with
fairly unabstracted code. OAuth still confuses me, but if you follow these
steps, you can make a bot!</p>
<h3 id="step-1"><a aria-hidden="true" tabindex="-1" href="#step-1"><a href="#step-1" style="margin-right: 10px">#</a></a>Step 1</h3>
<p>Get your keys. I forget the exact procedure for this but go to
<a href="https://developer.twitter.com">https://developer.twitter.com</a> and sign up, register an "app" with them, and
poke around for awhile. This github repo provides a couple more details about
the process of registering
<a href="https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal">https://github.com/manzt/cron-tweet#create-a-standalone-app-in-the-developer-portal</a></p>
<p>After sometime, you should get a screen that looks like this. Keep this around
for Step 4. Note: I did not have to apply for any elevated access for this
article, just the basic level you get from the initial registration! I believe
in twitter terms, this article only requires "Essential" access and not any
"Elevated" access.</p>
<p><img src="https://github.com/cmdcolin/twitter_fractal_bot/blob/master/img/devpanel.png?raw=true" alt=""></p>
<h3 id="step-2"><a aria-hidden="true" tabindex="-1" href="#step-2"><a href="#step-2" style="margin-right: 10px">#</a></a>Step 2</h3>
<p>Make a repo with a couple dependencies</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">mkdir mybot</span></span>
<span class="line"><span style="color: #A6ACCD">cd mybot</span></span>
<span class="line"><span style="color: #A6ACCD">yarn init</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add node-fetch formdata-node oauth dotenv typescript</span></span></code></pre>
<h3 id="step-3"><a aria-hidden="true" tabindex="-1" href="#step-3"><a href="#step-3" style="margin-right: 10px">#</a></a>Step 3</h3>
<p>Update <code>package.json</code> with a couple scripts to build these typescript files
(alternatively use <code>ts-node</code> or similar to run the ts files directly)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">dependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">dotenv</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^16.0.1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">formdata-node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.4.1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">node-fetch</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^3.2.10</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">oauth</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^0.10.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.7.4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">license</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">MIT</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">type</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">module</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">@types/node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^18.7.9</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">@types/oauth</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^0.9.1</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">prepost</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">yarn build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">post</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node dist/bot.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>And <code>tsconfig.json</code> file</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">include</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">compilerOptions</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">target</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esnext</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">outDir</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">moduleResolution</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">declaration</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">strict</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">esModuleInterop</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This compiles the <code>src</code> folder and outputs js files to the <code>dist</code> directory,
and we can run the <code>node dist/bot.js</code> file with node to post the file</p>
<h3 id="step-4"><a aria-hidden="true" tabindex="-1" href="#step-4"><a href="#step-4" style="margin-right: 10px">#</a></a>Step 4</h3>
<p>Create a .env file with your keys that you found in the above screenshot
corresponding to the box1 (which gives you API_KEY/API_SECRET, sometimes also
referred to as consumer keys in other documents) and box2 (which gives you
ACCESS_TOKEN and ACCESS_TOKEN_SECRET) from
the above screenshot</p>
<pre><code>API_KEY="xxxxxxxxxxxxxxxxxxxxxxxxx"
API_SECRET="yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
ACCESS_TOKEN="aaaaaaaaaaaaaaaaaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
ACCESS_TOKEN_SECRET="bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
</code></pre>
<p>Important: Also add the .env to your .gitignore, you don't want to commit this
to github!</p>
<h3 id="step-5"><a aria-hidden="true" tabindex="-1" href="#step-5"><a href="#step-5" style="margin-right: 10px">#</a></a>Step 5</h3>
<p>Make the bot! Create <code>src/bot.ts</code></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #ADD7FF">fs</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">fs</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">import * </span><span style="color: #A6ACCDC0">as</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">dotenv</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dotenv</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">import </span><span style="color: #ADD7FF">OAuth</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">oauth</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">import </span><span style="color: #ADD7FF">fetch</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">RequestInit</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">node-fetch</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">FormData</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">File</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">formdata-node</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">dotenv</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">config</span><span style="color: #A6ACCD">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">mfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">params</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">RequestInit</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">text</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">text</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">text</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">() </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">Promise</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">Record</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCDC0">unknown</span><span style="color: #A6ACCD">>></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getAuthHeader</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">oauth</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">OAuth</span><span style="color: #A6ACCD">.</span><span style="color: #A6ACCDC0">OAuth</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">url</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">oauth</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">authHeader</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ACCESS_TOKEN</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ACCESS_TOKEN_SECRET</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">post</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">client</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">OAuth</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">OAuth</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://api.twitter.com/oauth/request_token</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://api.twitter.com/oauth/access_token</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">API_KEY</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">API_SECRET</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">as</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">1.0A</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">null</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">HMAC-SHA1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">picEndpoint</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://upload.twitter.com/1.1/media/upload.json</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">tweetEndpoint</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://api.twitter.com/2/tweets</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">clientName</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">v3CreateTweetJS</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">form</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">FormData</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">form</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">set</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">media</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">File</span><span style="color: #A6ACCD">([</span><span style="color: #E4F0FB">fs</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">readFileSync</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">yourpicture.png</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)], </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">yourpicture.png</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">),</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// first post a picture</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response1</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">mfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">picEndpoint</span><span style="color: #A6ACCD">, {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">headers</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">Authorization</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FBD0">getAuthHeader</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">client</span><span style="color: #A6ACCD">,</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">picEndpoint</span><span style="color: #A6ACCD">),</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">user-agent</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">clientName</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">method</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">POST</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">//@ts-ignore</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">form</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// then post a tweet, referring to the media_id_string from response1</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response2</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">mfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">tweetEndpoint</span><span style="color: #A6ACCD">, {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">headers</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">Authorization</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FBD0">getAuthHeader</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">client</span><span style="color: #A6ACCD">,</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">tweetEndpoint</span><span style="color: #A6ACCD">),</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">user-agent</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">clientName</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">content-type</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">application/json</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">accept</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">application/json</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">media</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">media_ids</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">response1</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">media_id_string</span><span style="color: #A6ACCD">]</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">text</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Hello world!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">}),</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">method</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">post</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">response2</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">exit</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">})()</span></span></code></pre>
<h3 id="step-6"><a aria-hidden="true" tabindex="-1" href="#step-6"><a href="#step-6" style="margin-right: 10px">#</a></a>Step 6</h3>
<p>Now that you have the bot, you can run it locally with <code>yarn post</code> (runs the
"post" script in <code>package.json</code>) to test it out</p>
<h3 id="step-7"><a aria-hidden="true" tabindex="-1" href="#step-7"><a href="#step-7" style="margin-right: 10px">#</a></a>Step 7</h3>
<p>Now to create a github action to run the bot.</p>
<p>Navigate to your repo's settings page, then go to Secrets->Actions and paste
the keys one by one, see below screenshot</p>
<p><img src="https://user-images.githubusercontent.com/6511937/187038172-80b35e34-03dd-4613-b6f6-9f8e25d2fc34.png" alt=""></p>
<h3 id="step-8"><a aria-hidden="true" tabindex="-1" href="#step-8"><a href="#step-8" style="margin-right: 10px">#</a></a>Step 8</h3>
<p>Create a file with the path <code>.github/workflows/post.yml</code> in your repo to make the post</p>
<p>You can use a cron/scheduled workflow in the github action, which the below
example does
<a href="https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule">https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule</a></p>
<p>The below github action posts every 5 hours on the hour (see
<a href="https://crontab.guru/">https://crontab.guru/</a> for more info on cron syntax)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Post tweet</span></span>
<span class="line"><span style="color: #5DE4C7">on</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">schedule</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    - </span><span style="color: #5DE4C7">cron</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">0 */5 * * *</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">jobs</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">test</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Post tweet</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">runs-on</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">ubuntu-latest</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">steps</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #5DE4C7">uses</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">actions/checkout@v2</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Use Node.js 14.x</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">uses</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">actions/setup-node@v2</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">with</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">node-version</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">14</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Install deps (with cache)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">uses</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">bahmutov/npm-install@v1</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Post tweet</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">env</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">API_KEY</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">${{ secrets.API_KEY }}</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">API_SECRET</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">${{ secrets.API_SECRET }}</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">ACCESS_TOKEN</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">${{ secrets.ACCESS_TOKEN }}</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">ACCESS_TOKEN_SECRET</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">${{ secrets.ACCESS_TOKEN_SECRET }}</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">run</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">yarn post</span></span></code></pre>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>See <a href="https://github.com/cmdcolin/twitter_fractal_bot">https://github.com/cmdcolin/twitter_fractal_bot</a> for working example. I
could have, in retrospect, used a library like <code>twit</code>
(<a href="https://www.npmjs.com/package/twit">https://www.npmjs.com/package/twit</a>) but this code sample is not substantially
more complicated than using the <code>twit</code> library.</p>
<p>You can also adapt this to post only when you push to your repo, or release a
new version from your repo!</p>
<h2 id="footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across"><a aria-hidden="true" tabindex="-1" href="#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across"><a href="#footnote-1-examples-of-odd-lingo-or-stumbling-blocks-you-might-come-across" style="margin-right: 10px">#</a></a>Footnote 1: Examples of odd lingo or stumbling blocks you might come across</h2>
<ul>
<li>Bearer token - The Bearer token is an alternative method of authenticating,
but it cannot be used to post tweets</li>
<li>Twitter API v1 vs v2 - We use a mix of v1 and v2, it's just the different
URLs that we are posting to and can be mixed in our example</li>
<li>Consumer key vs API key - they are the same thing in our example. If you look
closely at the box 1 in the screenshot it says "Consumer keys" and then gives
you an API key below *</li>
</ul>
<h2 id="footnote-2-posting-on-release-with-a-github-action"><a aria-hidden="true" tabindex="-1" href="#footnote-2-posting-on-release-with-a-github-action"><a href="#footnote-2-posting-on-release-with-a-github-action" style="margin-right: 10px">#</a></a>Footnote 2: Posting on release with a github action</h2>
<p>Replace the cron section of the github action with</p>
<pre><code>on: release
</code></pre>
<h2 id="footnote-3-additional-reading"><a aria-hidden="true" tabindex="-1" href="#footnote-3-additional-reading"><a href="#footnote-3-additional-reading" style="margin-right: 10px">#</a></a>Footnote 3: Additional reading</h2>
<p><a href="https://aaronparecki.com/oauth-2-simplified/">https://aaronparecki.com/oauth-2-simplified/</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Using Rust/WASM in a monorepo with create-react-app]]></title>
            <link>https://cmdcolin.github.io/posts/2022-08-22-rustwasm</link>
            <guid>https://cmdcolin.github.io/posts/2022-08-22-rustwasm</guid>
            <pubDate>Mon, 22 Aug 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Behold, the buzzwords:</p>
<ul>
<li>Rust / WASM / wasm-bindgen</li>
<li>React</li>
<li>Monorepo / Yarn workspaces</li>
<li>Webpack 5 / create-react-app 5</li>
<li>Typescript</li>
</ul>
<p>The main goal here: To use Rust + WASM in a react app, inside a monorepo.</p>
<p>TLDR: visit the final product!
<a href="https://github.com/cmdcolin/rust_react_monorepo_template">https://github.com/cmdcolin/rust_react_monorepo_template</a>. It is also deployed
live here <a href="https://cmdcolin.github.io/rust_react_monorepo_template">https://cmdcolin.github.io/rust_react_monorepo_template</a></p>
<h2 id="steps-to-create-this-type-of-integration-from-scratch"><a aria-hidden="true" tabindex="-1" href="#steps-to-create-this-type-of-integration-from-scratch"><a href="#steps-to-create-this-type-of-integration-from-scratch" style="margin-right: 10px">#</a></a>Steps to create this type of integration from scratch</h2>
<h3 id="create-repo"><a aria-hidden="true" tabindex="-1" href="#create-repo"><a href="#create-repo" style="margin-right: 10px">#</a></a>Create repo</h3>
<pre><code>mkdir template
cd template
git init
</code></pre>
<h3 id="create-root-packagejson"><a aria-hidden="true" tabindex="-1" href="#create-root-packagejson"><a href="#create-root-packagejson" style="margin-right: 10px">#</a></a>Create root <code>package.json</code></h3>
<p>Then put this in the monorepo's root <code>package.json</code></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">private</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">workspaces</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">app</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This sets our repo up as a "monorepo" with two "workspaces". one will be the
wasm code, in <code>hello-wasm</code>, one will be an instance of <code>create-react-app</code></p>
<h3 id="add-a-create-react-app-instance-inside-the-monorepo"><a aria-hidden="true" tabindex="-1" href="#add-a-create-react-app-instance-inside-the-monorepo"><a href="#add-a-create-react-app-instance-inside-the-monorepo" style="margin-right: 10px">#</a></a>Add a <code>create-react-app</code> instance inside the monorepo</h3>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npx create-react-app --template typescript app</span></span></code></pre>
<p>This will make an <code>app</code> subfolder inside our monorepo</p>
<h3 id="download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm"><a aria-hidden="true" tabindex="-1" href="#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm"><a href="#download-the-hello-world-rust-wasm-bindgen-example-and-put-it-in-a-folder-named-hello-wasm" style="margin-right: 10px">#</a></a>Download the hello world rust <code>wasm-bindgen</code> example and put it in a folder named <code>hello-wasm</code></h3>
<p>Download <a href="https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/hello_world</a> to the hello-wasm folder</p>
<p>This link can help <a href="https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world">https://download-directory.github.io/?url=https%3A%2F%2Fgithub.com%2Frustwasm%2Fwasm-bindgen%2Ftree%2Fmain%2Fexamples%2Fhello_world</a></p>
<h3 id="add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder"><a aria-hidden="true" tabindex="-1" href="#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder"><a href="#add-some-extra-fields-to-the-packagejson-in-the-hello-wasm-folder" style="margin-right: 10px">#</a></a>Add some extra fields to the <code>package.json</code> in the <code>hello-wasm</code> folder</h3>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pkg</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">pkg/index.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">rest</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h3 id="modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert"><a aria-hidden="true" tabindex="-1" href="#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert"><a href="#modify-the-hello-wasm-example-to-return-a-value-instead-of-making-an-alert" style="margin-right: 10px">#</a></a>Modify the <code>hello-wasm</code> example to return a value instead of making an alert</h3>
<p>I changed the rust code to return a String value instead of making an alert box</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">#[wasm_bindgen]</span></span>
<span class="line"><span style="color: #5DE4C7">pub</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">fn</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">greet</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">name</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCDC0">str</span><span style="color: #A6ACCD">) </span><span style="color: #91B4D5">-></span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">String</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #ADD7FF">format!</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Hello </span><span style="color: #A6ACCD">{}"</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h3 id="build-the-hello-wasm-pkg"><a aria-hidden="true" tabindex="-1" href="#build-the-hello-wasm-pkg"><a href="#build-the-hello-wasm-pkg" style="margin-right: 10px">#</a></a>Build the <code>hello-wasm</code> pkg</h3>
<p>Go into the <code>hello-wasm</code> folder and run <code>yarn build</code>. This creates a directory
named <code>pkg</code> which has <code>.wasm</code> files and <code>.js</code> files. Now, the <code>hello-wasm</code>
folder is effectively a node package. We could publish this to <code>NPM</code> (see
footnote 1)</p>
<h3 id="add-the-hello-wasm-package-to-the-app-dependencies"><a aria-hidden="true" tabindex="-1" href="#add-the-hello-wasm-package-to-the-app-dependencies"><a href="#add-the-hello-wasm-package-to-the-app-dependencies" style="margin-right: 10px">#</a></a>Add the <code>hello-wasm</code> package to the <code>app</code> dependencies</h3>
<p>Add <code>"hello-wasm":"^1.0.0"</code> to the <code>dependencies</code> array in <code>app/package.json</code>. This
will refer to our local monorepo's rust wasm package!</p>
<h3 id="create-craco-config-for-create-react-app"><a aria-hidden="true" tabindex="-1" href="#create-craco-config-for-create-react-app"><a href="#create-craco-config-for-create-react-app" style="margin-right: 10px">#</a></a>Create craco config for <code>create-react-app</code></h3>
<p>As of writing, with <code>webpack</code> v5/<code>create-react-app</code> v5, you have to customize
the <code>create-react-app</code> to add extra <code>webpack</code> flags.</p>
<p>So, <code>yarn add @craco/craco</code> in the app folder, then create this <code>craco.config.js</code></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">webpack</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">configure</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">config</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #91B4D5">const</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">wasmExtensionRegExp</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=</span><span style="color: #5FB3A1"> </span><span style="color: #A6ACCD">/</span><span style="color: #5FB3A1">\.wasm</span><span style="color: #A6ACCD">$/</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">extensions</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">push</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">.wasm</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">experiments</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">syncWebAssembly</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">rules</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">rule</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">        </span><span style="color: #A6ACCD">;(</span><span style="color: #E4F0FB">rule</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">oneOf</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">||</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">[]).</span><span style="color: #E4F0FBD0">forEach</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">oneOf</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">          </span><span style="color: #A6ACCD">if</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">oneOf</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">===</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">asset/resource</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">            </span><span style="color: #E4F0FB">oneOf</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exclude</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">push</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">wasmExtensionRegExp</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">          </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #ADD7FF">        </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #5DE4C7C0">return</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">config</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Note: this thread helped me to create the craco config
<a href="https://github.com/Emurgo/cardano-serialization-lib/issues/295">https://github.com/Emurgo/cardano-serialization-lib/issues/295</a></p>
<p>Also see footnote 2 for more info</p>
<h3 id="final-step-use-async-import-to-import-the-hello-wasm-greeting"><a aria-hidden="true" tabindex="-1" href="#final-step-use-async-import-to-import-the-hello-wasm-greeting"><a href="#final-step-use-async-import-to-import-the-hello-wasm-greeting" style="margin-right: 10px">#</a></a>Final step: Use async <code>import()</code> to import the <code>hello-wasm</code> greeting</h3>
<p>We use a <code>useEffect</code> hook to import the code asynchronously, and can call our
rust function, <code>greet</code>, from javascript!</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">App</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setGreeting</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">useEffect</span><span style="color: #A6ACCD">(() </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    ;(</span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">import</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello-wasm</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">greet</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FBD0">setGreeting</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">greeting</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })()</span></span>
<span class="line"><span style="color: #A6ACCD">  }, [])</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    &#x3C;</span><span style="color: #A6ACCDC0">div</span><span style="color: #A6ACCD">></span></span>
<span class="line"><span style="color: #A6ACCD">      &#x3C;</span><span style="color: #A6ACCDC0">h1</span><span style="color: #A6ACCD">></span><span style="color: #E4F0FB">rust</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">monorepo</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">demo</span><span style="color: #91B4D5">&#x3C;/</span><span style="color: #E4F0FB">h1</span><span style="color: #91B4D5">></span></span>
<span class="line"><span style="color: #A6ACCD">      &#x3C;</span><span style="color: #A6ACCDC0">h2</span><span style="color: #A6ACCD">></span><span style="color: #E4F0FB">Greeting</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">from</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">wasm</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {!</span><span style="color: #A6ACCDC0">greeting</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">?</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Loading...</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">greeting</span><span style="color: #A6ACCD">}&#x3C;/</span><span style="color: #A6ACCDC0">h2</span><span style="color: #A6ACCD">></span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">&#x3C;/</span><span style="color: #E4F0FB">div</span><span style="color: #91B4D5">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>In order to greet an arbitrary person, I modified this slightly in the live
demo. See
<a href="https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx">https://github.com/cmdcolin/rust_react_monorepo_template/blob/master/app/src/App.tsx</a></p>
<h3 id="run-the-app"><a aria-hidden="true" tabindex="-1" href="#run-the-app"><a href="#run-the-app" style="margin-right: 10px">#</a></a>Run the app!</h3>
<p>Go into the <code>app</code> folder, and then run <code>yarn start</code></p>
<h2 id="result"><a aria-hidden="true" tabindex="-1" href="#result"><a href="#result" style="margin-right: 10px">#</a></a>Result!</h2>
<p>A screenshot of the app, showing the string "Hello Colin" which is generated
via rust and wasm</p>
<p><img src="/media/rust_wasm_demo.png" alt=""></p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>My main aim was to demonstrate creating a "simple" monorepo setup showing how
you can integrate Rust+WASM and React. Feel free to ask me any questions and go
check out the repo!</p>
<p><a href="https://github.com/cmdcolin/rust_react_monorepo_template">https://github.com/cmdcolin/rust_react_monorepo_template</a></p>
<h2 id="other-resources"><a aria-hidden="true" tabindex="-1" href="#other-resources"><a href="#other-resources" style="margin-right: 10px">#</a></a>Other resources</h2>
<p>This article is quite helpful also, but uses a file:/ reference in their
<code>package.json</code> while my approach uses a monorepo, it is fundamentally quite
similar though!
<a href="https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm">https://tkat0.github.io/posts/how-to-create-a-react-app-with-rust-and-wasm</a></p>
<h2 id="footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files"><a aria-hidden="true" tabindex="-1" href="#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files"><a href="#footnote-1-the-hello-wasm-folder-is-a-npm-package-with-wasm-files" style="margin-right: 10px">#</a></a>Footnote 1: The <code>hello-wasm</code> folder IS a npm package with wasm files</h2>
<p>The <code>hello-wasm</code> folder can be published to NPM by itself. When consumers of
the package import the module, they would receive <code>pkg/index.js</code> from the
<code>main</code> field in <code>package.json</code>, and then <code>pkg/index.js</code> in turn imports the
<code>index.wasm</code> file. Then it is up to the consumers bundler to package that
correctly.</p>
<h2 id="footnote-2-bundlers-and-wasm"><a aria-hidden="true" tabindex="-1" href="#footnote-2-bundlers-and-wasm"><a href="#footnote-2-bundlers-and-wasm" style="margin-right: 10px">#</a></a>Footnote 2: Bundlers and wasm</h2>
<p>As of writing, I am using <code>webpack</code> v5 (part of <code>create-react-app</code> v5), which has
"native support" for wasm. Still, it is hidden behind a flag called
"experiments" (see first google result for webpack wasm here
<a href="https://webpack.js.org/configuration/experiments/">https://webpack.js.org/configuration/experiments/</a>) so I use <code>@craco/craco</code> to
modify the <code>webpack</code> config of <code>create-react-app</code> v5 to add this.</p>
<p>Note also: The first time I wrote this, I used <code>webpack</code> v4, which used a
slightly different workflow (used a special <code>webpack</code> loader called
<code>wasm-loader</code>)</p>
<p>You can also likely use similar techniques described in this article to
incorporate into <code>next.js</code> since it also uses <code>webpack</code>. If you have info on
how other bundlers use wasm, feel free to leave a comment.</p>
<h2 id="footnote-3-why-do-i-have-to-use-async-imports"><a aria-hidden="true" tabindex="-1" href="#footnote-3-why-do-i-have-to-use-async-imports"><a href="#footnote-3-why-do-i-have-to-use-async-imports" style="margin-right: 10px">#</a></a>Footnote 3: Why do I have to use async imports?</h2>
<p>Fundamentally, the <code>.wasm</code> file has to be fetched asynchronously before it can
be run (it is not in my experience e.g. embedded as binary data inside a js
file) which means it would be difficult to use the wasm code as a synchronous
import.</p>
<p>There are hints that this may be possible but it would rely on the bundler
embedding the wasm code in the js itself, or maybe top-level-await. If anyone
has more info, feel free to leave a comment!</p>
<h2 id="footnote-4-build-setup"><a aria-hidden="true" tabindex="-1" href="#footnote-4-build-setup"><a href="#footnote-4-build-setup" style="margin-right: 10px">#</a></a>Footnote 4: Build setup</h2>
<p>The <code>hello-wasm</code> package does not automatically recompile when we are running
e.g. <code>yarn start</code> in the <code>app</code> folder. Therefore, changes to the rust requires
you to manually run <code>yarn build</code> in the <code>hello-wasm</code> folder. Just something to
be aware of</p>
<h2 id="footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky"><a aria-hidden="true" tabindex="-1" href="#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky"><a href="#footnote-5-my-first-experience-with-trying-to-make-this-work-was-rocky" style="margin-right: 10px">#</a></a>Footnote 5: My first experience with trying to make this work was rocky!</h2>
<p>I first created an example of rust+wasm+react almost two years ago when
creating a fractal viewer
<a href="https://github.com/cmdcolin/logistic_chaos_map">https://github.com/cmdcolin/logistic_chaos_map</a>
and it has some development notes on the stumbling blocks I faced
<a href="https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md">https://github.com/cmdcolin/logistic_chaos_map/blob/master/NOTES.md</a></p>
<h2 id="footnote-6-i-thought-you-said-typescript-too"><a aria-hidden="true" tabindex="-1" href="#footnote-6-i-thought-you-said-typescript-too"><a href="#footnote-6-i-thought-you-said-typescript-too" style="margin-right: 10px">#</a></a>Footnote 6: I thought you said typescript too</h2>
<p>Yep! The <code>hello-wasm</code> example generates typescript <code>.d.ts</code> files! Check out the
<code>hello-wasm/pkg/</code> folder after you build it! This was none of my doing, just a
built-in feature. PS: I highly recommend inspecting the <code>pkg</code> folder that is
produced in the <code>hello-wasm</code> build to help understand the details. I also
recommend reading the <a href="https://rustwasm.github.io/wasm-bindgen/">https://rustwasm.github.io/wasm-bindgen/</a> docs and if you
are getting started with rust, read the Rust Book along with doing rustlings
<a href="https://github.com/rust-lang/rustlings">https://github.com/rust-lang/rustlings</a></p>
<h2 id="footnote-7-another-resource"><a aria-hidden="true" tabindex="-1" href="#footnote-7-another-resource"><a href="#footnote-7-another-resource" style="margin-right: 10px">#</a></a>Footnote 7: Another resource</h2>
<p>This article was posted on reddit and is also a great resource especially about
sync vs async webpack loading schemes for wasm</p>
<p><a href="https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/">https://canvasapp.com/blog/building-modern-web-apps-with-rust-wasm-and-webpack/</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Photos of vacation]]></title>
            <link>https://cmdcolin.github.io/posts/2022-08-21-vacation</link>
            <guid>https://cmdcolin.github.io/posts/2022-08-21-vacation</guid>
            <pubDate>Sun, 21 Aug 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>From Aug 1st->Aug 18 I did a road trip from the South Carolina to New Mexico. I
flew out and met my partner who had driven there earlier to help her mom out at
the house.</p>
<p>It was a great trip</p>
<p>Route stops</p>
<ul>
<li>Charleston, SC (Several days)</li>
<li>Charlotte, NC (Several days, Wedding)</li>
<li>Montgomery, AL (One night)</li>
<li>New Orleans, LA (Several days)</li>
<li>Houston, TX (One night)</li>
<li>Junction, TX (One night)</li>
<li>Alpine, TX (One night)</li>
<li>Valentine, TX (One night)</li>
<li>Truth or Consequences, NM (One night)</li>
<li>Albuquerque, NM (Home)</li>
</ul>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220803_155653295.resized.jpg" alt=""></p>
<p>amazing results from the sea turtle rescue at the charleston, SC aquarium</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_145459605_HDR.resized.jpg" alt=""></p>
<p>my partner Leah at edisto beach state park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151340018_HDR.resized.jpg" alt=""></p>
<p>more edisto, the beach has many dead and standing dead trees on the beach</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151800531_HDR.resized.jpg" alt=""></p>
<p>more edisto</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220805_151805593_HDR.resized.jpg" alt=""></p>
<p>more edisto</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_093129359.resized.jpg" alt=""></p>
<p>wetlands near bowen's island SC</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220806_094813656_HDR.resized.jpg" alt=""></p>
<p>a worn down house with a mural, and fallen traffic signal in SC</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220807_173529613_HDR.resized.jpg" alt=""></p>
<p>photo of a butterfly from wedding site near charlotte, NC</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220808_103832831_HDR.resized.jpg" alt=""></p>
<p>our weird airbnb cabin in near charlotte, SC which was a civil war era cabin from virginia moved in it's entirety to NC</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_174740904_HDR.resized.jpg" alt=""></p>
<p>new orleans skyline from a weird industrial art park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_182035943_HDR.resized.jpg" alt=""></p>
<p>care bear in new orleans</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220809_190950114.resized.jpg" alt=""></p>
<p>reality continues to ruin my life</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220810_121137729.resized.jpg" alt=""></p>
<p>wild "surf n turf po boy" (right) and a more conventional muffalata sandwich (left) in new orleans, had while hiding from a rain storm</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140043783_HDR.resized.jpg" alt=""></p>
<p>city park, new orleans</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_140543522_HDR.resized.jpg" alt=""></p>
<p>large oak, new orleans city park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_142427022.resized.jpg" alt=""></p>
<p>apple snail eggs in new orleans city park, an invasive species <a href="https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html">https://www.theadvocate.com/baton_rouge/entertainment_life/home_garden/article_775fb018-5268-11ea-8f75-f7e8fb8525fe.html</a></p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_153012540.resized.jpg" alt=""></p>
<p>placard describing "pit beef", a baltimore sandwich from the southern museum of cooking</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154040098.resized.jpg" alt=""></p>
<p>engraving describing some native american beach early "bbq" method (gator and dog possibly visible) from the southern museum of cooking</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154404713.resized.jpg" alt=""></p>
<p>history of bbq from the southern museum of cooking</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220811_154549161.resized.jpg" alt=""></p>
<p>hot brown sandwich, placard from the southern museum of cooking</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_110617743.resized.jpg" alt=""></p>
<p>our airbnb in new orleans, in a very cool mansion in the garden district</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113038243.resized.jpg" alt=""></p>
<p>more airbnb</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113224854.resized.jpg" alt=""></p>
<p>more airbnb</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220812_113234259.resized.jpg" alt=""></p>
<p>more airbnb</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220813_211534759.resized.jpg" alt=""></p>
<p>our airbnb hosts in junction, TX gave us tickets to the rodeo there, a one night only event. lot's of cowboy hats</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_133823204_HDR.resized.jpg" alt=""></p>
<p>goats near socorro caverns</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220814_135951677_HDR.resized.jpg" alt=""></p>
<p>peacocks (including an albino?) near socorro caverns</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_092445801_HDR.resized.jpg" alt=""></p>
<p>mule ears, big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_101452396_HDR.resized.jpg" alt=""></p>
<p>dung beetle, big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_102214238_HDR.resized.jpg" alt=""></p>
<p>canyon at big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_191014795_HDR.resized.jpg" alt=""></p>
<p>fire in valentine, tx. note, my feet are very muddy from trying to wade in the rio grande</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220815_203037340.resized.jpg" alt=""></p>
<p>cooking on the fire in valentine, TX</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220816_125951579_HDR.resized.jpg" alt=""></p>
<p>metal grave placard, el paso, TX</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220817_092022789_HDR.resized.jpg" alt=""></p>
<p>duck pond, truth or consequences, NM</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220820_185137107.resized.jpg" alt=""></p>
<p>back in ABQ, fermenting some hot peppers we got on trip</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7091.jpg" alt=""></p>
<p>me in city park, new orleans</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7378.jpg" alt=""></p>
<p>me at the mule ears, big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7384.JPG" alt=""></p>
<p>cows at big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7391.jpg" alt=""></p>
<p>(wild?) horses at big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7403.jpg" alt=""></p>
<p>me in the canyon at big bend nat'l park</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_7663.jpg" alt=""></p>
<p>beezle celebrating my birthday (8/17) on return to ABQ</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Photos of life]]></title>
            <link>https://cmdcolin.github.io/posts/2022-07-29-happy</link>
            <guid>https://cmdcolin.github.io/posts/2022-07-29-happy</guid>
            <pubDate>Fri, 29 Jul 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I started this post to try to talk about things that make me happy. It's not
really a happiness though that I wanted to talk about, it's just about living
life...sometimes it's a struggle and that can be rewarding also. So here are
some photos of everyday things</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220619_201622482.resized.jpg" alt=""></p>
<p>sunset from backyard. my house is adjacent to an "abandoned" golf course so it's just a big open space</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220622_100019949.resized.jpg" alt=""></p>
<p>a dog named remy i saw at the dog park visiting parents. remy has a funny habit of herding other dogs around</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220624_210922889.resized.jpg" alt=""></p>
<p>the sky from my parents backyard</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220626_071349516.resized.jpg" alt=""></p>
<p>my parents dogs zoe (right) and tux (left). my parents walk them everyday and it's great to join them</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220627_145201639_HDR.resized.jpg" alt=""></p>
<p>the place I live is a house that we rent. unfortunately and the owners are letting the place fall apart due to leaks in the roof</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220704_133123492.resized.jpg" alt=""></p>
<p>a salad I made with jicama, carrot, greens, and orange on july 4th</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220705_200242153_HDR.resized.jpg" alt=""></p>
<p>some hazy sun before a rainstorm in NM</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220705_201600095_HDR.resized.jpg" alt=""></p>
<p>some sun after the rain</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_111938701_HDR.resized.jpg" alt=""></p>
<p>cooking purple potatos</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_115455797.resized.jpg" alt=""></p>
<p>after cooking the purple potatos</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220709_175755642.resized.jpg" alt=""></p>
<p>hummingbird hanging out in the backyard</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220710_175851539_HDR.resized.jpg" alt=""></p>
<p>a fresno pepper from my weird backyard garden (all plants potted with these felt bags, works fairly ok)</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220713_200957865.resized.jpg" alt=""></p>
<p>beezle hanging out in his favorite spot, on top of a box spring in the hallway</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220714_200346243.resized.jpg" alt=""></p>
<p>the belt I made for myself from a piece of leather that i found in a shop when I visited toronto pre-pandemic (more pics from making it <a href="https://imgur.com/a/Ff5Mn3l">https://imgur.com/a/Ff5Mn3l</a>)</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220715_230433785.resized.jpg" alt=""></p>
<p>fruit and yogurts</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220716_132939371.resized.jpg" alt=""></p>
<p>making a drip irrigation system for my weird garden. the sunrise timer was particularly funny. I put the battery pack in backwards and it didn't work, and took it apart to fully understand the mechanism (had to see how the battery contacts touched the inside of the system to see it)</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220717_204303427_HDR.resized.jpg" alt=""></p>
<p>pork belly</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220717_210017665.resized.jpg" alt=""></p>
<p>bibimbap with pork belly</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220718_174420132_HDR.resized.jpg" alt=""></p>
<p>some little tomatos. these were eaten by catepillars shortly after taking these. battling these little critters has been a learning experience</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_173156813.resized.jpg" alt=""></p>
<p>chicken thighs</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_173426354.resized.jpg" alt=""></p>
<p>jamaican jerk style sauce</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_181601967_HDR.resized.jpg" alt=""></p>
<p>using a meat thermometer+grill...been a real level-up</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220719_184903147.resized.jpg" alt=""></p>
<p>cooked, perhaps overly so, but quite juicy still due to brining</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220720_174949541_HDR.resized.jpg" alt=""></p>
<p>my funny backyard setup, the bowl makes little sounds when it rains (sound recording <a href="https://cmdcolinphotos.s3.amazonaws.com/out.mp3">https://cmdcolinphotos.s3.amazonaws.com/out.mp3</a>)</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220722_201326050_HDR.resized.jpg" alt=""></p>
<p>synthesizering</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220724_104240569.resized.jpg" alt=""></p>
<p>cooked down some strawberries that my neighbor gave me, she's awesome</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_095848819_HDR.resized.jpg" alt=""></p>
<p>beezle in his tree</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_111117447.resized.jpg" alt=""></p>
<p>my brother came to visit me, synthesizering around the breakfast table</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_111129150.resized.jpg" alt=""></p>
<p>beezle playing the synth</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220725_164816159.resized.jpg" alt=""></p>
<p>making some kimchi and saurkraut. these got quite bubbly and active, quite fun to make. should get some airlock jars</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220726_162730132_HDR.resized.jpg" alt=""></p>
<p>my brother and I visiting the dry river bed of the rio grande in south albuquerque</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220726_163019069_HDR.resized.jpg" alt=""></p>
<p>more dry rio grande. note that many the irrigation ditches around the rio are flowing full...</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220728_170257266_HDR.resized.jpg" alt=""></p>
<p>the rio grande north of albuquerque is still flowing</p>
<p><img src="https://cmdcolinphotos.s3.amazonaws.com/IMG_20220728_174207531_HDR.resized.jpg" alt=""></p>
<p>very tiny purple flowers</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Watch out for your pinky finger (AND elbow posture)]]></title>
            <link>https://cmdcolin.github.io/posts/2022-07-08-pinky</link>
            <guid>https://cmdcolin.github.io/posts/2022-07-08-pinky</guid>
            <pubDate>Fri, 08 Jul 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have, for several months, suffered a twinge in my left pinky finger from
excessive strain due to hand contortions largely caused by keyboard use.</p>
<p>Particularly troublesome in my opinion has been the use of the left-ctrl key
for keyboard shortcuts.</p>
<p>Update Sep 2022: I have also come to realize that this can be strongly related
to elbow posture, so I added sections on this.</p>
<h3 id="programs-that-are-particularly-troublesome-for-the-left-pinky"><a aria-hidden="true" tabindex="-1" href="#programs-that-are-particularly-troublesome-for-the-left-pinky"><a href="#programs-that-are-particularly-troublesome-for-the-left-pinky" style="margin-right: 10px">#</a></a>Programs that are particularly troublesome for the left pinky</h3>
<ul>
<li>many programs: ctrl+c, ctrl+v, ctrl+x, ctrl+f</li>
<li>terminal: shift+ctrl+v to paste</li>
<li>tmux: default ctrl+somekey as leader</li>
<li>chrome: ctrl+w to close tab, ctrl+t for new tab, ctrl+r for refresh,
shift+ctrl+r for cache-cleared refresh</li>
<li>vim: using esc key on the far left, custom configurations using ctrl key e.g.
ctrl+p (I also had ctrl+g, ctrl+f for custom file finders for awhile but no
longer)</li>
</ul>
<p>In order to make these movements, particularly if you use the left hand to do
it, you have to contort your hand pretty drastically. Chrome is particularly
bad because it is not possible(?) to reconfigure their keyboard shortcuts.</p>
<p>Unfortunately, I did not really listen to warning signs from my hand, and now
there is a mild pain from almost any keyboard usage</p>
<h3 id="general-approaches-to-help-out"><a aria-hidden="true" tabindex="-1" href="#general-approaches-to-help-out"><a href="#general-approaches-to-help-out" style="margin-right: 10px">#</a></a>General approaches to help out</h3>
<ul>
<li>Take time out of my day e.g. pomodoro to take rests</li>
<li>Do hand exercises and stretches when idle</li>
<li>Massages to the muscles</li>
<li>Using touch typing, making my hands float above the keyboard when typing</li>
<li>Avoiding curling up the pinky while typing, keep hand relaxed</li>
<li>Use both hands to execute shortcuts instead of contorting left hand</li>
</ul>
<h3 id="update-avoiding-elbowulnar-nerve-strain"><a aria-hidden="true" tabindex="-1" href="#update-avoiding-elbowulnar-nerve-strain"><a href="#update-avoiding-elbowulnar-nerve-strain" style="margin-right: 10px">#</a></a>Update: Avoiding elbow/ulnar nerve strain</h3>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Guyon_syndrome_pain_distribution.jpg/1280px-Guyon_syndrome_pain_distribution.jpg" alt=""></p>
<p>Picture from Wikipedia <a href="https://en.wikipedia.org/wiki/Ulnar_tunnel_syndrome">https://en.wikipedia.org/wiki/Ulnar_tunnel_syndrome</a></p>
<p>I have come to realize that the pinky finger and ring finger are strongly
related to the elbow and ulnar nerve, also known as your funnybone. This can
cause issues sometimes called "ulnar tunnel" or "cubital tunnel" which is
relatively distinct from "carpal tunnel" and is more strongly related to the
ring and pinky fingers! You can get ring/pinky pain from compression of the
nerve near the wrist or near the elbow, but the elbow is quite common.</p>
<p>Some notes about improving elbow ergonomics</p>
<ul>
<li>Avoid applying too much pressure to elbows on armrests (ulnar nerve) while at
desk</li>
<li>Avoid typing with elbows bent e.g. straighten arms</li>
<li>Avoid sleeping with elbows super bent e.g. I get this sleeping on my stomach
with my elbows under my body. Use ulnar/elbow brace for sleeping. I am
ordering one of these to try out</li>
</ul>
<h3 id="technical-approaches-and-key-remappings-for-pinky-ergonomics"><a aria-hidden="true" tabindex="-1" href="#technical-approaches-and-key-remappings-for-pinky-ergonomics"><a href="#technical-approaches-and-key-remappings-for-pinky-ergonomics" style="margin-right: 10px">#</a></a>Technical approaches and key remappings for pinky ergonomics</h3>
<ul>
<li>Remap caps lock to left+ctrl. This is a common one you hear recommended and
it may help, and it has less contortion, particularly for chrome with one
hand use. So you can say capslock+w, capslock+t, but it is still using pinky
and can be stressful if not careful (capslock+w fine, capslock+t still
contortion if done with one hand)</li>
<li>More use of the right-hand-only shortcuts or at least avoiding using the left
pinky for shortcuts. I don't have many of these but will look into retraining
myself for some of these. I am testing out right ctrl+] for leader in tmux,
and - and = for split window horizontal and vertical</li>
</ul>
<h3 id="things-still-to-try-better-ergonomics-and-gadgets"><a aria-hidden="true" tabindex="-1" href="#things-still-to-try-better-ergonomics-and-gadgets"><a href="#things-still-to-try-better-ergonomics-and-gadgets" style="margin-right: 10px">#</a></a>Things still to try: better ergonomics and gadgets</h3>
<p>In truth, I type a lot on a laptop with a poor keyboard layout, and often use
it away from a desk. I think improving my desk ergonomics could help, and
getting a fancy keyboard and maybe mouse (though I much prefer a touchpad)
could be a next frontier, along with ensuring proper desk height, chair height,
etc.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>It is not great to get to this point. My hand posture and body posture at the
keyboard has been bad for years, and it has caught up to me. Learning the
connection with my elbow and ulnar nerve was very enlightening for my
situation. The common problem many people discuss is carpal tunnel related, but
the ulnar is actually a relatively separate problem, though related in many
ways too. I recommend people be aware of contorting their hand or applying
pressure on their elbows too much, lest they suffer the same!</p>
<h2 id="any-more-ideas"><a aria-hidden="true" tabindex="-1" href="#any-more-ideas"><a href="#any-more-ideas" style="margin-right: 10px">#</a></a>Any more ideas?</h2>
<p>Let me know of ways you take care of your hands (hardware, software, or
otherwise)</p>
<h2 id="other-resources"><a aria-hidden="true" tabindex="-1" href="#other-resources"><a href="#other-resources" style="margin-right: 10px">#</a></a>Other resources</h2>
<ul>
<li>
<p>See this post by Matt Might for some more resources
<a href="https://matt.might.net/articles/preventing-and-managing-rsi/">https://matt.might.net/articles/preventing-and-managing-rsi/</a></p>
</li>
<li>
<p>Ulnar tunnel <a href="https://en.wikipedia.org/wiki/Ulnar_tunnel_syndrome">https://en.wikipedia.org/wiki/Ulnar_tunnel_syndrome</a></p>
</li>
</ul>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[You may not need a bundler for your NPM library]]></title>
            <link>https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</link>
            <guid>https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</guid>
            <pubDate>Fri, 27 May 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have seen a couple threads on twitter where people complain about the
difficulty with publishing NPM libraries or ask what starter kit they should
use (or, people recommended starter packs anyways)</p>
<p>Example threads</p>
<ul>
<li><a href="https://twitter.com/cramforce/status/1513903035197526017">https://twitter.com/cramforce/status/1513903035197526017</a></li>
<li><a href="https://twitter.com/oleg008/status/1510006191296061441">https://twitter.com/oleg008/status/1510006191296061441</a></li>
<li><a href="https://twitter.com/iansu/status/1524860613943382017">https://twitter.com/iansu/status/1524860613943382017</a></li>
<li><a href="https://twitter.com/mpocock1/status/1525075901905522691">https://twitter.com/mpocock1/status/1525075901905522691</a></li>
</ul>
<p>One thing that is notable to me in these threads is that people often recommend
that you use a bundler (a program that combines multiple src files into a
single or fewer output files) when developing a library</p>
<p>Examples of starter packs suggested in these threads that use bundlers</p>
<ul>
<li><code>microbundle</code> - <a href="https://github.com/developit/microbundle">https://github.com/developit/microbundle</a> - uses rollup</li>
<li><code>esno</code> - <a href="https://www.npmjs.com/package/esno">https://www.npmjs.com/package/esno</a> - uses esbuild</li>
<li><code>unbuild</code> - <a href="https://github.com/unjs/unbuild">https://github.com/unjs/unbuild</a> - uses rollup</li>
<li><code>preconstruct</code> - <a href="https://github.com/preconstruct/preconstruct">https://github.com/preconstruct/preconstruct</a> - uses rollup</li>
<li><code>tsup</code> - <a href="https://github.com/egoist/tsup">https://github.com/egoist/tsup</a> - uses esbuild</li>
<li><code>tsdx</code> - <a href="https://github.com/jaredpalmer/tsdx">https://github.com/jaredpalmer/tsdx</a> - uses rollup</li>
<li><code>vite library mode</code> - <a href="https://vitejs.dev/guide/build.html#library-mode">https://vitejs.dev/guide/build.html#library-mode</a> - uses rollup</li>
<li><code>packemon</code> - <a href="https://github.com/milesj/packemon">https://github.com/milesj/packemon</a> - uses rollup</li>
<li><code>ts-library-template</code> - <a href="https://github.com/shortercode/ts-library-template">https://github.com/shortercode/ts-library-template</a> - uses rollup</li>
<li><code>parcel</code> - <a href="https://twitter.com/devongovett/status/1524944991402999810">https://twitter.com/devongovett/status/1524944991402999810</a> - uses parcel</li>
<li><code>dts</code> - <a href="https://weiran-zsd.github.io/dts-cli/">https://weiran-zsd.github.io/dts-cli/</a> - uses rollup</li>
<li><code>pkgroll</code> - <a href="https://github.com/privatenumber/pkgroll">https://github.com/privatenumber/pkgroll</a> - uses rollup</li>
<li><code>mkdist</code> - <a href="https://github.com/unjs/mkdist">https://github.com/unjs/mkdist</a> - referenced by <code>unbuild</code>, uses esbuild</li>
</ul>
<p>Not using bundlers</p>
<ul>
<li><code>gts</code> - <a href="https://github.com/google/gts">https://github.com/google/gts</a></li>
<li><code>ts-react-toolbox</code> - <a href="https://github.com/zzarcon/ts-react-toolbox/">https://github.com/zzarcon/ts-react-toolbox/</a></li>
</ul>
<p>In summary 2/15 do not use a bundler, 13/15 do use a bundler. Sidenote: webpack
notably absent. Sidenote 2: I don't necesarily give praise to the two not using
bundlers, just saying they exist.</p>
<h2 id="why-would-you-not-want-a-bundler-for-your-library"><a aria-hidden="true" tabindex="-1" href="#why-would-you-not-want-a-bundler-for-your-library"><a href="#why-would-you-not-want-a-bundler-for-your-library" style="margin-right: 10px">#</a></a>Why would you <em>NOT</em> want a bundler for your library?</h2>
<p>My main argument is that the consumer of your library is the one that should
use a bundler if it is relevant to them. If the library uses a bundler:</p>
<ul>
<li>in the best case, it has no impact on the consumer</li>
<li>in the worst case, it affects the complexity of your library and makes
possible limitations for your consumers also.</li>
</ul>
<p>An example where it can actually create limitations, you might consider code
splitting with async <code>import()</code>. If you create a single file bundle, then the
consumer of your library may not be able to do code splitting properly via
async <code>import()</code></p>
<h2 id="why-would-you-maybe-want-a-bundler-for-your-library"><a aria-hidden="true" tabindex="-1" href="#why-would-you-maybe-want-a-bundler-for-your-library"><a href="#why-would-you-maybe-want-a-bundler-for-your-library" style="margin-right: 10px">#</a></a>Why would you <em>MAYBE</em> want a bundler for your library</h2>
<p>If you really care about producing a <code>UMD</code> bundle that can be used in a script
tag, maybe you want a bundler, but the future does not seem to be in <code>UMD</code>.
One other possible bundle type is maybe you like the idea of a single file
<code>ESM</code> module. It is similar where you could maybe reference this from a script
tag with type module, but this seems like a niche usage. For example, you
would still have to consider:</p>
<ul>
<li>If you are not bundling dependencies, then what is the benefit of using a
bundler?</li>
<li>If you are bundling dependencies, you are not allowing people to get updates
to your sub-dependencies with semver!</li>
</ul>
<p>Add-on: Another concern brought up by users in discussion thread: There is a
cost to having many small files, e.g. in app startup cost on serverless or any
nodejs application to loading many small files off disk. To me, this is an app
level concern, similar to bundling for the browser though.</p>
<h2 id="my-suggestion-no-bundler-no-starter-pack-just-tsc"><a aria-hidden="true" tabindex="-1" href="#my-suggestion-no-bundler-no-starter-pack-just-tsc"><a href="#my-suggestion-no-bundler-no-starter-pack-just-tsc" style="margin-right: 10px">#</a></a>My suggestion: no bundler, no starter pack, just <code>tsc</code></h2>
<p>I'd recommend just compiling your code with <code>tsc</code>, no bundler involved. This
way, you can develop with typescript, it will output <code>js</code> files, and you can
directly deploy a <code>dist</code> folder of <code>js</code> files to NPM.</p>
<h3 id="example-packagejson"><a aria-hidden="true" tabindex="-1" href="#example-packagejson"><a href="#example-packagejson" style="margin-right: 10px">#</a></a>Example <code>package.json</code></h3>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">yourlib</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist/index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">rimraf dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">prebuild</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">preversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">postversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">git push --follow-tags</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">rimraf</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^3.0.2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.6.2</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h4 id="features-of-the-above-packagejson"><a aria-hidden="true" tabindex="-1" href="#features-of-the-above-packagejson"><a href="#features-of-the-above-packagejson" style="margin-right: 10px">#</a></a>Features of the above <code>package.json</code></h4>
<ul>
<li>We can use a single command, <code>yarn publish</code> to publish to npm</li>
<li>The single <code>yarn publish</code> automatically runs <code>clean</code> and <code>build</code> via
<code>preversion</code>, then <code>postversion</code>, which pushes the tag to the remote repo</li>
<li>The <code>"files": ["dist", "src"]</code> refers to publishing the <code>dist</code> and <code>src</code>
directories, and src is used for the <code>sourceMap</code></li>
</ul>
<h3 id="example-tsconfigjson"><a aria-hidden="true" tabindex="-1" href="#example-tsconfigjson"><a href="#example-tsconfigjson" style="margin-right: 10px">#</a></a>Example<code> tsconfig.json</code></h3>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">include</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">compilerOptions</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">target</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">es2018</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">outDir</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">lib</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dom</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esnext</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">declaration</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">moduleResolution</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">sourceMap</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">strict</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">esModuleInterop</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h4 id="features-of-the-above-tsconfigjson"><a aria-hidden="true" tabindex="-1" href="#features-of-the-above-tsconfigjson"><a href="#features-of-the-above-tsconfigjson" style="margin-right: 10px">#</a></a>Features of the above <code>tsconfig.json</code></h4>
<ul>
<li>Uses <code>"moduleResolution": "node"</code> - this is not pure-ESM because pure-ESM
expects you to import filenames with their file extension, while node module
resolution can import extensionless paths, but node module resolution
generally works well with consumers that use bundlers themselves</li>
<li>Uses <code>"target": "es2018"</code> - This is does a small amount of transpilation of
super modern features, but would generally not require your users to
babel-ify their <code>node_modules</code> if they consume your library</li>
</ul>
<h2 id="what-about-testing"><a aria-hidden="true" tabindex="-1" href="#what-about-testing"><a href="#what-about-testing" style="margin-right: 10px">#</a></a>What about testing?</h2>
<p>Adding testing is not immediately solved by the above, but bundling doesn't
really help testing anyways. It's just a starter pack feature we can add on.
Some options you have include</p>
<ul>
<li>Use <code>ts-jest</code></li>
<li>Use <code>jest</code> on it's own, plus a <code>babel</code> config with <code>@babel/preset-typescript</code></li>
<li>Use <code>jest</code> on it's own, run over the compiled output without a <code>babel</code> config</li>
<li>Use <code>vitest</code></li>
<li>Possibly something else? Node now has a built-in test runner. It will be a
slow road to adoption but might become more popular over time
<a href="https://fusebit.io/blog/node-testing-comes-to-core/">https://fusebit.io/blog/node-testing-comes-to-core/</a></li>
</ul>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>It is tempting to have nice zero-config solutions and starter kits, but to me,
it is not really beneficial to use the bundler aspect of many of these for
publishing to NPM. Am I wrong? Let me know if I am.</p>
<p>Also, these starter kits may not be maintained for perpetuity. Our team used
<code>tsdx</code> for some time, but it was not maintained well, and used old typescript
version 3.x, and it ended up being hard to remove from our codebase. Learning
the basic tools like <code>tsc</code> will help</p>
<h2 id="footnote-1-shipping-pure-esm"><a aria-hidden="true" tabindex="-1" href="#footnote-1-shipping-pure-esm"><a href="#footnote-1-shipping-pure-esm" style="margin-right: 10px">#</a></a>Footnote 1: Shipping "pure-ESM"</h2>
<p>Do you want to make a pure-ESM package? Then you do not want to use
<code>"moduleResolution": "node"</code> in <code>tsconfig.json</code>, and you will want to set
<code>"type": "module"</code> in <code>package.json</code>. You may also need to explicitly import
with <code>.js</code> extensions in your source code, even if you write <code>.ts</code>. This is
awkward, and something the community is still grappling with.</p>
<p>If you have ever stumbled on this topic, you will probably want to see this
link
<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>
<h2 id="footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm"><a aria-hidden="true" tabindex="-1" href="#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm"><a href="#footnote-2-shipping-esm-and-commonjs-side-by-side-without-going-pure-esm" style="margin-right: 10px">#</a></a>Footnote 2: Shipping ESM and CommonJS side by side without going "pure-ESM"</h2>
<p>It can be tricky to go pure-ESM, but you can go most of the way there by using
both the "main" and "module" fields in package.json</p>
<ul>
<li>Compile with tsc with <code>tsc --module commonjs --outDir dist</code></li>
<li>Compile with tsc again with <code>tsc --module esnext --outDir esm</code></li>
<li>Then set "main":"dist/index.js" for node and <code>"module":"esm/index.js"</code> for
bundlers</li>
</ul>
<p>The "module" field is a field only bundlers recognizes
<a href="https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for">https://stackoverflow.com/questions/42708484/what-is-the-module-package-json-field-for</a></p>
<p>Note: This is different from the "type":"module" which marks your module as
pure-ESM!</p>
<p>I have found this technique can go a long ways towards keeping your package
compatible with nodeJS and bundlers and it does not require "export maps" or
anything which I have found to be difficult to configure</p>
<h2 id="footnote-3-learning-your-tools"><a aria-hidden="true" tabindex="-1" href="#footnote-3-learning-your-tools"><a href="#footnote-3-learning-your-tools" style="margin-right: 10px">#</a></a>Footnote 3: Learning your tools</h2>
<p>Several people on the
<a href="https://cmdcolin.github.io/posts/2022-05-04-findseddangerous">my recent post</a>
post suggested that I did not understand my tools, and that I should just learn
the tools correctly and I wouldn't have the problem I had.</p>
<p>Indeed, what I am now telling people to do in this post is similar: I am saying
"just use <code>tsc</code> by itself! Understand you tools! You may have to do more
research and create more boilerplate, but it's <strong>better</strong>".</p>
<p>Ultimately though, it's up to you to choose your tools and starter packs and
whatnot.</p>
<h2 id="footnote-4-what-does-it-look-like-when-you-compile-with-tsc"><a aria-hidden="true" tabindex="-1" href="#footnote-4-what-does-it-look-like-when-you-compile-with-tsc"><a href="#footnote-4-what-does-it-look-like-when-you-compile-with-tsc" style="margin-right: 10px">#</a></a>Footnote 4: What does it look like when you compile with tsc?</h2>
<p>When I refer to compiling with tsc above, I compile a <code>src</code> directory into a
<code>dist</code> directory</p>
<p>So if I have:</p>
<pre><code>src/index.ts
src/util.ts
src/components/Button.ts
</code></pre>
<p>Running <code>tsc</code> will output:</p>
<pre><code>dist/index.js
dist/index.d.ts
dist/index.js.map
dist/util.js
dist/util.d.ts
dist/util.js.map
dist/components/Button.js
dist/components/Button.d.ts
dist/components/Button.js.map
</code></pre>
<p>Then, the <code>dist</code> and <code>src</code> directories are published to npm which enables the
<code>sourceMaps</code> to work.</p>
<p>Note: We do not need to explicitly say where the typescript types are with
"types" in <code>package.json</code>, many starter packs do this but it is unneeded for
this package as the d.ts files are automatically found.</p>
<p>See
<a href="https://cmdcolin.github.io/posts/2021-12-31-npm-package">https://cmdcolin.github.io/posts/2021-12-31-npm-package</a>
for my article on creating a typescript package for npm</p>
<h2 id="footnote-5-other-things-people-recommend"><a aria-hidden="true" tabindex="-1" href="#footnote-5-other-things-people-recommend"><a href="#footnote-5-other-things-people-recommend" style="margin-right: 10px">#</a></a>Footnote 5: Other things people recommend</h2>
<p>Other things people recommend in the starter pack threads</p>
<ul>
<li><code>deno</code> - not clear to me how this helps when deploying to npm, but I still gotta try deno</li>
<li><code>ts-node </code> - not clear to me how this helps when deploying to npm</li>
<li><code>nx</code> - heavy monorepo-based solution</li>
<li><code>elm</code> - that's just a different thing</li>
<li><code>Typescript-Node-Starter</code> - <a href="https://github.com/microsoft/TypeScript-Node-Starter">https://github.com/microsoft/TypeScript-Node-Starter</a> - not a library, full stack framework</li>
<li><code>joystick</code> - <a href="https://github.com/CheatCode/joystick">https://github.com/CheatCode/joystick</a> - not a library, full stack framework</li>
</ul>
<h2 id="footnote-6"><a aria-hidden="true" tabindex="-1" href="#footnote-6"><a href="#footnote-6" style="margin-right: 10px">#</a></a>Footnote 6:</h2>
<p>Similar things happen if you take on dependencies of starter kits like
<code>create-react-app</code>. You become very committed to their particular way of doing
things, and can only modify their config with things like <code>rescripts</code>, <code>craco</code>
or <code>rewired</code>. If you crafted your setup with just <code>webpack</code>, you may not be so
tied down. But, I still use things like <code>create-react-app</code> because they do seem
to help me significantly. Now though, the tide seems to be turning other
directions like next.js which can do static site generation at a basic level
and extend to multiple pages more easily.</p>
<h2 id="footnote-7"><a aria-hidden="true" tabindex="-1" href="#footnote-7"><a href="#footnote-7" style="margin-right: 10px">#</a></a>Footnote 7:</h2>
<p>You may not even need <code>tsc</code> to compile your dist folder. You can literally
publish your source <code>.js</code> files as-is to NPM. This suggestion comes from
@trevmanz <a href="https://twitter.com/trevmanz/status/1534962190008172545">1</a>
<a href="https://twitter.com/trevmanz/status/1534962940348092417">2</a>. I don't
personally use this technique yet but there are many users with this workflow</p>
<p>An interesting thing is you can write in <code>.js</code> but still get <code>typescript</code> to
get type checking using <code>jsdoc</code>, just use <code>allowJs</code>/<code>checkJs</code> flags in
<code>tsconfig.json</code></p>
<h2 id="footnote-8"><a aria-hidden="true" tabindex="-1" href="#footnote-8"><a href="#footnote-8" style="margin-right: 10px">#</a></a>Footnote 8:</h2>
<p>What about React? Bundlers not needed, and not even babel is needed: you can
code your library as in <code>jsx</code> or <code>tsx</code> files and use <code>tsc</code> to compile it to
React.createElement statements or other jsx transforms.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Notes on performance profiling JS applications]]></title>
            <link>https://cmdcolin.github.io/posts/2022-05-10-performanceprofiling</link>
            <guid>https://cmdcolin.github.io/posts/2022-05-10-performanceprofiling</guid>
            <pubDate>Tue, 10 May 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Keeping your program fast is important for</p>
<ul>
<li>user satisfaction in everyday apps</li>
<li>making certain things tractable</li>
</ul>
<p>In our application, we visualize some large-ish datasets using the browser and
javascript</p>
<h2 id="the-chrome-profiler"><a aria-hidden="true" tabindex="-1" href="#the-chrome-profiler"><a href="#the-chrome-profiler" style="margin-right: 10px">#</a></a>The Chrome profiler</h2>
<p>I use the Chrome DevTools "Performance" profiler, which is a
statistical/sampling profiler
<a href="https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers">https://en.wikipedia.org/wiki/Profiling_(computer_programming)#Statistical_profilers</a></p>
<p>This means it samples at some rate and see's where in the callstack the program
is executing.</p>
<ul>
<li>If you see large rectangles in the profiler, you may have a long running
function</li>
<li>If you see many small rectangles, your small function may be called many
times</li>
</ul>
<p>Note: sometimes your function may be so fast, it is rarely or never encountered
by the sampling. It is a good thing (TM) to be this fast, but I mention it to
note that the sampling profiler does not give us a complete log of all function
calls.</p>
<h2 id="creating-a-flamegraph-from-the-chrome-profiler-results"><a aria-hidden="true" tabindex="-1" href="#creating-a-flamegraph-from-the-chrome-profiler-results"><a href="#creating-a-flamegraph-from-the-chrome-profiler-results" style="margin-right: 10px">#</a></a>Creating a flamegraph from the Chrome profiler results</h2>
<p>Note: sometimes, it is also useful to see the results as a "flamegraph" (see
<a href="https://www.brendangregg.com/flamegraphs.html">https://www.brendangregg.com/flamegraphs.html</a>)</p>
<p>The website <a href="https://www.speedscope.app/">https://www.speedscope.app/</a> can
create "flamegraph" style figures for Chrome profiling results</p>
<p>Update: Firefox actually has the concept of flamegraph built into their
profiler. In 2022, I switched to using Firefox as my daily driver, so enjoy
this built-in feature.</p>
<h2 id="stacking-up-many-small-optimizations"><a aria-hidden="true" tabindex="-1" href="#stacking-up-many-small-optimizations"><a href="#stacking-up-many-small-optimizations" style="margin-right: 10px">#</a></a>Stacking up many small optimizations</h2>
<p>Working with large datasets, sometimes your program will take a long time to
complete. Especially if you work with javascript in the browser, it is a
challenge to make things go fast. But you can use micro optimizations to help
improve performance over time.</p>
<p>For example, say a program takes 30 seconds to run on a certain dataset</p>
<p>If you do profiling and find a couple microoptimizations that give you a 15%,
10% and 5% performance improvement, then you program now takes 20 seconds to
run. That is still not instantaneous, but it is saving users a good 10 seconds.</p>
<h2 id="examples-of-micro-optimizations"><a aria-hidden="true" tabindex="-1" href="#examples-of-micro-optimizations"><a href="#examples-of-micro-optimizations" style="margin-right: 10px">#</a></a>Examples of micro optimizations</h2>
<ul>
<li>Using <code>Map</code> instead of <code>Object</code> can often get small performance boosts</li>
<li>Comparing value against <code>undefined</code> e.g. <code>if(val===undefined)</code> vs just
comparing against falsy e.g. <code>if(!val)</code></li>
<li>Using <code>TypedArray</code>/<code>Uint8Array</code> natively instead of <code>Buffer</code> polyfill. This
one is a kicker for me because we relied on <code>Buffer</code> polyfill, and webpack 5
stopped bundling polyfills by default which made us wake up to this</li>
<li>When converting <code>Uint8Array</code> to string, use <code>TextDecoder</code> for large strings, and
just small string concatenations of <code>String.fromCharCode</code> for small ones.
There is an inflection point for string size where one is faster</li>
<li>Use <code>for</code> loops instead of <code>Array.prototype.forEach</code>/<code>Array.prototype.map</code>. I
think similar to above, there is an inflection point (not where it gets
faster in the <code>forEach</code>/<code>map</code> case, but where you can choose to care whether
the small performance diff matters) based on number of elements in your array</li>
<li>Pre-allocate an array with <code>new Array(N)</code> instead of just <code>[]</code> if possible</li>
</ul>
<p>I have tried to keep track of more microoptimizations here, but they are pretty
specific to small examples and may not generalize across browsers or browser
versions <a href="https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8">https://gist.github.com/cmdcolin/ef57d2783e47b16aa07a03967fd870d8</a></p>
<h2 id="examples-of-macro-optimizations"><a aria-hidden="true" tabindex="-1" href="#examples-of-macro-optimizations"><a href="#examples-of-macro-optimizations" style="margin-right: 10px">#</a></a>Examples of macro optimizations</h2>
<p>Oftentimes, large scale re-workings of your code or "macro" optimizations are
the way to make progress.</p>
<p>A macro optimization may be revealed if you are looking at your performance
profiling result and you think: this entire section of the program could be
reworked to remove this overhead</p>
<p>In this case, it is hard to advise on because most of these will be very
specific to your particular app.</p>
<p>Just as a specific example of a macro optimization I undertook:</p>
<p>We use web workers, and had to serialize a lot of data from the web worker to
the main thread. I did a large re-working of the codebase to allow, in
particular examples, the main thread to request smaller snippets of data from
the web worker thread on-demand (the web worker is kept alive indefinitely)
instead of serializing all the web worker data and sending to the main thread.</p>
<p>This change especially pays off with large datasets, where all that
serialization/data duplication is computationally and memory expensive. Fun
fact: I remember sitting at a table at a conference in Jan 2020 talking with my
team at the Plant and Animal Genome conference, thinking that we should make
this change -- finally did it, just took 2 years. [1]</p>
<h2 id="end-to-end-optimization-testing"><a aria-hidden="true" tabindex="-1" href="#end-to-end-optimization-testing"><a href="#end-to-end-optimization-testing" style="margin-right: 10px">#</a></a>End-to-end optimization testing</h2>
<p>In order to comprehensively measure whether micro or macro optimizations are
actually improving your real world performance, it can be useful to create an
end-to-end test</p>
<p>For our app, I created a <code>puppeteer</code> based test where I loaded the website and
waited for a "DONE" condition. I created a variety of different tests which
allowed me to see e.g. some optimizations may only affect certain conditions.</p>
<p>Developing the end-to-end test suite tool awhile to develop (read: weeks to
mature, though some earlier result were available), but it let me compare the
current release vs experimental branches, and over time, the experimental
branches were merged and things got faster. [2]</p>
<h2 id="note-that-memory-usage-can-be-very-important-to-your-programs-performance"><a aria-hidden="true" tabindex="-1" href="#note-that-memory-usage-can-be-very-important-to-your-programs-performance"><a href="#note-that-memory-usage-can-be-very-important-to-your-programs-performance" style="margin-right: 10px">#</a></a>Note that memory usage can be very important to your programs performance.</h2>
<p>Excessive allocations will increase "GC pressure" (the garbage collector will
invoke more Minor and Major GC, which you will see in your performance
profiling reuslts as yellow boxes)</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>It is really important to look at the profiling to see what your program
actually is spending time on. You can make hypothetical optimizations all day
and dream of rewriting in rust but you may just have a slow hot path in your JS
code that, if optimized, can get big speedups.</p>
<p>Let me know about your favorite optimizations in the comments!</p>
<h2 id="footnotes"><a aria-hidden="true" tabindex="-1" href="#footnotes"><a href="#footnotes" style="margin-right: 10px">#</a></a>Footnotes</h2>
<p>[1] Note that things like SharedArrayBuffer also offer a means to share data
between worker and main thread, but these come with many security limitations
from the browser (and was even removed for a time while these security
implications were sussed out, due to Spectre/Meltdown vulnerabilities)</p>
<p>[2] I still have not found a good way to get automated memory usage profiling
via puppeteer. You can access window.process.memory in puppeteer, but this
variable does not provide info about webworker memory usage
<a href="https://github.com/puppeteer/puppeteer/issues/8258">https://github.com/puppeteer/puppeteer/issues/8258</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Using find . -exec sed is dangerous in a git repo]]></title>
            <link>https://cmdcolin.github.io/posts/2022-05-04-findseddangerous</link>
            <guid>https://cmdcolin.github.io/posts/2022-05-04-findseddangerous</guid>
            <pubDate>Wed, 04 May 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>You want to find and replace all instances of a string in your repo, so you
google "find replace directory linux command". You end up here</p>
<p><a href="https://stackoverflow.com/a/6759339/2129219">https://stackoverflow.com/a/6759339/2129219</a></p>
<p>They tell us</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">find ./ -type f -exec sed -i -e </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">s/apple/orange/g</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> {} </span><span style="color: #5FB3A1">\;</span></span></code></pre>
<p>Ignoring the fact that this syntax is very long and hard to type, this command
is dangerous to use in a git repository. Specifically, this can corrupt your
.git contents.</p>
<h2 id="why"><a aria-hidden="true" tabindex="-1" href="#why"><a href="#why" style="margin-right: 10px">#</a></a>Why?</h2>
<p>This command is dangerous because, find . will enumerate dotfiles, including
the .git directory, and then of course will run the find and replace inside
them. We can see this in the following session</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> mkdir corruptme</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> cd corruptme</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git init</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> echo </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7"># README</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> README.md</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git add README.md</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git commit -m </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Initial commit</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> echo </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Hello world, it is a beautiful day. I sure hope someone doesn't corrupt this git repository</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">>></span><span style="color: #A6ACCD"> README.md</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git commit -am </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Update README.md</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> find .</span></span>
<span class="line"><span style="color: #A6ACCD">.</span></span>
<span class="line"><span style="color: #A6ACCD">./README.md</span></span>
<span class="line"><span style="color: #A6ACCD">./.git</span></span>
<span class="line"><span style="color: #A6ACCD">./.git/branches</span></span>
<span class="line"><span style="color: #A6ACCD">./.git/config</span></span>
<span class="line"><span style="color: #A6ACCD">./.git/COMMIT_EDITMSG</span></span>
<span class="line"><span style="color: #A6ACCD">...more stuff...good indication the next command might be dangerous....</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> find ./ -type f -exec sed -i -e </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">s/README/CORRUPTME/g</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> {} </span><span style="color: #5FB3A1">\;</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git status</span></span>
<span class="line"><span style="color: #A6ACCD">error: index uses md extension, which we do not understand</span></span>
<span class="line"><span style="color: #A6ACCD">fatal: index file corrupt</span></span></code></pre>
<p>In this case, you may be able to recover it e.g. with
<a href="https://stackoverflow.com/questions/1115854/how-to-resolve-error-bad-index-fatal-index-file-corrupt-when-using-git">https://stackoverflow.com/questions/1115854/how-to-resolve-error-bad-index-fatal-index-file-corrupt-when-using-git</a></p>
<p>If you happened to replace some random text that is actually in an object file though e.g. .git/objects</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> find ./ -type f -exec sed -i -e </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">s/VHTHJM/OOOOOO/g</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> {} </span><span style="color: #5FB3A1">\;</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> git status</span></span>
<span class="line"><span style="color: #A6ACCD">error: inflate: data stream error (incorrect data check)</span></span>
<span class="line"><span style="color: #A6ACCD">error: corrupt loose object </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">26cfc5964dfa5355a1747eb6eec6250aab5212d5</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">fatal: unable to read 26cfc5964dfa5355a1747eb6eec6250aab5212d5</span></span></code></pre>
<h2 id="what-is-better"><a aria-hidden="true" tabindex="-1" href="#what-is-better"><a href="#what-is-better" style="margin-right: 10px">#</a></a>What is better?</h2>
<p>My take: Use ruplacer <a href="https://github.com/dmerejkowsky/ruplacer">https://github.com/dmerejkowsky/ruplacer</a></p>
<p>This tool won't try to replace stuff in your .git directory. It will also skip
anything in .gitignore including e.g. node_modules. I was delighted to discover
this tool so, just spreading the word</p>
<p>Addendum: Reddit /u/Snarwin also recommended using git ls-files instead of find</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">git ls-files </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> xargs sed -i -e </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">s/apple/orange/g</span><span style="color: #A6ACCD">'</span></span></code></pre>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Cognitive reframing]]></title>
            <link>https://cmdcolin.github.io/posts/2022-03-02-dont-let-it-get-to-you</link>
            <guid>https://cmdcolin.github.io/posts/2022-03-02-dont-let-it-get-to-you</guid>
            <pubDate>Thu, 03 Mar 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>A big part of my recent career has not been technical but emotional learning</p>
<p>This has been very hard, but the benefits are worth it</p>
<p>A lot of it is mental reframing</p>
<h2 id="meetings"><a aria-hidden="true" tabindex="-1" href="#meetings"><a href="#meetings" style="margin-right: 10px">#</a></a>Meetings</h2>
<ul>
<li>Make a mental note of things you are grateful for, can do this before a
meeting to make sure you go in with a positive attitude</li>
<li>Deep breathing, especially if you feel anxious</li>
<li>Try not to drop bombs of negativity during a meeting, and at least consider
your tone when saying things</li>
<li>Don't try to complain about things that are broken too much. It is
mean and cruel and demoralizes everyone</li>
</ul>
<h2 id="in-your-off-time"><a aria-hidden="true" tabindex="-1" href="#in-your-off-time"><a href="#in-your-off-time" style="margin-right: 10px">#</a></a>In your off time</h2>
<ul>
<li>Try not to dwell on the things that are broken. You are smart. You will fix
them in time. It doesn't help to put your anxiety levels so high</li>
</ul>
<h2 id="remote-work-anxietiesfeeling-appreciated"><a aria-hidden="true" tabindex="-1" href="#remote-work-anxietiesfeeling-appreciated"><a href="#remote-work-anxietiesfeeling-appreciated" style="margin-right: 10px">#</a></a>Remote work anxieties/feeling appreciated</h2>
<ul>
<li>If someone isn't getting back to your issues, don't take it personally. Try
reviewing their code, or check in with them</li>
<li>If you don't feel appreciated, also try not to take it personally. Instead,
try to exude positivity in your own life</li>
<li>Try not to be a hero programmer <a href="https://incident.io/blog/no-capes">https://incident.io/blog/no-capes</a></li>
</ul>
<p>This cognitive reframing is extremely important and you can apply it to
many areas of your life. You tell your own personal story, and what goes on
in your head makes it to the real world through your behavior.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Memoizing async functions so that you don't cache errors]]></title>
            <link>https://cmdcolin.github.io/posts/2022-02-26-memoize-async</link>
            <guid>https://cmdcolin.github.io/posts/2022-02-26-memoize-async</guid>
            <pubDate>Sat, 26 Feb 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>There are two hard problems in computer science: <a href="https://martinfowler.com/bliki/TwoHardThings.html">Cache invalidation and naming
things</a>. In this post we'll
show how memoize an async function, and how to invalidate the memoization when
the promise throws an error.</p>
<p>This helps us with being able to re-try because since the error is not cached,
calling it again after an error retries automatically.</p>
<p>Example async function: fetch from the pokemon API</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getPokemon</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">id</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">Math</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">floor</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">Math</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">random</span><span style="color: #A6ACCD">() </span><span style="color: #91B4D5">*</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">150</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://pokeapi.co/api/v2/pokemon/</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">id</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">ret</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">ret</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">Failed to fetch </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">url</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">ret</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #5DE4C7C0">await</span><span style="color: #5DE4C7"> </span><span style="color: #E4F0FB">ret</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">text</span><span style="color: #A6ACCD">()</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    )</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">ret</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Here is a technique that can be used to memoize this function</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getPokemonMemoized</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #5DE4C7">this</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">this</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">getPokemon</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">catch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">this</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">undefined</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span></span>
<span class="line"><span style="color: #A6ACCD">    })</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">this</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The promise is held in this.promise, and the important part of this function is
that when I get an error, I clear this.promise and re-throw the error. The caller
of the function, on error, will receive the error message, but caching will not
take place, allowing retries to take place later on.</p>
<p>See <a href="https://cmdcolin.github.io/pokemon.html">https://cmdcolin.github.io/pokemon.html</a> for demo</p>
<h2 id="footnote-0-arguments-to-function"><a aria-hidden="true" tabindex="-1" href="#footnote-0-arguments-to-function"><a href="#footnote-0-arguments-to-function" style="margin-right: 10px">#</a></a>Footnote 0: Arguments to function</h2>
<p>If your function takes arguments, then you can use a hashmap associating the
argument with the promise. You may also consider using an LRU cache so that
your hashmap doesn't grow infinitely in size</p>
<p>Generally you need a way to stringify or otherwise make them able to be stored
in a Map or Object to do this.</p>
<p>See <a href="https://github.com/nodeca/promise-memoize">https://github.com/nodeca/promise-memoize</a> for example</p>
<h2 id="footnote-1-error-handling-of-fetch"><a aria-hidden="true" tabindex="-1" href="#footnote-1-error-handling-of-fetch"><a href="#footnote-1-error-handling-of-fetch" style="margin-right: 10px">#</a></a>Footnote 1: Error handling of <code>fetch</code></h2>
<p>This demo also demonstrates some basic fetch error handling, and uses <code>await response.text()</code> to get the error message from the API. Sometimes an api will
return it's error in JSON format, so you can handle that as is, sometimes you
have to check both text and json</p>
<p>Note also, that response.statusText does <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText">not exist in
HTTP/2</a>
so it's better to use <code>response.text()</code> or <code>response.json()</code>.</p>
<h2 id="footnote-2-global-cache"><a aria-hidden="true" tabindex="-1" href="#footnote-2-global-cache"><a href="#footnote-2-global-cache" style="margin-right: 10px">#</a></a>Footnote 2: Global cache</h2>
<p>You could also keep a cache in a global variable, or as a property on a class,
or other methods. I have also found it useful to have a specific function for
clearing the cache, so you can get a clean slate each time a test runs in unit
testing or similar</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getPokemonMemoized</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">getPokemon</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">catch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">undefined</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span></span>
<span class="line"><span style="color: #A6ACCD">    })</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">clearCache</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">undefined</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>You can also make a general purpose utility to memoize any promise function</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">memoize</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">fn</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fn</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">catch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">undefined</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span></span>
<span class="line"><span style="color: #A6ACCD">      })</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="footnote-3---aborting"><a aria-hidden="true" tabindex="-1" href="#footnote-3---aborting"><a href="#footnote-3---aborting" style="margin-right: 10px">#</a></a>Footnote 3 - Aborting</h2>
<p>If you want to handle aborting, it is a bit trickier. Aborting in javascript is
handled by
<a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController">AbortController</a>.
This is an object that gives you an
<a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal">AbortSignal</a>
that can be passed to fetch calls and the like to stop a big download from
happening.</p>
<p>In our above example, if we passed an abort signal to the first call to fetch,
and then aborted it, it would abort the fetch, <a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort">which throws a DOMException
called
"AbortError"</a>.
You can detect that it is an AbortError like this, and may choose not to
display or re-throw the abort exception</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">isAbortException</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">instanceof</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">Error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">exception</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">AbortError</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Now, what if 5 functions call getPokemonMemoized(), all passing different abort
signals. What if the first one aborts? Then all the rest will get aborted also.
But what if we only want to abort the cached call if literally all of them
aborted? Then we may have to synthesize an abortcontroller inside our function</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">abortcontroller</span></span>
<span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">listeners</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getPokemonMemoized</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">signal</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">abortcontroller</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">AbortController</span><span style="color: #A6ACCD">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// synthesize a new signal instead of using the passed in signal</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">getPokemon</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">abortcontroller</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">signal</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">catch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">promise</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">undefined</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">e</span></span>
<span class="line"><span style="color: #A6ACCD">    })</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">signal</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">listeners</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// add listener to the passed in signal</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">signal</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">addEventListener</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">abort</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">listeners</span><span style="color: #91B4D5">--</span></span>
<span class="line"><span style="color: #A6ACCD">      if (</span><span style="color: #E4F0FB">listeners</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #E4F0FB">abortcontroller</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">abort</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">    })</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">promise</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>A library my team created,
<a href="https://github.com/GMOD/abortable-promise-cache">abortable-promise-cache</a>,
tries to help with this scenario with a cleaner abstraction.</p>
<h2 id="footnote-4"><a aria-hidden="true" tabindex="-1" href="#footnote-4"><a href="#footnote-4" style="margin-right: 10px">#</a></a>Footnote 4</h2>
<p>I have been playing through Pokemon Yellow and find it really amusing hence the
pokemon theme</p>
<p>Fun stuff: The cutting room floor wiki with unused moves, sounds, and sprites
in Pokemon Yellow <a href="https://tcrf.net/Pok%C3%A9mon_Yellow">https://tcrf.net/Pok%C3%A9mon_Yellow</a></p>
<h2 id="footnote-5"><a aria-hidden="true" tabindex="-1" href="#footnote-5"><a href="#footnote-5" style="margin-right: 10px">#</a></a>Footnote 5</h2>
<p>This blog post mentioned in a comment thread <a href="https://zansh.in/memoizer.html">https://zansh.in/memoizer.html</a> has
great interactive examples and shows the "invalidate on .catch()" behavior!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Ukraine]]></title>
            <link>https://cmdcolin.github.io/posts/2022-02-24-ukraine</link>
            <guid>https://cmdcolin.github.io/posts/2022-02-24-ukraine</guid>
            <pubDate>Thu, 24 Feb 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>As Russia is actively invading Ukraine my heart goes out to them.</p>
<p>Even if I had no personal connection with Ukraine, I would find this abhorrent,
but I do have personal connections to Ukraine in various ways that makes me
think of them more fondly</p>
<p>My first, and so far only, consulting job was with a company in Ukraine, around 2012. I helped them configure JBrowse, and prepared an official looking word
document with recommendations and hours (a total of like...2 hours) and they
were very nice.</p>
<p>Stand strong Ukraine</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Lesser_Coat_of_Arms_of_Ukraine.svg/172px-Lesser_Coat_of_Arms_of_Ukraine.svg.png" alt=""></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Back when I was a noise musician...]]></title>
            <link>https://cmdcolin.github.io/posts/2022-02-15-noise</link>
            <guid>https://cmdcolin.github.io/posts/2022-02-15-noise</guid>
            <pubDate>Tue, 15 Feb 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Found this photo of myself from a photo book published by john cates called
auditory depravation...great documentation of michigan area noise activity. I
am actually the last photo in the book amongst so many amazing
artists...totally honored. I forgot I was even in the book when I picked it up
randomly.</p>
<p>thank you john cates!!!</p>
<p><img src="/photos/noise/cover-crop-fs8.png" alt=""></p>
<p>cover</p>
<p><img src="/photos/noise/out20-crop-fs8.png" alt=""></p>
<p>index p1</p>
<p><img src="/photos/noise/out21-crop-fs8.png" alt=""></p>
<p>index p2</p>
<p><img src="/photos/noise/out22-crop-fs8.png" alt=""></p>
<p>index p3, i'm last as xephedradap</p>
<p><img src="/photos/noise/out15-crop-fs8.png" alt=""></p>
<p>me</p>
<p><img src="/photos/noise/out16-crop-fs8.png" alt=""></p>
<p>abstract b/w</p>
<p>some photos from the book here <a href="https://www.johncatesphoto.com/noise">https://www.johncatesphoto.com/noise</a></p>
<ul>
<li><a href="https://soundcloud.com/xephedradap/amazingnoisetreasure">lightyear fluctuations</a> (hnw)</li>
<li><a href="https://soundcloud.com/xephedradap/symptomatic-of-extreme-decay">symptomatic of extreme decay</a> (circuit bent hnw)</li>
<li><a href="https://soundcloud.com/xephedradap/2016-10-10-13-35-49a">2016-10-10-13-35-49a</a> (circuit bent drum machine)</li>
</ul>
<p>I will make more noise soon...stay tuned</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Structural variants and the SAM format - the long (reads) and short (reads) of it]]></title>
            <link>https://cmdcolin.github.io/posts/2022-02-06-sv-sam</link>
            <guid>https://cmdcolin.github.io/posts/2022-02-06-sv-sam</guid>
            <pubDate>Sun, 06 Feb 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The <code>SAM</code> specification is pretty amazing
(<a href="https://samtools.github.io/hts-specs/SAMv1.pdf">https://samtools.github.io/hts-specs/SAMv1.pdf</a>) but it is also fairly terse
and abstract. True understanding might come from playing with real world data.
I will try to relay some things I have learned over the years, with a bit of a
focus on how <code>SAM</code> file concepts can relate to structural variants.</p>
<p>Disclaimer: I'm a developer of JBrowse 2. This document has some screenshots
and links for it, feel free to try it at <a href="https://jbrowse.org">https://jbrowse.org</a>.</p>
<h2 id="basics"><a aria-hidden="true" tabindex="-1" href="#basics"><a href="#basics" style="margin-right: 10px">#</a></a>Basics</h2>
<h3 id="what-is-a-sam-file-and-how-does-it-relate-to-bam-and-cram"><a aria-hidden="true" tabindex="-1" href="#what-is-a-sam-file-and-how-does-it-relate-to-bam-and-cram"><a href="#what-is-a-sam-file-and-how-does-it-relate-to-bam-and-cram" style="margin-right: 10px">#</a></a>What is a <code>SAM</code> file and how does it relate to <code>BAM</code> and <code>CRAM</code>?</h3>
<ul>
<li>
<p>A <code>SAM</code> file <strong>generally</strong> contains "reads" from a sequencer, with information
about how they are mapped to a reference genome [1][2].</p>
</li>
<li>
<p>A <code>SAM</code> file is <strong>generally</strong> produced when an aligner takes in raw unaligned reads
(often stored in <code>FASTQ</code> format files) and aligns them to a reference genome [3].</p>
</li>
<li>
<p>A <code>SAM</code> file is a text format that you can read with your text editor. <code>BAM</code> and
<code>CRAM</code> are compressed representations of the <code>SAM</code> format.</p>
</li>
</ul>
<p>You can convert <code>SAM</code> to <code>BAM</code> with samtools</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">samtools view file.sam -o file.bam</span></span></code></pre>
<p>You can also convert a <code>BAM</code> back to <code>SAM</code> with samtools view</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">samtools view -h file.bam -o file.sam</span></span></code></pre>
<p>The -h just makes sure to preserve the header.</p>
<p>If you are converting <code>SAM</code> to <code>CRAM</code>, it may require the -T argument to
specify your reference sequence (this is because the <code>CRAM</code> is "reference
compressed")</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">samtools view -T reference.fa file.sam -o file.cram</span></span></code></pre>
<p>Also see Appendix C: piping FASTQ from <code>minimap2</code> directly to CRAM</p>
<p>[1] <code>SAM</code> can contain any type of sequence, not specifically reads. If you
created a <em>de novo</em> assembly, you could align the contigs of the <em>de novo</em> assembly
to a reference genome and store the results in <code>SAM</code>.</p>
<p>[2] Does not always have to have information about mapping to a reference
genome. You can also store unaligned data in <code>SAM</code>/<code>BAM</code>/<code>CRAM</code> (so-called
<code>uBAM</code> for example) but most of the time, the reads in <code>SAM</code> format are aligned
to a reference genome.</p>
<p>[3] Examples of programs that do alignment include <code>bwa</code>, <code>bowtie</code>, and <code>minimap2</code>
(there are many others). These programs all can produce <code>SAM</code> outputs</p>
<h3 id="what-is-in-a-sam-file"><a aria-hidden="true" tabindex="-1" href="#what-is-in-a-sam-file"><a href="#what-is-in-a-sam-file" style="margin-right: 10px">#</a></a>What is in a <code>SAM</code> file</h3>
<p>A <code>SAM</code> file contains a header (<code>BAM</code> and <code>CRAM</code> files also have the <code>SAM</code>
header) and a series of records. A record is a single line in a <code>SAM</code> file, and
it generally corresponds to a single read, but as we will see, a split
alignment may produce multiple records that refer to the same source read.</p>
<p>Note: if a read failed to align to the reference genome, it may still be in
your <code>SAM</code> file, marked as unmapped using the flag column. Sometimes, "dumpster
diving" (looking at the unmapped records from a <code>SAM</code> file) can be used to aid
structural variant searches (e.g. there may be novel sequence in there not from
the reference genome that could be assembled)</p>
<h3 id="what-are-tags-in-a-sam-file"><a aria-hidden="true" tabindex="-1" href="#what-are-tags-in-a-sam-file"><a href="#what-are-tags-in-a-sam-file" style="margin-right: 10px">#</a></a>What are tags in a <code>SAM</code> file</h3>
<p>A SAM file has a core set of required fields, and then an arbitrary list of
extra columns called tags. The tags have a two character abbreviation like <code>MQ</code>
(mapping quality) or many others. They can be upper or lower case. Upper case
are reserved for official usages (except those with X, Y, or Z prefixed). See
<a href="https://samtools.github.io/hts-specs/SAMtags.pdf">SAMtags.pdf</a> for more
details</p>
<h3 id="what-is-a-cigar-string"><a aria-hidden="true" tabindex="-1" href="#what-is-a-cigar-string"><a href="#what-is-a-cigar-string" style="margin-right: 10px">#</a></a>What is a <code>CIGAR</code> string</h3>
<p>A <code>CIGAR</code> string is a "compact idiosyncratic gapped alignment report". It tells
you about insertions, deletions, and clipping. It is a series of "operators"
with lengths.</p>
<p>Insertion example:</p>
<p><code>50M50I50M</code></p>
<p>That would be 50bp of matching bases (<code>50M</code>), followed by a 50bp insertion
(<code>50I</code>), followed by another 50bp of matches (<code>50M</code>). The 50bp insertion means
the read contains 50 bases in the middle which did not match the reference
genome that you are comparing the read to.</p>
<p>Clipping example:</p>
<p><code>50S50M50S</code></p>
<p>This means that 50bp matched (<code>50M</code> in the middle of the <code>CIGAR</code> string) and
both sides of the read are soft clipped. The clipping means the aligner was not
able to align the reads on either side. You could imagine clipping being like
"an insertion on either side of the read" if you like: basically those bases on
either side did not align.</p>
<p>Notes:</p>
<ul>
<li>
<p><em>Finding mismatches</em>: A <code>CIGAR</code> string match like <code>50M</code> means 50 bases
"matched" the reference genome, but that only means that there are no
insertions or deletions in those 50 bases. There could be underlying
mismatches in the read compared to the reference. Note: there is also
extended <code>CIGAR</code> that replaces <code>M</code> with <code>=</code> (exact match) and <code>X</code> (mismatch).
Also see Appendix D on the <code>MD</code> tag and finding where the mismatches are, but
note that <code>MD</code> tag is tricky</p>
</li>
<li>
<p><em>Ambiguity of representation</em>: A <code>CIGAR</code> string with insertions and deletions
could be <code>50M1D1I50M</code>. This string had a 1bp deletion and a 1bp insertion
back-to-back. This could be just a mismatch! There is ambiguity in sequence
alignment representations. Downstream programs must accomodate this.</p>
</li>
<li>
<p><em>Split records and soft-clipping</em>: A <code>CIGAR</code> string with soft-clipping
<code>500S50M</code> this means that 500 bases of the read were not aligned at this
position, but 50 bases were! Note that the alignment might have been a split
alignment (see section on split alignments below) so another record in the
<code>SAM</code> file, linked by the <code>SA</code> (supplementary alignment) tag, might contain
info on where the other 500 bases aligned! (or, they might not map anywhere).
The linked split or supplementary alignments all have the same read name
(<code>QNAME</code>).</p>
</li>
</ul>
<p>See <a href="https://samtools.github.io/hts-specs/SAMv1.pdf">SAMv1.pdf</a> for all the
CIGAR operators.</p>
<p>If you are working with <code>SAM</code> data, you will often write loops that directly
parse CIGAR strings. See Appendix B for handy functions for parsing <code>CIGAR</code>
strings. Don't fear the <code>CIGAR</code>!</p>
<h2 id="detecting-svs-from-long-reads"><a aria-hidden="true" tabindex="-1" href="#detecting-svs-from-long-reads"><a href="#detecting-svs-from-long-reads" style="margin-right: 10px">#</a></a>Detecting SVs from long reads</h2>
<p>Long reads offer a wide array of methods for detecting SVs</p>
<ul>
<li><em>Small insertions/deletions</em>: Long reads can completely span moderate sized
insertions and deletions, indicated by <code>I</code> or <code>D</code> in a <code>CIGAR</code> string.</li>
<li><em>Large insertions/deletions</em>: If a long read does not completely span an
insertion or deletion, it may be split aligned on either side of the SV or
could be soft/hard clipped where it can't align all the way through an
insertion.</li>
<li><em>Translocations</em>: A split long alignment can span long range or even
inter-chromosomal translocations, so part of the read maps to one chromosome
and one part maps to the other</li>
<li><em>Inversions</em>: A split alignment can span an inversion, the long read is split
into multiple parts, one part of it aligns in the reverse orientation, while
the other part aligns in the forward orientation</li>
</ul>
<p>Note that there are many different methods for detecting SVs from long reads,
e.g. not all use mapped reads from SAM files, some use <em>de novo</em> assembly, but
it is still useful to be familiar with mapped read methods.</p>
<h3 id="what-are-splitsupplementarychimeric-alignments"><a aria-hidden="true" tabindex="-1" href="#what-are-splitsupplementarychimeric-alignments"><a href="#what-are-splitsupplementarychimeric-alignments" style="margin-right: 10px">#</a></a>What are split/supplementary/chimeric alignments?</h3>
<p>Split alignments, or chimeric alignments, are alignments where part of the read
maps to one place, and another part to another. For example, part of a long
read may map to <code>chr1</code> and part of it maps to <code>chr4</code>. It is worth reading the
definition of "Chimeric alignment" from
<a href="https://samtools.github.io/hts-specs/SAMv1.pdf">SAMv1.pdf</a> when you get the
chance.</p>
<p>As <a href="https://samtools.github.io/hts-specs/SAMv1.pdf">SAMv1.pdf</a> tells us, one
record is marked as "representative", sometimes also called the "primary"
record, while the other components of the split read are marked
"supplementary", given the 2048 flag. The "primary" record generally has a
<code>SEQ</code> field that represents the entirety of the original read's sequence (with
CIGAR soft clipping operators saying which part of that sequence aligned), and
the "supplementary alignments" will have <code>SEQ</code> field but sometimes just
segments of the original read's sequence with CIGAR hard clipping operators
indicating that it is partial.</p>
<p>Supplementary alignments are especially common with long reads, and it can be a
signal for structural variants e.g. where two chromosomes are fused together,
and parts of the read align to multiple chromosomes, or the split alignment may
align to either side of a large deletion, or they may be split to align through
an inversion (part of it aligns to the forward strand, part of it to the
reverse strand, and again the forward strand)</p>
<p>There is no limitation on how many splits might occur so the split can align to
3, 4, or more different places. Each part of the split puts a new line in the
SAM file, and note that all the records also have the same read name, or
<code>QNAME</code> (first column of <code>SAM</code>).</p>
<h3 id="what-are-secondary-alignmentsmulti-mappers"><a aria-hidden="true" tabindex="-1" href="#what-are-secondary-alignmentsmulti-mappers"><a href="#what-are-secondary-alignmentsmulti-mappers" style="margin-right: 10px">#</a></a>What are secondary alignments/multi-mappers</h3>
<p>Secondary alignments generally come from "multi-mappers" where the entire read
maps equally well (or at least somewhat equally well) to, say, somewhere on
both <code>chr4</code> and <code>chr1</code>. "Multi mapping" results in secondary alignments, while
split reads result in supplementary alignments. See "Multiple mapping" in the
<a href="https://samtools.github.io/hts-specs/SAMv1.pdf">SAMv1.pdf</a> for the definition
of multi-mapping. Note also that secondary alignments sometimes are missing the
<code>SEQ</code> field entirely too, see
<a href="https://github.com/lh3/minimap2/issues/458#issuecomment-516661855">https://github.com/lh3/minimap2/issues/458#issuecomment-516661855</a></p>
<p>I wrote a tool called secondary_rewriter to add the <code>SEQ</code> field back to
secondary alignments, which may help in some cases</p>
<h3 id="what-is-the-sa-tag"><a aria-hidden="true" tabindex="-1" href="#what-is-the-sa-tag"><a href="#what-is-the-sa-tag" style="margin-right: 10px">#</a></a>What is the <code>SA</code> tag?</h3>
<p>The <code>SA</code> tag is outputted on each part of the supplementary/split/chimeric
alignment, e.g. the primary contains an <code>SA</code> tag that refers to information
(e.g. the location) of where all the supplementary alignments where placed, and
each of the supplementary alignments also contains an <code>SA</code> tag that refers to
the primary alignment and each other supplementary alignment.</p>
<p>Fun fact: The <code>SA</code> tag conceptually can result in a 'quadratic explosion' of
data, because each part of the split contains references to every other part.
For example, if a read is split into 4 pieces, then each record would would
have an <code>SA</code> tag with 3 segments, so 3*4 segments will be documented in the
<code>SA</code> tag. In many cases, this is not a problem, but if you imagine a finished
chromosome aligned to a draft assembly, it may get split so many times this
could be a factor.</p>
<p>See <a href="https://samtools.github.io/hts-specs/SAMtags.pdf">SAMtags.pdf</a> for more
info on the <code>SA</code> tag.</p>
<h3 id="visualizing-split-reads-across-a-breakend-or-translocation"><a aria-hidden="true" tabindex="-1" href="#visualizing-split-reads-across-a-breakend-or-translocation"><a href="#visualizing-split-reads-across-a-breakend-or-translocation" style="margin-right: 10px">#</a></a>Visualizing split reads across a breakend or translocation</h3>
<p>This is a specialized JBrowse 2 feature, but if there is an inter-chromosomal
translocation, you can load this into JBrowse and visualize support for this
event using our "breakpoint split view". This view shows the evidence for the
reads that are split aligned across an SV, and can show connections between
paired-end reads across an SV too.</p>
<p>We also have a workflow called the "SV inspector" that helps you setup the
"breakpoint split views"
(<a href="https://jbrowse.org/jb2/docs/user_guide/#sv-inspector">https://jbrowse.org/jb2/docs/user_guide/#sv-inspector</a>.
The SV inspector and Breakpoint split view work best on Breakends (e.g. VCF 4.3
section 5.4) and <code>&#x3C;TRA></code> (translocation) events from <code>VCF</code>, or <code>BEDPE</code>
formatted SV calls, and you can launch the "breakpoint split view" from the "SV
inspector"</p>
<p><img src="/media/breakpoint_split_view.png" alt=""></p>
<h3 id="visualizing-a-read-vs-reference-view-given-a-split-alignment"><a aria-hidden="true" tabindex="-1" href="#visualizing-a-read-vs-reference-view-given-a-split-alignment"><a href="#visualizing-a-read-vs-reference-view-given-a-split-alignment" style="margin-right: 10px">#</a></a>Visualizing a 'read vs reference' view given a split alignment</h3>
<p>If we are given the the primary alignment of an arbitrary split read, then we
can construct what that split looks like compared to the reference genome.</p>
<p>If we are not given the primary alignment (e.g. we are starting from a
supplementary alignment) then we can search the <code>SA</code> list for the one that is
primary, because at least one will be.</p>
<p>Now that we have the primary alignment, it will have the <code>SEQ</code> (of the entire
read, the supplementary alignments typically have a blank <code>SEQ</code>!) and the <code>SA</code>
tag containing the <code>CIGAR</code> of all the different parts of the split. We can then
construct how the entire read, not just a particular record of the split
alignment, compares to the genome. In JBrowse 2 we implemented this and it uses
a synteny-style rendering. [1]</p>
<p><img src="/media/linear_alignment.png" alt=""></p>
<p>Figure showing JBrowse 2 piecing together a long read vs the reference genome
from a single read</p>
<p>In order to do this reconstruction, JBrowse 2 takes the <code>CIGAR</code> strings of the
primary alignment and each of the pieces of the <code>SA</code> tag (it is a semi-colon
separated list of chunks), sort them by the amount of softclipping (the
softclipping values will progressively trim off more of the <code>SEQ</code> telling you
it aligned further and further on in the long read), and then this tells me
where each piece of the split alignment came from in the original <code>SEQ</code>, so we
can plot the alignments of the read vs the reference genome using synteny style
display.</p>
<p>[1] Similar functionality also exists in GenomeRibbon
<a href="https://genomeribbon.org">https://genomeribbon.org</a></p>
<h3 id="sam-vs-vcf---breakends-vs-split-alignments"><a aria-hidden="true" tabindex="-1" href="#sam-vs-vcf---breakends-vs-split-alignments"><a href="#sam-vs-vcf---breakends-vs-split-alignments" style="margin-right: 10px">#</a></a><code>SAM</code> vs <code>VCF</code> - Breakends vs split alignments</h3>
<p>An interesting outcome (to me) is that from a single record in a <code>SAM</code> file, I
can reconstruct the "derived" genome around a region of interest from a single
read.</p>
<p>If I was to try to do this with the <code>VCF</code> Breakend specification (section 5.4
of <a href="https://samtools.github.io/hts-specs/VCFv4.3.pdf">VCF4.3.pdf</a>), it may
actually be more challenging than from a <code>SAM</code> read. This is because a Breakend
in <code>VCF</code> format is only an edge in a graph (and the sequences are nodes).
Therefore, in order to properly reconstruct a structural variant from a <code>VCF</code>
with Breakends, I would have to construct a graph and decode paths through it.</p>
<p>I like the ability to reconstruct the derived genome from a single read, but
individual reads can be noisy (contain errors). That said, <em>de novo</em> assembled
contigs can also be stored in <code>SAM</code> format and is significantly less noisy
(being composed of the aggregate information of many reads).</p>
<p>The point though is that interpretation of the <code>VCF</code> breakend specification is
challenging due to imposing a sequence graph on the genome, while the <code>SA</code> tag
remains just a simple set of linear alignments that can easily be pieced
together, and you only need to refer to a single record in the <code>SAM</code> file to do
so.</p>
<p>I am not aware of a lot of tools that work on the <code>VCF</code> Breakend graph, and
expect more will need to be created to truly work with this standard. An
inversion for example may create 4 record in the <code>VCF</code> file (see section 5.4 in
the <a href="https://samtools.github.io/hts-specs/VCFv4.3.pdf">VCF4.3.pdf</a> for
example), and needs careful interpretation.</p>
<h3 id="haplotype-tagged-reads"><a aria-hidden="true" tabindex="-1" href="#haplotype-tagged-reads"><a href="#haplotype-tagged-reads" style="margin-right: 10px">#</a></a>Haplotype tagged reads</h3>
<p>A new trend has been to create <code>SAM</code>/<code>BAM</code>/<code>CRAM</code> files with tagged reads,
which tells us which haplotype a read was inferred to have come from. This is
commonly done with the <code>HP</code> tag, which might have <code>HP=0</code> and <code>HP=1</code> for a
diploid genome. Tools like <code>whatshap</code> can add these tags to a <code>SAM</code> file, and
IGV and JBrowse 2 can color and sort by these tags.</p>
<p><img src="/media/color_by_tag.png" alt=""></p>
<p>Screenshot of JBrowse 2 with the "Color by tag" and "Sort by tag" setting
enabled (coloring and sorting by the <code>HP</code> tag) letting us see that only one
haplotype has a deletion. Tutorial for how to do this in JBrowse 2 here
<a href="https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag">https://jbrowse.org/jb2/docs/user_guide/#sort-color-and-filter-by-tag</a></p>
<h2 id="how-do-you-detect-svs-with-paired-end-reads"><a aria-hidden="true" tabindex="-1" href="#how-do-you-detect-svs-with-paired-end-reads"><a href="#how-do-you-detect-svs-with-paired-end-reads" style="margin-right: 10px">#</a></a>How do you detect SVs with paired-end reads?</h2>
<p>Paired-end reads are short reads, e.g. 150bp each. This makes them unable to
recover some large structural variants.</p>
<p>However, paired-end reads have a number of attributes that can be used to
detect paired end reads</p>
<h3 id="distance-between-pairs-being-abnormally-large-or-short"><a aria-hidden="true" tabindex="-1" href="#distance-between-pairs-being-abnormally-large-or-short"><a href="#distance-between-pairs-being-abnormally-large-or-short" style="margin-right: 10px">#</a></a>Distance between pairs being abnormally large or short</h3>
<p>The distance between pairs is encoded by the <code>TLEN</code> column in the <code>SAM</code> format.
The distance between pairs with good mapping is relatively constant and called
the "insert length". This comes from how the sequencing is done: paired-end
sequencing performs sequencing on both ends of a fragment.</p>
<p>But, if you are mapping reads vs the reference genome, and you observe that
they are abnormally far apart, say 50kb apart instead of 1kb apart, this may
indicate there your sample contains a deletion relative to the reference.</p>
<p><img src="/media/aberrant_size.png" alt=""></p>
<p>Screenshot of JBrowse 1 with "View as pairs" enabled, and large insert size
colored as red (from
<a href="https://jbrowse.org/docs/paired_reads.html">https://jbrowse.org/docs/paired_reads.html</a>.
Note that some of JBrowse 1's View as pairs features are not yet available in
JBrowse 2</p>
<h3 id="an-abundance-of-reads-being-clipped-at-a-particular-position"><a aria-hidden="true" tabindex="-1" href="#an-abundance-of-reads-being-clipped-at-a-particular-position"><a href="#an-abundance-of-reads-being-clipped-at-a-particular-position" style="margin-right: 10px">#</a></a>An abundance of reads being "clipped" at a particular position</h3>
<p>This can indicate that part of the reads map well, but then there was an abrupt
stop to the mapping. This might mean that there is a sequence that was an
insertion at that position, or a deletion, or a translocation.</p>
<p>The clipping is indicated by the <code>CIGAR</code> string, either at the start or end of
it by an <code>S</code> or an <code>H</code>. The <code>S</code> indicates "soft clipping", and indicates that
the sequence of the clipped portion can be found in the <code>SEQ</code> field of the
primary alignment. The <code>H</code> is hard clipped, and the sequence that is hard
clipped will not appear in the <code>SEQ</code>.</p>
<p><img src="/media/clipping_pileup.png" alt=""></p>
<p>Screenshot of JBrowse 2 showing blue clipping indicator with a "pileup" of
soft-clipping at a particular position shown in blue. The clipping is an
"interbase" operation (it occurs between base pair coordinates) so it is
plotted separately from the normal coverage histogram.</p>
<p><img src="/media/show_soft_clipping.png" alt=""></p>
<p>Screenshot of JBrowse 2 showing an insertion with Nanopore (top), PacBio
(middle) and Illumina short reads. The long reads may completely span the
insertion, so the <code>CIGAR</code> string on those have an <code>I</code> operator and are indicated
by the purple triangle above the reads. For the short reads, the reads near the
insertion will be clipped since they will not properly map to the reference
genome and cannot span the sinsertion. The "Show soft clipping" setting in
JBrowse 2 and IGV can be used to show visually the bases that extend into the
insertion (shown on the bottom track).</p>
<h3 id="unexpected-pair-orientation"><a aria-hidden="true" tabindex="-1" href="#unexpected-pair-orientation"><a href="#unexpected-pair-orientation" style="margin-right: 10px">#</a></a>Unexpected pair orientation</h3>
<p>With standard paired end sequencing, the pairs normally point at each other</p>
<pre><code>forward reverse
 --->    &#x3C;---
</code></pre>
<p>If the stranded-ness of the pair is off, then it could indicate a structural
variant. See Appendix A for a handy function for calculating pair orientation.</p>
<p>This guide from IGV is helpful for interpreting the pair directionality with
patterns of SVs using "Color by pair orientation"</p>
<p><a href="https://software.broadinstitute.org/software/igv/interpreting_pair_orientations">https://software.broadinstitute.org/software/igv/interpreting_pair_orientations</a></p>
<p><img src="/media/inverted_duplication.png" alt=""></p>
<p>Figure: JBrowse 2 showing an inverted (tandem) duplication in 1000 genomes
data. It uses the same coloring as IGV for pair orientation. The tandem
duplication can produce green arrows which have reads pointing in opposite
directions e.g. <code>&#x3C;--</code> and <code>--></code>, while blue arrows which can indicate an
inversion point in the same direction e.g. <code>--></code> and <code>--></code></p>
<h3 id="caveat-about-tlen"><a aria-hidden="true" tabindex="-1" href="#caveat-about-tlen"><a href="#caveat-about-tlen" style="margin-right: 10px">#</a></a>Caveat about TLEN</h3>
<p>Note that <code>TLEN</code> is a field in the SAM format that is somewhat ill defined,
at least in the sense that different tools may use it differently
<a href="https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767">https://github.com/pysam-developers/pysam/issues/667#issuecomment-381521767</a></p>
<p>If needed, you can calculate <code>TLEN</code> yourself if you process the file yourself
(e.g. process all reads, get the actual records for the pairs, and calculate
distance) but I have not had trouble with relying on the <code>TLEN</code> from the data
files themselves.</p>
<h2 id="calling-copy-number-variants-with-your-short-or-long-reads"><a aria-hidden="true" tabindex="-1" href="#calling-copy-number-variants-with-your-short-or-long-reads"><a href="#calling-copy-number-variants-with-your-short-or-long-reads" style="margin-right: 10px">#</a></a>Calling copy number variants with your short or long reads</h2>
<p>Another type of SV that you can get from your <code>SAM</code> files are copy number
variants (CNVs). By looking at the depth-of-coverage for your data files, you
can look for abnormalities that may indicate copy number variants. By using a
tool like <code>mosdepth</code>, you can quickly get a file showing the coverage across
the genome.</p>
<p>Be aware that if you are comparing the coverage counts from different tools,
that they have different defaults that may affect comparison. Some discard
<code>QC_FAIL</code>, <code>DUP</code>, and <code>SECONDARY</code> flagged reads. This is probably appropriate,
and corresponds to what most genome browsers will display (see
<a href="https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af">https://gist.github.com/cmdcolin/9f677eca28448d8a7c5d6e9917fc56af</a> for a short
summary of depth calculated from different tools)</p>
<p>Note that both long and short reads can be used for CNV detection. Long reads
may give more accurate measurements also, with their better ability to map
smoothly through difficult regions of the genome.</p>
<p><img src="/media/coverage_cnv.png" alt=""></p>
<p>Screenshot showing coverage in <code>BigWig</code> format from nanopore reads on normal
and tumor tissue from a melanoma cancer cell line (COLO829) plotted using
JBrowse 2. This coverage data is calculated from nanopore sequencing from
<a href="https://www.biorxiv.org/content/10.1101/2020.10.15.340497v1.full">here</a> using
<a href="https://github.com/brentp/mosdepth"><code>mosdepth</code></a>, converted from <code>BedGraph</code> to
<code>BigWig</code>, and loaded into JBrowse 2. See
(<a href="https://jbrowse.org/code/jb2/v1.6.4/?config=test_data%2Fconfig_demo.json&#x26;session=share-MZj3d18lzH&#x26;password=3X7bS">demo</a>
and
<a href="https://jbrowse.org/jb2/docs/user_guide/#viewing-whole-genome-coverage-for-profiling-cnv">tutorial</a>)</p>
<h2 id="the-future-with-graph-genomes-and-de-novo-assemblies"><a aria-hidden="true" tabindex="-1" href="#the-future-with-graph-genomes-and-de-novo-assemblies"><a href="#the-future-with-graph-genomes-and-de-novo-assemblies" style="margin-right: 10px">#</a></a>The future, with graph genomes and <em>de novo</em> assemblies</h2>
<p>Currently, SV visualization is highly based on comparing data versus a
reference genome (and the <code>SAM</code> format is a signature of this: it stores data
in terms of reference genome coordinates). In the future, SV visualization may
look more similar to comparative genomics, where we compare an SV to a
population specific reference from a graph genomes or something like this.</p>
<p>It is known that <em>de novo</em> assembly has more power to detect SVs than some read
operations (<a href="https://twitter.com/lh3lh3/status/1362921612690010118/photo/1">https://twitter.com/lh3lh3/status/1362921612690010118/photo/1</a>
as <em>de novo</em> assembled genomes improve and become more widespread, we may see a
shift in how SVs are called</p>
<p>I would also like to see improved ability to do fast or 'on the fly' gene
prediction on the <em>de novo</em> assembled genomes, and we can see what SNPs or
modified splicing might look like in copies of genes (e.g. derived regions of
the CNV duplications).</p>
<p>Fun fact: the
<a href="https://github.com/lh3/gfatools/blob/master/doc/rGFA.md#the-graph-alignment-format-gaf"><code>GAF</code></a>
(graphical alignment format) is a strict superset of
<a href="https://github.com/lh3/miniasm/blob/master/PAF.md"><code>PAF</code></a> (pairwise alignment
format) by storing graph node labels in the <code>target name</code> slot of <code>PAF</code>, and
can refer to an <code>rGFA</code> (reference genome graph)! Looking forward to the graph
genome world.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>Algorithms that actually call structural variants face many challenges, but
understanding how the reads are encoded in SAM format, and seeing what they
look like in the genome browser is a useful first step to gaining a better
understanding.</p>
<p>In summary, some of the signatures of SVs may include:</p>
<ul>
<li>Aberrant insert size (<code>TLEN</code>) detection (longer for deletion, shorter for
insertion)</li>
<li>Aberrant pair orientation (pairs are not pointing at each other)</li>
<li>Split-read detection (<code>SA</code> tag)</li>
<li><code>CIGAR</code> string processing (<code>D</code> operator for deletions, <code>I</code> operator for
insertions)</li>
<li>Over-abundance of clipping (<code>S</code> or <code>H</code> operators in <code>CIGAR</code>)</li>
<li>Depth of coverage changes for CNVs</li>
<li>Aligning <em>de novo</em> assembly vs a reference genome
(<a href="https://twitter.com/lh3lh3/status/1362921612690010118/photo/1">https://twitter.com/lh3lh3/status/1362921612690010118/photo/1</a>) which can
output <code>SAM</code>, but it can also output
<a href="https://github.com/lh3/miniasm/blob/master/PAF.md"><code>PAF</code></a> format (which can
be loaded in JBrowse 2 in the synteny views). Techniques of detecting SVs on
PAF will be fundamentally pretty similar to the techniques listed above but
may look a bit different (see <code>cs</code> tag in <code>PAF</code> for example, it is a modified
<code>CIGAR</code>-like string)</li>
</ul>
<p>If you have any ideas I should include here, let me know!</p>
<h3 id="appendix-a-parsing-cigar-strings"><a aria-hidden="true" tabindex="-1" href="#appendix-a-parsing-cigar-strings"><a href="#appendix-a-parsing-cigar-strings" style="margin-right: 10px">#</a></a>Appendix A: Parsing <code>CIGAR</code> strings</h3>
<p>This is code that can help determine the pair orientation from a single BAM
record. Might be too much detail but follow along</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">// @param flags - flags from a single read</span></span>
<span class="line"><span style="color: #767C9DB0">// @param ref - the string of the reference sequence, just used to determine if it matches rnext</span></span>
<span class="line"><span style="color: #767C9DB0">// @param rnext - the string of the RNEXT, just used to determine if it matches ref</span></span>
<span class="line"><span style="color: #767C9DB0">// @param tlen - the TLEN field from SAM</span></span>
<span class="line"><span style="color: #767C9DB0">// @return e.g. F1R2 normal paired end orientation</span></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getPairOrientation</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">flags</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">number</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">ref</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">rnext</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">tlen</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">number</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">// this read is not unmapped &#x26;&#x26;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">// this read's mate is also not unmapped &#x26;&#x26;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">// this read's mate is on the same reference genome</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">4</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">8</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">ref</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">rnext</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s1</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">16</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">?</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">R</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">F</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s2</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">32</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">?</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">R</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">F</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o1</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o2</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// if first in pair</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">64</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">o1</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">o2</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// else if second in pair</span></span>
<span class="line"><span style="color: #A6ACCD">    else if (</span><span style="color: #E4F0FB">flags</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x26;</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">128</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">o1</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">o2</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> []</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">tlen</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s1</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o1</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s2</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">3</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o2</span></span>
<span class="line"><span style="color: #A6ACCD">    } else {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s1</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">3</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o1</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s2</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">[</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">o2</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">tmp</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">join</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">''</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #D0679D">null</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then this can be broken down further by orientation type</p>
<p>Paired end reads are "fr"
Mate pair reads are "rf"</p>
<p>So you can interpret e.g. F1R2 in relation to being a paired end read (fr) or mate pair (rf) below and with this link <a href="https://software.broadinstitute.org/software/igv/interpreting_pair_orientations">https://software.broadinstitute.org/software/igv/interpreting_pair_orientations</a></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">fr</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F1R2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F2R1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F1F2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F2F1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R1R2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R2R1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R1F2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R2F1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RL</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">rf</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R1F2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R2F1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R1R2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">R2R1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">LL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F1F2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F2F1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F1R2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">F2R1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">RL</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h3 id="appendix-b---cigar-parsing"><a aria-hidden="true" tabindex="-1" href="#appendix-b---cigar-parsing"><a href="#appendix-b---cigar-parsing" style="margin-right: 10px">#</a></a>Appendix B - <code>CIGAR</code> parsing</h3>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">// @param cigar: CIGAR string in text form</span></span>
<span class="line"><span style="color: #767C9DB0">// @returns an array of elements like ['30','M', '2','I', '50','M', '40','D']</span></span>
<span class="line"><span style="color: #767C9DB0">// which you can consume in a loop two elements at a time</span></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">parseCigar</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">cigar</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">cigar</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">split</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">/([</span><span style="color: #5FB3A1">MIDNSHPX=</span><span style="color: #A6ACCD">])/</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then parse the returned array two at a time</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">// this function does nothing, but is informative for how to parse interpret a</span></span>
<span class="line"><span style="color: #767C9DB0">// CIGAR string</span></span>
<span class="line"><span style="color: #767C9DB0">// @param cigar:CIGAR string from record</span></span>
<span class="line"><span style="color: #767C9DB0">// @param readSeq: the SEQ from record</span></span>
<span class="line"><span style="color: #767C9DB0">// @param refSeq: the reference sequence underlying the read</span></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">interpretCigar</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">cigar</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">readSeq</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">refSeq</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">parseCigar</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">cigar</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0">// query position, position on the read</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0">// target position, position on the reference sequence</span></span>
<span class="line"><span style="color: #A6ACCD">  for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">ops</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">length</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">length</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">operator</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">]</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// do things. refer to the CIGAR chart in SAMv1.pdf for which operators</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0">// "consume reference" to see whether to increment</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">M</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">||</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">=</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// matches consume query and reference</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">refMatch</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">refSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">readMatch</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">readSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">        if (</span><span style="color: #E4F0FB">refMatch</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">!==</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">readMatch</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">]) {</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #767C9DB0">// SNP at this position</span></span>
<span class="line"><span style="color: #A6ACCD">        }</span></span>
<span class="line"><span style="color: #A6ACCD">      }</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// insertions only consume query</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// sequence of the insertion from the read is</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">insSeq</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">readSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">D</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// deletions only consume reference</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// sequence of the deletion from the reference is</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">delSeq</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">refSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tpad</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">N</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// skips only consume reference</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// skips are similar to deletions but are related to spliced alignments</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tpad</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">X</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// mismatch using the extended CIGAR format</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// could lookup the mismatch letter in a string containing the reference</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">mismatch</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">refSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">tpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">H</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// does not consume query or reference</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// hardclip is just an indicator</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">    if (</span><span style="color: #E4F0FB">op</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">===</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">S</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// softclip consumes query</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// below gets the entire soft clipped portion</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">softClipStr</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">readSeq</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">slice</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #E4F0FB">qpos</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span></span>
<span class="line"><span style="color: #A6ACCD">    }</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Note for example, that to determine how long a record is on the reference
sequence, you have to combine the records start position with the CIGAR string,
basically parsing the CIGAR string to add up tpos and return tpos</p>
<h3 id="appendix-c---align-fastq-directly-to-cram"><a aria-hidden="true" tabindex="-1" href="#appendix-c---align-fastq-directly-to-cram"><a href="#appendix-c---align-fastq-directly-to-cram" style="margin-right: 10px">#</a></a>Appendix C - align <code>FASTQ</code> directly to <code>CRAM</code></h3>
<p>This example from the htslib documentation
(<a href="http://www.htslib.org/workflow/fastq.html">http://www.htslib.org/workflow/fastq.html</a>
shows how you can stream directly from <code>FASTQ</code> to <code>CRAM</code> (and generate the
index file .crai too)</p>
<p>If you want, you can make this a little shell script, easy_align_shortreads.sh</p>
<p>easy_align_shortreads.sh</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">#!/bin/bash</span></span>
<span class="line"><span style="color: #A6ACCD">minimap2 -t 8 -a -x sr </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">3</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools fixmate -u -m - - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools sort -u -@2 - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools markdup -@8 --reference </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> - --write-index </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD">"</span></span></code></pre>
<p>Similar idea for longreads, except just a single fastq file is generally used for longreads</p>
<p>easy_align_longreads.sh</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">#!/bin/bash</span></span>
<span class="line"><span style="color: #A6ACCD">minimap2 -t 8 -a </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools fixmate -u -m - - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools sort -u -@2 - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools markdup -@8 --reference </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> - --write-index </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">3</span><span style="color: #A6ACCD">"</span></span></code></pre>
<p>Then call</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">bash easy_align_shortreads.sh ref.fa reads1.fq reads2.fq out.cram</span></span>
<span class="line"><span style="color: #A6ACCD">bash easy_align_longreads.sh ref.fa reads.fq out.cram</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">## output BAM instead</span></span>
<span class="line"><span style="color: #A6ACCD">bash easy_align_shortreads.sh ref.fa reads1.fq reads2.fq out.bam</span></span>
<span class="line"><span style="color: #A6ACCD">bash easy_align_longreads.sh ref.fa reads.fq out.bam</span></span></code></pre>
<p>This same concept works with other common aligners as well like bwa</p>
<p>Bonus: CRAM to bigwig, for looking at CNV/coverage</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">#!/bin/bash</span></span>
<span class="line"><span style="color: #767C9DB0"># quickalign.sh ref.fa 1.fq 2.fq out.cram</span></span>
<span class="line"><span style="color: #767C9DB0"># produces out.cram and out.bw</span></span>
<span class="line"><span style="color: #A6ACCD">samtools faidx $</span><span style="color: #E4F0FB">1</span></span>
<span class="line"><span style="color: #A6ACCD">minimap2 -t 8 -a -x sr </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">3</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools fixmate -u -m - - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools sort -u -@2 - </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> \</span></span>
<span class="line"><span style="color: #A6ACCD">samtools markdup -@8 --reference </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> - --write-index </span><span style="color: #A6ACCD">"$</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">mosdepth $</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD"> -f $</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD"> $</span><span style="color: #E4F0FB">4</span></span>
<span class="line"><span style="color: #A6ACCD">gunzip $</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD">.per-base.bed.gz</span></span>
<span class="line"><span style="color: #A6ACCD">bedGraphToBigWig $</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD">.per-base.bed $</span><span style="color: #E4F0FB">1</span><span style="color: #A6ACCD">.fa.fai $</span><span style="color: #E4F0FB">4</span><span style="color: #A6ACCD">.bw</span></span></code></pre>
<p>Call as "quickalign.sh ref.fa 1.fq 2.fq out.cram" gives you out.cram, out.cram.crai, and out.cram.bw (coverage)</p>
<h3 id="appendix-d---the-md-tag-and-finding-snps-in-reads"><a aria-hidden="true" tabindex="-1" href="#appendix-d---the-md-tag-and-finding-snps-in-reads"><a href="#appendix-d---the-md-tag-and-finding-snps-in-reads" style="margin-right: 10px">#</a></a>Appendix D - the <code>MD</code> tag and finding SNPs in reads</h3>
<p>The <code>MD</code> tag helps tell you where the mismatches are without looking at the
reference genome. This is useful because as I mentioned, <code>CIGAR</code> can say <code>50M</code>
(50 matches) but some letters inside those 50 matches can be mismatches, it
only says there are no insertions/deletions in those 50 bases, but you have to
determine where in those 50 bases where the mismatches are. The <code>MD</code> tag can
help tell you where those are, but it is somewhat complicated to decode
(<a href="https://vincebuffalo.com/notes/2014/01/17/md-tags-in-bam-files.html">https://vincebuffalo.com/notes/2014/01/17/md-tags-in-bam-files.html</a>).
You have to combine it with the <code>CIGAR</code> to get the position of the mismatches
on the reference genome. If you have a reference genome to look at, you might
just compare all the bases within the 50M to the reference genome and look for
mismatches yourself and forget about the <code>MD</code> tag</p>
<p>The <code>MD</code> tag is also not required to exist, but the command <code>samtools calmd yourfile.bam --reference reference.fa</code> can add <code>MD</code> tags to your <code>BAM</code> file. It
is generally not useful for <code>CRAM</code> because <code>CRAM</code> actually does store
mismatches with the reference genome in it's compression format. Note that
there are also some oddities about <code>MD</code> tag representation leading to
complaints (e.g. <a href="https://github.com/samtools/hts-specs/issues/505">https://github.com/samtools/hts-specs/issues/505</a>) leading more
credence to "doing it yourself" e.g. finding your own mismatches
by comparing the read sequence with the reference, keeping track of where you
are on the read and ref position with the <code>CIGAR</code> string (a la Appendix B)</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[How to make your own npm package with typescript]]></title>
            <link>https://cmdcolin.github.io/posts/2021-12-31-npm-package</link>
            <guid>https://cmdcolin.github.io/posts/2021-12-31-npm-package</guid>
            <pubDate>Fri, 31 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>There is a lot of mystery around making your own <code>npm</code> package. Every package
likely does it a bit differently, and it can be tricky to get a setup you like.
Should you use a "starter kit" or a boilerplate example? Or just roll your own?
Should you use a bundler? How do you use typescript? Well, why don't we try
starting from scratch and seeing where we can get?</p>
<p>TLDR: here is a github repo with a template package
<a href="https://github.com/cmdcolin/npm-package-tutorial/">https://github.com/cmdcolin/npm-package-tutorial/</a></p>
<h2 id="introduction"><a aria-hidden="true" tabindex="-1" href="#introduction"><a href="#introduction" style="margin-right: 10px">#</a></a>Introduction</h2>
<p>An <code>npm</code> package can be very bare bones. In some sense, npmjs.com is just an
arbitrary file host, and you can upload pretty much anything you want to it.</p>
<p>The magic is in the package.json file, which tells npm:</p>
<ul>
<li>what files are part of your package (by default, the whole folder with your
package.json is published, with the "files" field you can say what particular
folders or files are uploaded or you can use .npmignore to choose which files
NOT to publish)</li>
<li>what to use as the "entry point" (e.g. the file that should be referenced
when you say <code>const lib = require('mypackage')</code>, this is governed by the
"main" field, "module" field which is bundler specific, and "export maps"
which are newer but tricky)</li>
<li>what pre- and post- processing steps should be done when the package is being
published (the various "scripts", where you can have "clean", "build",
"test", "lint", "prebuild", etc)</li>
<li>and more!</li>
</ul>
<p>Let's try an experiment...</p>
<h1 id="part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format"><a aria-hidden="true" tabindex="-1" href="#part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format"><a href="#part-1-the-most-basic-package-with-plain-js-code-in-commonjs-format" style="margin-right: 10px">#</a></a>Part 1: the most basic package with plain JS code in commonjs format</h1>
<p>Open up a terminal, and run</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">mkdir mypackage</span></span>
<span class="line"><span style="color: #A6ACCD">cd mypackage</span></span>
<span class="line"><span style="color: #A6ACCD">git init </span><span style="color: #767C9DB0"># make mypackage version controlled</span></span>
<span class="line"><span style="color: #A6ACCD">npm init </span><span style="color: #767C9DB0"># or yarn init</span></span></code></pre>
<p>This init command outputs something like this, and we accept the defaults</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">This utility will walk you through creating a package.json file.</span></span>
<span class="line"><span style="color: #A6ACCD">It only covers the most common items, and tries to guess sensible defaults.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">See </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">npm help init</span><span style="color: #A6ACCD">`</span><span style="color: #A6ACCD"> for definitive documentation on these fields</span></span>
<span class="line"><span style="color: #A6ACCD">and exactly what they do.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">Use </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">npm install </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #5DE4C7">pkg</span><span style="color: #91B4D5">></span><span style="color: #A6ACCD">`</span><span style="color: #A6ACCD"> afterwards to install a package and</span></span>
<span class="line"><span style="color: #A6ACCD">save it as a dependency in the package.json file.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">Press ^C at any </span><span style="color: #5DE4C7">time</span><span style="color: #A6ACCD"> to quit.</span></span>
<span class="line"><span style="color: #A6ACCD">package name: (mypackage)</span></span>
<span class="line"><span style="color: #A6ACCD">version: (1.0.0)</span></span>
<span class="line"><span style="color: #A6ACCD">description:</span></span>
<span class="line"><span style="color: #A6ACCD">entry point: (index.js)</span></span>
<span class="line"><span style="color: #A6ACCD">test command:</span></span>
<span class="line"><span style="color: #A6ACCD">git repository:</span></span>
<span class="line"><span style="color: #A6ACCD">keywords:</span></span>
<span class="line"><span style="color: #A6ACCD">license: (ISC)</span></span>
<span class="line"><span style="color: #A6ACCD">About to write to /home/cdiesh/mypackage/package.json:</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">description</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">""</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">test</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo </span><span style="color: #5FB3A1">\"</span><span style="color: #5DE4C7">Error: no test specified</span><span style="color: #5FB3A1">\"</span><span style="color: #5DE4C7"> &#x26;&#x26; exit 1</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">author</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">license</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">ISC</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span></code></pre>
<p>Then, you can create a file named <code>index.js</code> (in your package.json it says
<code>"main": "index.js"</code> to refer to this file, the entrypoint)</p>
<p>In your <code>index.js</code> file, generally, you would do things like export a function
or functions. I will use commonjs exports here for maximum compatibility:</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">hello</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">()</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=></span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello world</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">  </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="publishing-a-package"><a aria-hidden="true" tabindex="-1" href="#publishing-a-package"><a href="#publishing-a-package" style="margin-right: 10px">#</a></a>Publishing a package</h2>
<p>This npm package, <code>mypackage</code> can now be published to <code>npm</code> with a simple
command.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm publish</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn publish</span></span></code></pre>
<p>This will prompt you for your npmjs.com username, password, email, and if
needed, 2FA token (highly recommended)</p>
<h2 id="using-your-package-after-it-is-published"><a aria-hidden="true" tabindex="-1" href="#using-your-package-after-it-is-published"><a href="#using-your-package-after-it-is-published" style="margin-right: 10px">#</a></a>Using your package after it is published</h2>
<p>Once it is published, you can use it in your create-react-app app or other npm
package.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm install mypackage</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add mypackage</span></span></code></pre>
<p>Then you can use</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">hello</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">'</span></span></code></pre>
<p>in any of your other codebases</p>
<h2 id="summary-of-the-simplest-npm-package"><a aria-hidden="true" tabindex="-1" href="#summary-of-the-simplest-npm-package"><a href="#summary-of-the-simplest-npm-package" style="margin-right: 10px">#</a></a>Summary of the simplest NPM package</h2>
<p>This all seems pretty boring thus far but it tells us a couple things</p>
<ol>
<li>packages can be very very bare bones</li>
<li>no transpiler or bundler is needed for publishing an npm package</li>
<li>our package can consist of a single file and it is uploaded to npm, and the
"main" field in package.json provides an entry point</li>
<li>the filename index.js is not special, probably it is a hangover from the
name index.html. you can use whatever name you want</li>
</ol>
<h1 id="part-2-adding-typescript"><a aria-hidden="true" tabindex="-1" href="#part-2-adding-typescript"><a href="#part-2-adding-typescript" style="margin-right: 10px">#</a></a>Part 2: Adding typescript</h1>
<p>Let's try adding typescript</p>
<p>To do this, we will use the typescript compiler to compile a directory of files
in our "src" directory and output the compiled files to a directory named
"dist"</p>
<p>To start, let's add typescript</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm install --save-dev typescript</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add -D typescript</span></span></code></pre>
<p>Our package.json now will have <code>typescript</code> in it's <code>devDependencies</code> (this
means that when someone installs your package, it they don't get typescript as
a dependency, it is just a dependency for while you are developing the library
locally).</p>
<p>Then we need to create a tsconfig.json for typescript to use</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">yarn tsc --init</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">npx tsc --init</span></span></code></pre>
<p>This will generate a <code>tsconfig.json</code> file (needed by <code>typescript</code>) with a bunch of
options, but I have stripped it down in my projects to look like this</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">include</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">compilerOptions</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">target</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">es2018</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">moduleResolution</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0">// don't have to import actual filenames, can import extensionless files</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">declaration</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0">// generate .d.ts files</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">sourceMap</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0">// generate source map</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">outDir</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0">// output compiled js, d.ts, and source map to dist folder</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">strict</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">esModuleInterop</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Now, let's wrote a little typescript. We can now use "ESM" style code, we will
compile it to commonjs format.</p>
<p>util.ts</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>index.ts</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./util</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">sayMessage</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">getMessage</span><span style="color: #A6ACCD">())</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>And then we will add a <code>"build"</code> script to <code>package.json</code> to compile the
library, and refer to the <code>"dist"</code> directory for the <code>"files"</code> and <code>"main"</code>
fields in <code>package.json</code></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">mypackage</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">version</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">1.0.0</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">description</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">""</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src/index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">], </span><span style="color: #767C9DB0">// we publish both dist and src to get proper sourceMaps</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">author</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Colin</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">license</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">ISC</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.5.4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>We can now run</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm run build</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn build</span></span></code></pre>
<p>And this will run the <code>"build"</code> script we created, which in turn, just runs
<code>tsc</code> with no arguments.</p>
<p>You can also add a <code>"prebuild"</code> script that clears out the old contents. In fact,
npm scripts generalizes the naming system -- you can make scripts with whatever name you want, e.g.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">preparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo preparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">party</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo party</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">postparty</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">echo postparty</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then running</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">$ yarn party</span></span>
<span class="line"><span style="color: #A6ACCD">preparty</span></span>
<span class="line"><span style="color: #A6ACCD">party</span></span>
<span class="line"><span style="color: #A6ACCD">postparty</span></span></code></pre>
<p>To make this useful, we will use <code>rimraf</code> (a node package) to make a
cross-platform removal of the <code>dist</code> directory</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm install --save-dev rimraf</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add -D rimraf</span></span></code></pre>
<p>and then update your package.json</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">rimraf dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">prebuild</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run clean</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">rimraf</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^3.0.2</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">typescript</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">^4.5.4</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>We could make it say "rm -rf dist" instead of "rimraf dist" (e.g. run arbitrary
shell commands), but rimraf allows it to be cross-platform</p>
<h2 id="making-sure-you-create-a-fresh-build-before-you-publish"><a aria-hidden="true" tabindex="-1" href="#making-sure-you-create-a-fresh-build-before-you-publish"><a href="#making-sure-you-create-a-fresh-build-before-you-publish" style="margin-right: 10px">#</a></a>Making sure you create a fresh build before you publish</h2>
<p>Without extra instructions, your <code>yarn publish</code> command would not create a
fresh build and you could publish an older version that was lingering in the
<code>dist</code> folder.</p>
<p>We can use a <code>preversion</code> script that will automatically get invoked when you
run <code>yarn publish</code> to make sure you get a fresh build in the <code>dist</code> folder
before you publish</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">preversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="making-sure-you-push-your-tag-to-github-after-publish"><a aria-hidden="true" tabindex="-1" href="#making-sure-you-push-your-tag-to-github-after-publish"><a href="#making-sure-you-push-your-tag-to-github-after-publish" style="margin-right: 10px">#</a></a>Making sure you push your tag to github after publish</h2>
<p>When you run <code>yarn publish</code>, npm will automatically create a commit with the
version name and a git tag, it <em>will not</em> automatically push tag to your
repository.</p>
<p>Add a <code>postversion</code> script that pushes the tag to your repo after your publish</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">postversion</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">git push --follow-tags</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<h2 id="incremental-builds"><a aria-hidden="true" tabindex="-1" href="#incremental-builds"><a href="#incremental-builds" style="margin-right: 10px">#</a></a>Incremental builds</h2>
<p>We can use this to do incremental/watch builds</p>
<pre><code>npm run build --watch
# or
yarn build --watch
</code></pre>
<h2 id="adding-testing-with-ts-jest"><a aria-hidden="true" tabindex="-1" href="#adding-testing-with-ts-jest"><a href="#adding-testing-with-ts-jest" style="margin-right: 10px">#</a></a>Adding testing with ts-jest</h2>
<p>You can use ts-jest to test your code. This involves installing jest, typescript, ts-jest, @types/jest, and then initializing a jest.config.json</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm i -D jest typescript</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add --dev jest typescript</span></span></code></pre>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npm i -D ts-jest @types/jest</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn add --dev ts-jest @types/jest</span></span></code></pre>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">npx ts-jest config:init</span></span>
<span class="line"><span style="color: #767C9DB0"># or</span></span>
<span class="line"><span style="color: #A6ACCD">yarn ts-jest config:init</span></span></code></pre>
<p>We can then create a test</p>
<p><code>test/util.spec.ts</code></p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">getMessage</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">../src/util</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">expected message returned</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">getMessage</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">hello</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>Then we can then create a script in the package.json that says <code>"test": "jest"</code>, and then we can say</p>
<pre><code>npm run test
# or
yarn test
</code></pre>
<p>You can also create an alternative system where you use <code>babel-eslint</code> and
various babel strategies to test your code, but if you are using <code>typescript</code>,
<code>ts-jest</code> and <code>typescript</code> works great.</p>
<h2 id="add-a-gitignore"><a aria-hidden="true" tabindex="-1" href="#add-a-gitignore"><a href="#add-a-gitignore" style="margin-right: 10px">#</a></a>Add a .gitignore</h2>
<p>Create a .gitignore with just a line that references this <code>dist</code> folder and <code>node_modules</code> folder</p>
<pre><code>dist
node_modules
</code></pre>
<h2 id="the-future-of-esm-modules"><a aria-hidden="true" tabindex="-1" href="#the-future-of-esm-modules"><a href="#the-future-of-esm-modules" style="margin-right: 10px">#</a></a>The future of ESM modules</h2>
<p>There is a shift happening where modules are changing to be pure ESM rather
than keeping commonjs equivalents</p>
<p><a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></p>
<p>There are many challenges here, but one shortcut that I have used is to
actually go "halfway to ESM" and just publish a "dual" package: one "main"
field in the package.json referring to a commonjs file, and one "module" field
with an ESM style build for bundlers. I do it like this:</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">:[</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">     </span><span style="color: #D0679D">...</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">cleam</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">:</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">rimraf dist esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build:cjs</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --module commonjs --ourDir dist</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build:esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tsc --target es2018 --outDir esm</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build:esm &#x26;&#x26; npm run build:cjs</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  },</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dist/index.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">module</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">esm/index.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The "module" field is understood by bundlers like webpack and you can do
slightly less polyfilling/babeling on it (hence the different <code>--target</code>
attributes)</p>
<p>This is not "pure ESM" with the "type":"module" in package.json, but it does
help to have less "babelification" (which in our case is done by tsc) of your
source code.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>This tutorial shows you how you can create a basic package that you can publish
to <code>npm</code>. This little boilerplate includes these features:</p>
<ul>
<li>Makes clean build when running <code>yarn build</code> or <code>yarn publish</code></li>
<li>Pushes to github after publish</li>
<li>Uses <code>ts-jest</code> for testing</li>
<li>Uses esm modules</li>
</ul>
<p>You also have full control, and understand the decisions we took to get to this
point. This package does not use any bundling (rollup or webpack or otherwise).
It just uses <code>tsc</code> is used to compile the files to the <code>dist</code> folder, and the
dist folder is published to <code>npm</code>!</p>
<p>If you need your package to be usable by consumers that don't themselves use
bundlers, consider looking into <code>&#x3C;script type="module"></code> for importing ESM
modules in the browser, or you can bundle your library using rollup or webpack
and output e.g. a UMD bundle</p>
<h2 id="final-product"><a aria-hidden="true" tabindex="-1" href="#final-product"><a href="#final-product" style="margin-right: 10px">#</a></a>Final product</h2>
<p>See <a href="https://github.com/cmdcolin/npm-package-tutorial/">https://github.com/cmdcolin/npm-package-tutorial/</a></p>
<h2 id="footnote-1"><a aria-hidden="true" tabindex="-1" href="#footnote-1"><a href="#footnote-1" style="margin-right: 10px">#</a></a>Footnote 1</h2>
<p>See my follow up rant <a href="https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler">https://cmdcolin.github.io/posts/2022-05-27-youmaynotneedabundler</a></p>
<h2 id="footnote-2"><a aria-hidden="true" tabindex="-1" href="#footnote-2"><a href="#footnote-2" style="margin-right: 10px">#</a></a>Footnote 2</h2>
<p>This is a setup that works for me, but there are many ways to publish a package
so take it with a grain of salt!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[My next.js static blog setup]]></title>
            <link>https://cmdcolin.github.io/posts/2021-12-26-nextjs</link>
            <guid>https://cmdcolin.github.io/posts/2021-12-26-nextjs</guid>
            <pubDate>Sun, 26 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>TLDR src here <a href="https://github.com/cmdcolin/cmdcolin.github.io">https://github.com/cmdcolin/cmdcolin.github.io</a></p>
<p>My personal homepage originally used statocles, a perl-based static site
generator (<a href="http://preaction.me/statocles/">http://preaction.me/statocles/</a>). I didn't really blog using it, just
a homepage for myself plus some links to my tumblr blog. But, if I linked
people to the tumblr blog directly, it would give people terrible popup ads and
trackers. So, I switched to github pages+next.js this year. I considered a
number of alternative static site systems, but next.js seemed to hit some nice
goals</p>
<ul>
<li>Flexible</li>
<li>React-based (as opposed to template-based like jekyll, eleventy, etc.)</li>
<li>Markdown driven, and can use MDX (edit 2022: I removed MDX, I disliked the
complicated that it brought. Now all posts are plain markdown, parsed with
<code>remark-gfm</code> for github flavored markdown, and all pages are <code>tsx</code>)</li>
<li>RSS feed (bonus)</li>
<li>Active community</li>
</ul>
<p>Other systems almost worked and were attempted but aborted</p>
<h3 id="first-and-second-iterations"><a aria-hidden="true" tabindex="-1" href="#first-and-second-iterations"><a href="#first-and-second-iterations" style="margin-right: 10px">#</a></a>First and second iterations</h3>
<p>The first iteration of my next.js blog</p>
<ul>
<li>I put every blog post in the "pages" folder. This worked ok but I had to
manually edit the index.mdx file to have long lists of stuff like this
<code>![link to new blogpost](manually_inserted_link_here)</code></li>
</ul>
<p>The second iteration, I wanted to automatically generate a list of recent
blogposts from files on disk</p>
<ul>
<li>
<p>I used the next.js "blog-template-typescript" example folder from their
<a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript">monorepo</a>.</p>
</li>
<li>
<p>The new blog posts are generated from markdown files in the <code>_posts</code> folder,
and get rendered by the file <code>pages/posts/[slug].tsx</code> (yes, the filename
includes square brackets).</p>
</li>
<li>
<p>getAllPosts in<br>
<a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/master/lib/api.ts"><code>lib/api.ts</code></a>
gets a listing of the files in _posts folder, which I can call from the <code>getStaticProps</code> method on next.js pages</p>
</li>
</ul>
<h3 id="stripping-off-unnecessary-stuff-from-blog-starter-typescript"><a aria-hidden="true" tabindex="-1" href="#stripping-off-unnecessary-stuff-from-blog-starter-typescript"><a href="#stripping-off-unnecessary-stuff-from-blog-starter-typescript" style="margin-right: 10px">#</a></a>Stripping off unnecessary stuff from blog-starter-typescript</h3>
<p>The <code>blog-starter-typescript</code> template has many tiny components, I removed some
of them to make it easier for me to orient myself</p>
<ul>
<li><a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter/components">theirs</a></li>
<li><a href="https://github.com/cmdcolin/cmdcolin.github.io/tree/master/components">mine</a></li>
</ul>
<h3 id="removing-tailwind-css"><a aria-hidden="true" tabindex="-1" href="#removing-tailwind-css"><a href="#removing-tailwind-css" style="margin-right: 10px">#</a></a>Removing tailwind CSS</h3>
<p>The <code>blog-starter-typescript</code> template uses tailwind CSS and uses "modern web
design" (aka: gigantic "tiles" instead of links, images that are way too large,
etc <a href="https://next-blog-starter.vercel.app/">https://next-blog-starter.vercel.app/</a>)</p>
<p>I started making a more basic design. I tried to roll with the tailwind CSS for
a bit, but ended up removing it entirely.</p>
<p>Tailwind CSS is sort of like a CSS-in-JS system, except every CSS attribute is encoded in a CSS classname. For example, here are some tailwind CSS snippets</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">container mx-auto px-5</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">footer</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">bg-accent-1 border-t border-accent-2</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">footer</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">max-w-1xl mx-auto</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">min-h-screen</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">a</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hover:underline</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">a</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">h1</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #5FB3A1">className</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text-2xl md:text-2xl lg:text-2xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">h1</span><span style="color: #E4F0FB">></span></span></code></pre>
<p>They claim this is better than using external CSS (see comparison here
<a href="https://tailwindcss.com/docs/utility-first">https://tailwindcss.com/docs/utility-first</a>) but it is yet another language to
learn, and kind of tricky.</p>
<p>But, the reason I gave up with tailwind is actually because tailwind CSS resets
a lot of HTML styles so things like <code>&#x3C;h1></code>, <code>&#x3C;h2></code>, <code>&#x3C;ul></code>, <code>&#x3C;li></code>, <code>&#x3C;a></code> have
no styling at all. This is done by <code>tailwind preflight</code>
<a href="https://tailwindcss.com/docs/preflight">https://tailwindcss.com/docs/preflight</a> (which you can disable, but it is
enabled by default)</p>
<p>Stackoverflow has some ways to help restore styling and keep preflight, but it
still struck me as odd. Examples</p>
<ul>
<li>
<p><a href="https://stackoverflow.com/a/68853223/2129219">Example: you have to manually restore underlines on <code>&#x3C;a></code> elements if using tailwind XSS</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/69264976/cant-display-markdown-on-nextjs">Another example: "It looks like you're using TailwindCSS, the default
styles for elements are reset, that's why the h1 text will look like any other
text."</a></p>
</li>
<li>
<p><a href="https://raw.githubusercontent.com/vercel/next.js/canary/examples/blog-starter-typescript/components/markdown-styles.module.css">Another example <code>blog-template-typescript</code> uses this file to try to style
the markdown using some general
styles</a></p>
</li>
</ul>
<p>To me it was surprising the extend that tailwind goes to unstyle the default
browser styles, removing "idiomatic HTML" styles, so I removed tailwind for
now. Perhaps I'll return to it another time</p>
<h2 id="using-mdx-for-blogposts-in-nextjs"><a aria-hidden="true" tabindex="-1" href="#using-mdx-for-blogposts-in-nextjs"><a href="#using-mdx-for-blogposts-in-nextjs" style="margin-right: 10px">#</a></a>Using MDX for blogposts in next.js</h2>
<p>(UPDATE 2022) I no longer use MDX in my blog, my blogposts are all plain
markdown and pages tsx, but leave this here for reference</p>
<p>In the template from next.js team, the <code>blog-template-typescript</code>, it uses a
fairly simple <code>lib/markdownToHtml.ts</code> function right in the
<code>pages/posts/[slug].tsx</code> file (the markdown is statically pre-rendered in the
true static blog sense, using the getStaticProps function). This is,
unfortunately, over-simplified for the MDX case, because MDX properly needs to
hydrate the components using react on the client side also</p>
<p>To fix, the module <a href="https://github.com/hashicorp/next-mdx-remote">https://github.com/hashicorp/next-mdx-remote</a> offers a way to
load actual MDX files.</p>
<h2 id="adding-syntax-highlighting-the-nextjs-code-snippets"><a aria-hidden="true" tabindex="-1" href="#adding-syntax-highlighting-the-nextjs-code-snippets"><a href="#adding-syntax-highlighting-the-nextjs-code-snippets" style="margin-right: 10px">#</a></a>Adding syntax highlighting the next.js code snippets</h2>
<p>(UPDATE 2022) I changed to using plain remark with
<a href="https://github.com/wooorm/starry-night">https://github.com/wooorm/starry-night</a>
(UPDATE 2022 v2) I changed from
starry-night to rehype-highlight. starry-night did not have good typescript/tsx
support</p>
<p>There are a couple results from google about how to add syntax highlighting to
next.js but I still found it difficult.</p>
<p>My method ended up a bit different where I manually included the prism JS and
CSS from a CDN essentially and it worked</p>
<p><a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15">https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/styles/index.css#L14-L15</a></p>
<p><a href="https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17">https://github.com/cmdcolin/cmdcolin.github.io/blob/aa080193f45cb3e3d11ca1ead2bbd5eb2ae09633/pages/_document.tsx#L12-L17</a></p>
<p>Other methods e.g. adding react-prism in next.config.js (like
<a href="https://github.com/mikeesto/next-mdx-prism-example">https://github.com/mikeesto/next-mdx-prism-example</a> does) I think clashed with
MDXRemote perhaps, or maybe I was tussling with tailwind CSS too much to make a
clear thought out of it, but syntax blocks on my blogposts should now be
properly highlighted</p>
<h2 id="rss-feed"><a aria-hidden="true" tabindex="-1" href="#rss-feed"><a href="#rss-feed" style="margin-right: 10px">#</a></a>RSS feed</h2>
<p>I also followed this great guide to add a RSS file for next.js
<a href="https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site">https://ashleemboyer.com/how-i-added-an-rss-feed-to-my-nextjs-site</a></p>
<p>Link here, for your feed readers
<a href="https://cmdcolin.github.io/rss.xml">https://cmdcolin.github.io/rss.xml</a></p>
<p>Not many people may use RSS much anymore, but I do use it (via feedly), and I
love music blogs that keep posting on blogspot year after year, and the
occasional programming post is nice too</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[A spooky error when you have a string bigger than 512MB in Chrome]]></title>
            <link>https://cmdcolin.github.io/posts/2021-10-30-spooky</link>
            <guid>https://cmdcolin.github.io/posts/2021-10-30-spooky</guid>
            <pubDate>Sat, 30 Oct 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Now gather round for a spooky story</p>
<p>Late one night... in the haunted office/castle the midnight candles
were burning bright and we entered data for a user file....</p>
<p>(hindenbugs cackling in the background, dusty technical books line the dark
shelves)</p>
<p>A simple 52MB gzipped datafile that we want to process in the browser. We unzip
it, decode it, and ... we see an error!!! <strong>LIGHTNING CRACKS</strong></p>
<p><img src="/media/pumpkin-dark.jpg" alt=""></p>
<p>But... our code is so simple (we of course abide by the religion of writing
"simple code" you know)...what could be happening?</p>
<p>The code looks like this</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">unzip</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">file</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">str</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">TextDecoder</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">decode</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD">)</span></span></code></pre>
<p>We trace it back and run a <code>console.log(str)</code></p>
<p>It looks empty. We try running <code>console.log(str.length)</code> ... it prints out 0</p>
<p>But if we look at <code>console.log(buffer.length)</code> we get 546,483,710 bytes...</p>
<p>What could be happening?</p>
<p>We see in the <code>TextDecoder</code> documentation that it has a note called "fatal". We
try</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">unzip</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">file</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">str</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">TextDecoder</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">utf8</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, {</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">fatal</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">true</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}).</span><span style="color: #E4F0FBD0">decode</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD">)</span></span></code></pre>
<p>This doesn't change the results though</p>
<p>Then it dawns on us while the lightning hits and the thunderclap booms and the
wind blows through the rattly windows</p>
<p>We have hit...the maximum string length in Chrome</p>
<p>BWAHAHAHAHA</p>
<p>The maximum string length!!! Nooooooo</p>
<p>It is 512MB on the dot... 536,870,888 bytes. We test this to be sure</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">536_870_888</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Uint8Array</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">len</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">a</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">charCodeAt</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">str</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">TextDecoder</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">decode</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">buf</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">str</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">length</span><span style="color: #A6ACCD">)</span></span></code></pre>
<p>This is correct, outputs 536,870,888</p>
<p>With anything, even one byte more, it fails and outputs 0</p>
<p>happy halloween!!</p>
<p>pumpkin photo source:
<a href="http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html">http://mountainbikerak.blogspot.com/2010/11/google-chrome-pumpkin.html</a></p>
<ul>
<li>
<p>chrome 95 tested</p>
</li>
<li>
<p>nodejs 15 - at 512MB+1 bytes it prints an error message <code>Error: Cannot create a string longer than 0x1fffffe8 characters</code> for significantly greater than 512MB
e.g. 600MB it actually prints a different error <code>TypeError [ERR_ENCODING_INVALID_ENCODED_DATA]: The encoded data was not valid for encoding utf-8</code>)</p>
</li>
<li>
<p>firefox 93 - goes up to ~1GB but then gives Exception <code>{ name: "NS_ERROR_OUT_OF_MEMORY", message: "", result: 2147942414 }</code></p>
</li>
<li>
<p>midori 6 (safari-alike/webkit) - goes up to ~2GB fine! will have to test more</p>
</li>
</ul>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Jest parallelization, globals, mocks, and squawkless tests]]></title>
            <link>https://cmdcolin.github.io/posts/2021-10-05-jest</link>
            <guid>https://cmdcolin.github.io/posts/2021-10-05-jest</guid>
            <pubDate>Tue, 05 Oct 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I found that there is a little bit of confusion and misunderstanding around how
things like parallelization work in jest, which sometimes leads to additional
hacking around problems that may not exist or speculating incorrectly about
test failure. This is also of course a point of concern when you have code that
for some reason or another uses global variables. Here are a short summary of
things that may cause confusion.</p>
<h2 id="tests-in-a-single-file-are-not-run-in-parallel"><a aria-hidden="true" tabindex="-1" href="#tests-in-a-single-file-are-not-run-in-parallel"><a href="#tests-in-a-single-file-are-not-run-in-parallel" style="margin-right: 10px">#</a></a>Tests in a single file are NOT run in parallel</h2>
<p>Simple example, the global variable r is included in the test condition, but it
is accurately run in all cases because the tests are not run in parallel.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">setTimeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">describe</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">tests</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">it</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">t3</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">r</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toBe</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">r</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  })</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>This test will take 3 seconds, and will accurately count the global variable.
If it was in parallel, it may only take 1 second, and would inaccurately count
the global variable due to race conditions</p>
<h2 id="tests-in-different-files-are-run-in-parallel"><a aria-hidden="true" tabindex="-1" href="#tests-in-different-files-are-run-in-parallel"><a href="#tests-in-different-files-are-run-in-parallel" style="margin-right: 10px">#</a></a>Tests in different files ARE run in parallel</h2>
<p>Let's take another example where we use a global variable, and then two
different tests use the global variable.</p>
<p>file_using_some_globals.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #91B4D5">++</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myGlobal</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">resetMyGlobal</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myGlobal</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Promise</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">setTimeout</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">resolve</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">ms</span><span style="color: #A6ACCD">))</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>test_global_vars1.test.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./dostuff</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">file1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toEqual</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">2</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>test_global_vars2.test.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">import </span><span style="color: #A6ACCD">{</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">doStuff</span><span style="color: #A6ACCD">,</span><span style="color: #5DE4C7"> </span><span style="color: #ADD7FF">timeout</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">from</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./dostuff</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">file1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">timeout</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1000</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FBD0">doStuff</span><span style="color: #A6ACCD">()).</span><span style="color: #E4F0FBD0">toEqual</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>This test completes in less than 2 seconds, and these tests are run in
parallel. They use different instances of the global state, and therefore have
no worries with colliding their state.</p>
<h2 id="does-a-mock-from-one-test-affect-another-test"><a aria-hidden="true" tabindex="-1" href="#does-a-mock-from-one-test-affect-another-test"><a href="#does-a-mock-from-one-test-affect-another-test" style="margin-right: 10px">#</a></a>Does a mock from one test affect another test?</h2>
<p>While seeking the fabled "squawk-less" test, it is often useful to mock console
so that tests that produce an expected error don't actually print an error
message. However, if not done carefully, you will remove errors across tests</p>
<p>So, could a mock from one test affect another test? If it's in the same file,
yes!</p>
<p>mock_console.test.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">fn</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">wow</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toHaveBeenCalled</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">// this console.error will not appear because test1 mocked away console.error</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">// without restoring it</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Help I can't see!</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>To properly mock these, you should restore the console mock at the end of your
function</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test1</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">orig</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">fn</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should not see this!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">expect</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">toHaveBeenCalled</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">orig</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test2</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">consoleMock</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">jest</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">spyOn</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">error</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">mockImplementation</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should not see this!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">consoleMock</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">mockRestore</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FBD0">test</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">test3</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">I should see this error!</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<h2 id="add-on-achieve-squawkless-tests"><a aria-hidden="true" tabindex="-1" href="#add-on-achieve-squawkless-tests"><a href="#add-on-achieve-squawkless-tests" style="margin-right: 10px">#</a></a>Add-on: Achieve squawkless tests!</h2>
<p>Your test output should just be a big list of PASS statements, not interleaved
with console.error outputs from when you are testing error conditions of your
code</p>
<p>"Squawkless tests" is a term I made up, but it means that if you have code
under test that prints some errors to the console, then mock the console.error
function, as in the previous section. Don't stand for having a bunch of verbose
errors in your CI logs! However, I also suggest only mocking out console.error
for tests that are <strong>expected</strong> to have errors, lest you paper over unexpected
errors.</p>
<p><img src="/media/squawkless_tests.png" alt=""></p>
<p>Figure: a nice clean test suite without a bunch of crazy console.error outputs</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>Getting better at testing requires exercise, and understanding the basics of
your tools can help! Hopefully this helps you achieve a better understanding
and write cleaner jest tests.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Decrease your idle CPU usage when developing typescript apps with this one weird environment variable]]></title>
            <link>https://cmdcolin.github.io/posts/2021-09-05-typescript</link>
            <guid>https://cmdcolin.github.io/posts/2021-09-05-typescript</guid>
            <pubDate>Sun, 05 Sep 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>TL;DR:</p>
<p>add this to your bashrc</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> TSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling</span></span></code></pre>
<p>By default, the typescript watcher configuration e.g. tsc --watch or whatever
is run internally to a create-react-app typescript app (I see it in the process
manager as fork-ts-checker-webpack-plugin cpu usage) can have high idling
(doing nothing...) CPU usage</p>
<p>This is because the default configuration polls for file changes (constantly
asks the computer if there are changes every 250ms or so). There is an
alternative configuration for this to change it to a file watcher so it
receives file system notifications on file change. There is discussion here on
this.</p>
<p>The main summary is that a env variable set to
TSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling allows this</p>
<p><a href="https://github.com/microsoft/TypeScript/issues/31048">https://github.com/microsoft/TypeScript/issues/31048</a></p>
<p>The issue thread shows that it can go from roughly ~7% idle CPU usage to 0.2%.
This corresponds with what I see too after applying this! Detailed docs for
typescript discuss some of the reasoning behing not making this the default</p>
<p><a href="https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/Configuring%20Watch.md#background">https://github.com/microsoft/TypeScript-Handbook/blob/master/pages/Configuring%20Watch.md#background</a></p>
<p>It claims that some OS specific behaviors of file watching could be harmful to
making it the default. For example, that (maybe?) on linux, it may use a large
number of file watchers which can exceed notify handles (this is a setting I
commonly have to increase in linux, guide here
<a href="https://dev.to/rubiin/ubuntu-increase-inotify-watcher-file-watch-limit-kf4">https://dev.to/rubiin/ubuntu-increase-inotify-watcher-file-watch-limit-kf4</a>)</p>
<p>PS: if you have a package.json of a <code>create-react-app --template typescript</code> or
something like this then you can edit the package.json to apply this
automatically</p>
<pre><code>-"start": "react-scripts start"
+"start": "cross-env TSC_WATCHFILE=UseFsEventsWithFallbackDynamicPolling react-scripts start"
</code></pre>
<p>Phew. I can already feel my laptop running cooler...or at least I can sleep
more soundly knowing that my readers adopt this and save some CPU cycles for
planet earth...and hopefully don't run into any of the caveats</p>
<p>Edit: It may be worth it to note, the 'UseFsEvents' part of this uses the
node.js fs.watch API and the polling based API is based on fs.watchFile</p>
<p>Fun table of how the watchers are implemented on different OSs
[<a href="https://github.com/microsoft/TypeScript/issues/31048#issuecomment-495483957">1</a>]</p>
<pre><code>On Linux systems, this uses inotify(7).
On BSD systems, this uses kqueue(2).
On macOS, this uses kqueue(2) for files and FSEvents for directories.
On SunOS systems (including Solaris and SmartOS), this uses event ports.
On Windows systems, this feature depends on ReadDirectoryChangesW.
On Aix systems, this feature depends on AHAFS, which must be enabled.
</code></pre>
<p>And in general, these should all respond more or less the same, but there are
small corner cases that are discussed
<a href="https://nodejs.org/docs/latest/api/fs.html#fs_availability">https://nodejs.org/docs/latest/api/fs.html#fs_availability</a></p>
<p>Disclaimer: it may be worth reading the reasons that typescript does not have
this enabled by default before pushing this into your dev environment and all
your teammates, but as far as I could tell, it seems ok!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[An amazing error message if you put more than 2^24 items in a JS Map object]]></title>
            <link>https://cmdcolin.github.io/posts/2021-08-15-map-limit</link>
            <guid>https://cmdcolin.github.io/posts/2021-08-15-map-limit</guid>
            <pubDate>Sun, 15 Aug 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>One of the fun things about working with big data is that you can often hit
weird limits with a system.</p>
<p>I was personally trying to load every 'common' single nucleotide polymorphism
for the human genome into memory (dbSNP), of which there are over 37 million
entries (there are many more uncommon ones) for the purposes of making a custom
search index for them [1].</p>
<p>Turns out, you may run into some hard limits. Note that these are all V8-isms
and may not apply to all browsers or engines (I was using node.js for this)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Map</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">50_000_000</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">set</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">%</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">100000</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">==</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This will crash after adding approx 16.7M elements and say</p>
<pre><code>0
100000
200000
...
16400000
16500000
16600000
16700000

Uncaught RangeError: Value undefined out of range for undefined options
property undefined
</code></pre>
<p>That is a very weird error message. It says "undefined" three times! Much
better than your usual <code>TypeError: Can’t find property ‘lol’ of undefined</code>. See
<a href="https://bugs.chromium.org/p/v8/issues/detail?id=11852">https://bugs.chromium.org/p/v8/issues/detail?id=11852</a>
for a bug filed to help improve the error message perhaps.</p>
<p>Now, also interestingly enough, if you use an Object instead of a Map</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {};</span></span>
<span class="line"><span style="color: #A6ACCD">for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">50_000_000</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD">[</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">myobj_’+i]=i</span><span style="color: #D0679D">;</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">if</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">%</span><span style="color: #5DE4C7">100000</span><span style="color: #91B4D5">==</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span><span style="color: #E4F0FB"> console.log(i) </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then it will print...</p>
<pre><code>0
100000
200000
...
8000000
8100000
8200000
8300000
</code></pre>
<p>And it will actually just hang there...frozen...no error message though! And it
is failing at ~8.3M elements. Weird right? This is roughly half the amount of
elements as the 16.7M case</p>
<p>Turns out there is a precise hard limit for the Map case</p>
<p>For the Map: 2^24=16,777,216</p>
<p>For the Object it is around 2^23=8,388,608 HOWEVER, I can actually add more
than this, e.g. I can add 8,388,609 or 8,388,610 or even more, but the
operations start taking forever to run, e.g. 8,388,999 was taking many minutes</p>
<p>Very weird stuff! If you expected me to dig into this and explain it in deep
technical detail, well, you’d be wrong. However, this helpful post on
stackoverflow by a V8 js engine developer clarifies the Map case!!
<a href="https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map">https://stackoverflow.com/questions/54452896/maximum-number-of-entries-in-node-js-map</a></p>
<pre><code>V8 developer here. I can confirm that 2^24 is the maximum number of entries in
a Map. That’s not a bug, it’s just the implementation-defined limit.

The limit is determined by:

The FixedArray backing store of the Map has a maximum size of 1GB (independent
of the overall heap size limit) On a 64-bit system that means 1GB / 8B = 2^30 /
2^3 = 2^27 ~= 134M maximum elements per FixedArray A Map needs 3 elements per
entry (key, value, next bucket link), and has a maximum load factor of 50% (to
avoid the slowdown caused by many bucket collisions), and its capacity must be
a power of 2. 2^27 / (3 * 2) rounded down to the next power of 2 is 2^24, which
is the limit you observe.  FWIW, there are limits to everything: besides the
maximum heap size, there’s a maximum String length, a maximum Array length, a
maximum ArrayBuffer length, a maximum BigInt size, a maximum stack size, etc.
Any one of those limits is potentially debatable, and sometimes it makes sense
to raise them, but the limits as such will remain. Off the top of my head I
don’t know what it would take to bump this particular limit by, say, a factor
of two – and I also don’t know whether a factor of two would be enough to
satisfy your expectations.

</code></pre>
<p>Great details there. It would also be good to know what the behavior is for the
Object, which has those 100% CPU stalls after ~8.3M, but not the same error
message...</p>
<p>Another fun note: if I modify the Object code to use only “integer IDs” the
code actually works fine, does not hit any errors, and is “blazingly fast” as
the kids call it</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {}</span></span>
<span class="line"><span style="color: #A6ACCD">for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">50_000_000</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">%</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">100000</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">==</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>I presume that this code works because it detects that I’m using it like an
array and it decides to transform how it is working internally and not use a
hash-map-style data structure, so does not hit a limit. There is a slightly
higher limit though, e.g. 1 billion elements gives “Uncaught RangeError:
Invalid array length”</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {}</span></span>
<span class="line"><span style="color: #A6ACCD">for (</span><span style="color: #91B4D5">let</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">&#x3C;=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">1_000_000_000</span><span style="color: #A6ACCD">; </span><span style="color: #E4F0FB">i</span><span style="color: #91B4D5">++</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">myObject</span><span style="color: #A6ACCD">[</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">i</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">%</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">100000</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">==</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">i</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>This has been another episode of ....the twilight zone (other episodes
catalogued here) <a href="https://github.com/cmdcolin/technical_oddities/">https://github.com/cmdcolin/technical_oddities/</a></p>
<p>[1] The final product of this adventure was this, to create a search index for
a large number of elements <a href="https://github.com/GMOD/ixixx-js">https://github.com/GMOD/ixixx-js</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Do you understand your NPM dependencies?]]></title>
            <link>https://cmdcolin.github.io/posts/2021-07-27-npm-dependencies</link>
            <guid>https://cmdcolin.github.io/posts/2021-07-27-npm-dependencies</guid>
            <pubDate>Tue, 27 Jul 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>You are writing a library...or you are writing an app and you want to publish
some of the components of it as a library...</p>
<p>Here are some questions in the form of comments</p>
<ul>
<li>
<p>Did you realize that your yarn.lock will be ignored for anyone who installs
your libraries?</p>
</li>
<li>
<p>Did you realize this means that your perfectly running test suite with your
yarn.lock could be a failing case for consumers of your library unless you
don’t use semver strings like ^1.0.0 and just hardcode it to 1.0.0?</p>
</li>
<li>
<p>Did you realize the default of ^1.0.0 automatically gets minor version bumps
which are often fairly substantial changes, e.g. even breaking possibly?</p>
</li>
<li>
<p>Did you know that larger libraries like @material-ui/core don’t like to bump
their major version all the time for example so large changes are often made
to the minor version?</p>
</li>
<li>
<p>Did you know if you run <code>yarn upgrade</code>, it may update what is in your
yarn.lock file but will not update what is in your package.json?</p>
</li>
<li>
<p>Did you realize that this means that if you depend on the results of running
<code>yarn upgrade</code> e.g. it gave you a bugfix, you could be shipping buggy code to
consumers of your library?</p>
</li>
</ul>
<p>Just something to be aware of! You can always ride the dragon and accept these
minor breakages from semver bumps, but it can introduce some issues for your
consumers</p>
<p>Random fun thing: Adding a yarn package can even downgrade some other packages.
For example if you have ^6.0.0 in your package.json, you yarn upgrade it so in
the lockfile it says 6.1.0 but then later install another library that requires
a hard 6.0.1, yarn will decide to downgrade you to 6.0.1 (it will not have a
duplicate entry in yarn.lock, just that the 6.1.0 in the yarn.lock will
downgrade to 6.0.1)</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Making a HTTPS accessible S3 powered static site with CloudFront+route 53]]></title>
            <link>https://cmdcolin.github.io/posts/2020-12-26-pt2</link>
            <guid>https://cmdcolin.github.io/posts/2020-12-26-pt2</guid>
            <pubDate>Sat, 26 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This is not a very authoritative post because I stumbled though this but
I think I got it working now on my website :)</p>
<h2 id="setup-your-s3-bucket"><a aria-hidden="true" tabindex="-1" href="#setup-your-s3-bucket"><a href="#setup-your-s3-bucket" style="margin-right: 10px">#</a></a>Setup your S3 bucket</h2>
<p>First setup your S3 bucket, your bucket must be named yourdomain.com
e.g. named after your domain</p>
<p>Then if you have a create-react-app setup I add a script in package.json
that runs</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">scripts</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">predeploy</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">npm run build</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">deploy</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">aws sync --delete build s3://yourdomain.com</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Then we can run "yarn deploy" and it will automatically upload our
create-react-app website to our S3 static site bucket.</p>
<p>Then make sure your bucket has public permissions enabled
<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2">https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2</a>.
Then make sure your bucket has "static site hosting" enabled too</p>
<h2 id="setup-route-53-and-make-your-ns-entries-in-domainsgooglecom"><a aria-hidden="true" tabindex="-1" href="#setup-route-53-and-make-your-ns-entries-in-domainsgooglecom"><a href="#setup-route-53-and-make-your-ns-entries-in-domainsgooglecom" style="margin-right: 10px">#</a></a>Setup route 53, and make your NS entries in domains.google.com</h2>
<p>I bought a domain with domains.google.com</p>
<p>Google then emailed me to validate my ownership</p>
<p>Then I went to aws.amazon.com route 53 and I created a hosted zone</p>
<p>This generated 4 name server entries and I added those to the
domains.google.com site</p>
<p><img src="/media/638618421776515072_0.png" alt=""></p>
<p>Screenshot shows copying the NS values from route 53 to the name servers
area of domains.google.com</p>
<h2 id="setup-your-amazon-certificate-for-making-ssl-work-on-cloudfront"><a aria-hidden="true" tabindex="-1" href="#setup-your-amazon-certificate-for-making-ssl-work-on-cloudfront"><a href="#setup-your-amazon-certificate-for-making-ssl-work-on-cloudfront" style="margin-right: 10px">#</a></a>Setup your Amazon certificate for making SSL work on CloudFront</h2>
<p>To properly setup However, this does not work so you need to go to
Amazon Certificates->Provision certificates</p>
<p>We request the certificate for</p>
<p><a href="http://www.yourdomain.com">www.yourdomain.com</a>
yourdomain.com</p>
<p>Then it generates some codes for a CNAME value for each of those two
entries, and has a button to autoimport those CNAME values to route53</p>
<p>Then it will say "Pending validation"...I waited like an hour and then
it changed to "Success".</p>
<p><img src="/media/638618421776515072_1.png" alt=""></p>
<p>Screenshot shows the now successful Amazon Certificate. After you get
this, you can proceed to finishing your cloudfront</p>
<h2 id="create-a-cloudfront-distribution-and-add-alternative-cname-entries-for-your-domain"><a aria-hidden="true" tabindex="-1" href="#create-a-cloudfront-distribution-and-add-alternative-cname-entries-for-your-domain"><a href="#create-a-cloudfront-distribution-and-add-alternative-cname-entries-for-your-domain" style="margin-right: 10px">#</a></a>Create a CloudFront distribution and add "Alternative CNAME" entries for your domain</h2>
<p>Then we can update our CloudFront distribution and add these to
the "Alternative CNAME" input box</p>
<p>yourdomain.com
<a href="http://www.yourdomain.com">www.yourdomain.com</a></p>
<p>Note also that I first generated my certificate in us-east-2 but the
"Import certificate form" in cloudfront said I had to create it in
us-east-1</p>
<p><img src="/media/638618421776515072_2.png" alt=""></p>
<h2 id="add-a-default-object-indexhtml-to-the-cloudfront-setting"><a aria-hidden="true" tabindex="-1" href="#add-a-default-object-indexhtml-to-the-cloudfront-setting"><a href="#add-a-default-object-indexhtml-to-the-cloudfront-setting" style="margin-right: 10px">#</a></a>Add a default object index.html to the CloudFront setting</h2>
<p>Make your CloudFront "default object" is index.html</p>
<p>You have to manually type this in :)</p>
<h2 id="add-the-cloudfront-distribution-to-your-route-53"><a aria-hidden="true" tabindex="-1" href="#add-the-cloudfront-distribution-to-your-route-53"><a href="#add-the-cloudfront-distribution-to-your-route-53" style="margin-right: 10px">#</a></a>Add the CloudFront distribution to your Route 53</h2>
<p>Add a Route 53 "A" record that points to the CloudFront domain name e.g.
d897d897d87d98dd.cloudfront.net</p>
<h2 id="summary-of-steps-needed"><a aria-hidden="true" tabindex="-1" href="#summary-of-steps-needed"><a href="#summary-of-steps-needed" style="margin-right: 10px">#</a></a>Summary of steps needed</h2>
<p>The general hindsight 20/20 procedure is</p>
<ol>
<li>Upload your static content to an S3 bucket called yoursite.com (must
be your domain name)</li>
<li>Make your S3 bucket have the "static website" setting on in the
properties menu and add a permissions policy that supports getObject
e.g. <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2">https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html#example-bucket-policies-use-case-2</a></li>
<li>Create a CloudFront distribution for your website</li>
<li>Make the CloudFront default object index.html</li>
<li>Create your domain with domains.google.com or similar</li>
<li>Point the google domain's name server to Route 53 NS list from AWS</li>
<li>Add Route 53 A records that point to the CloudFront domain name e.g.
d897d897d87d98dd.cloudfront.net</li>
<li>Create Amazon issued certificate for yourdomain.com, which can
auto-import a validation CNAME to your Route 53</li>
<li>Make your CloudFront domain support your Alternative CNAME's e.g.
yourdomain.com which requires importing (e.g. selecting from a list
that they auto-populate) your Amazon-issued-certificate</li>
</ol>
<h2 id="troubleshooting-and-notes"><a aria-hidden="true" tabindex="-1" href="#troubleshooting-and-notes"><a href="#troubleshooting-and-notes" style="margin-right: 10px">#</a></a>Troubleshooting and notes</h2>
<p>Problem: Your website gives 403 CloudFlare error
Solution: You have to get the Alternateive CNAME configuration setup
(pre-step involves the certificate request and validation)</p>
<p>Problem: Your website gives an object not found error
Solution: Set the CloudFront "default object" to index.html</p>
<h2 id="random-comment"><a aria-hidden="true" tabindex="-1" href="#random-comment"><a href="#random-comment" style="margin-right: 10px">#</a></a>Random comment</h2>
<p>This is one of those processes (creating the cloudfront/route 53) that
probably could have done with the aws-sam CLI and it would have possibly
been easier, it is quite fiddly doing all these steps in the web
interface</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Making a serverless website for photo and video upload pt. 2]]></title>
            <link>https://cmdcolin.github.io/posts/2020-12-26</link>
            <guid>https://cmdcolin.github.io/posts/2020-12-26</guid>
            <pubDate>Sat, 26 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This post follows
onhttps://cmdcolin.github.io/2020-12-24.html</p>
<p>It is possible I zoomed ahead too fast to make this a continuous tutorial, but
overall I just wanted to post an update</p>
<p>In pt. 1 I learned how to use the <code>aws-sam</code> CLI tool. This was a great insight
for me about automating deployments. I can now simply run <code>sam deploy</code> and it
will create new dynamodb tables, lambda functions, etc.</p>
<p>After writing pt 1. I converted the existing vue-js app that was in the aws
tutorial and converted it to react. Then I extended the app to allow</p>
<ul>
<li>Posting comments on photos</li>
<li>Uploading multiple files</li>
<li>Uploading videos etc.</li>
</ul>
<p>It will be hard to summarize all the changes since now the app has taken off a
little bit but it looks like this:</p>
<p>Repo structure</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">./frontend</span></span>
<span class="line"><span style="color: #A6ACCD">./frontend/src/App.tsx</span></span>
<span class="line"><span style="color: #A6ACCD">./lambdas/</span></span>
<span class="line"><span style="color: #A6ACCD">./lambdas/postFile</span></span>
<span class="line"><span style="color: #A6ACCD">./lambdas/getFiles</span></span>
<span class="line"><span style="color: #A6ACCD">./lambdas/postComment</span></span>
<span class="line"><span style="color: #A6ACCD">./lambdas/getComments</span></span></code></pre>
<p>Here is a detailed code for uploading the file. We upload one file at a time,
but the client code post to the lambda endpoint individually for each file</p>
<p>This generates a pre-signed URL to allow the client-side JS (not the lambda
itself) to directly upload to S3, and also posts a row in the S3 to the
filename that will. It is very similar code in
to <a href="https://cmdcolin.github.io/2020-12-24.html">https://cmdcolin.github.io/2020-12-24.html</a></p>
<p>./lambdas/postFile/app.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">use strict</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">AWS</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">require</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">aws-sdk</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">multipart</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">require</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">./multipart</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">AWS</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">config</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">update</span><span style="color: #A6ACCD">({</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">region</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">AWS_REGION</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s3</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">AWS</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">S3</span><span style="color: #A6ACCD">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">// Change this value to adjust the signed URL's expiration</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">URL_EXPIRATION_SECONDS</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">300</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">// Main Lambda entry point</span></span>
<span class="line"><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD">.</span><span style="color: #ADD7FF">handler</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">getUploadURL</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> { AWS_REGION: </span><span style="color: #E4F0FB">region</span><span style="color: #A6ACCD"> } </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">dynamodb</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">AWS</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">DynamoDB</span><span style="color: #A6ACCD">({</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">apiVersion</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">2012-08-10</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> region</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">uploadPic</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">timestamp</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">message</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">user</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">date</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">contentType</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">}) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">Item</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">timestamp</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">N</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">timestamp</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">filename</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">S</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">message</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">S</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">message</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">user</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">S</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">user</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">date</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">S</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">date</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">contentType</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #ADD7FF">S</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">contentType</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">TableName</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">files</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">dynamodb</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">putItem</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">promise</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getUploadURL</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">multipart</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">parse</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> { </span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">contentType</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">user</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">message</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">date</span><span style="color: #A6ACCD"> } </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">data</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">timestamp</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">+</span><span style="color: #E4F0FB">Date</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">now</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">Key</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">timestamp</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">-</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0">// Get signed URL from S3</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s3Params</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">Bucket</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">UploadBucket</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      Key</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">Expires</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">URL_EXPIRATION_SECONDS</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">ContentType</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">contentType</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// This ACL makes the uploaded object publicly readable. You must also</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// uncomment the extra permission for the Lambda function in the SAM</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0">// template.</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">ACL</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">public-read</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">uploadURL</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">s3</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">getSignedUrlPromise</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">putObject</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">s3Params</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">uploadPic</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #E4F0FB">      timestamp</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">filename</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">Key</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      message</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      user</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      date</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      contentType</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #E4F0FB">      uploadURL</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      Key</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #A6ACCD">  } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">statusCode</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">500</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">({</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">message</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">}`</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}),</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>./lambdas/getFiles/app.js</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0">// eslint-disable-next-line import/no-unresolved</span></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">AWS</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">require</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">aws-sdk</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> { AWS_REGION: </span><span style="color: #E4F0FB">region</span><span style="color: #A6ACCD"> } </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">process</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">env</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">docClient</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">AWS</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">DynamoDB</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">DocumentClient</span><span style="color: #A6ACCD">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">getItems</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> () {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">TableName</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">files</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">docClient</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">scan</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">promise</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">exports</span><span style="color: #A6ACCD">.</span><span style="color: #ADD7FF">handler</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #D0679D">try</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">getItems</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">statusCode</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">200</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">result</span><span style="color: #A6ACCD">),</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #A6ACCD">  } </span><span style="color: #D0679D">catch</span><span style="color: #A6ACCD"> (</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">statusCode</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">400</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> JSON</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">stringify</span><span style="color: #A6ACCD">({</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">message</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">}`</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}),</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>./frontend/src/App.tsx (excerpt)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">async</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">params</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">string</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">any</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">fetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">params</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  if (</span><span style="color: #91B4D5">!</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">ok</span><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #D0679D">throw</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">new</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">Error</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">HTTP </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">status</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7"> </span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">statusText</span><span style="color: #A6ACCD">}`</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">response</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">json</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">UploadDialog</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">open</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">onClose</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">}</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  open</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">boolean</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #ADD7FF">onClose</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">void</span></span>
<span class="line"><span style="color: #A6ACCD">}) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">images</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setImages</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">FileList</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setError</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">&#x3C;</span><span style="color: #A6ACCDC0">Error</span><span style="color: #A6ACCD">>()</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">loading</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setLoading</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">false</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">total</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setTotal</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">completed</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setCompleted</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">user</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setUser</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">''</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> [</span><span style="color: #E4F0FB">message</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">setMessage</span><span style="color: #A6ACCD">] </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useState</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">''</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">classes</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">useStyles</span><span style="color: #A6ACCD">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">handleClose</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> () </span><span style="color: #91B4D5">=></span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setLoading</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">false</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setImages</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setCompleted</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setTotal</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">setMessage</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">''</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FBD0">onClose</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">Dialog</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">onClose</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{handleClose} </span><span style="color: #91B4D5">open</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{open}></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">DialogTitle</span><span style="color: #E4F0FB">>upload a file (supports picture or video)&#x3C;/</span><span style="color: #5DE4C7">DialogTitle</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">DialogContent</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">htmlFor</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">user</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>name (optional) &#x3C;/</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">input</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">type</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">value</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{user}</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{event </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">setUser</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">id</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">user</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        /></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">br</span><span style="color: #E4F0FB"> /> &#x3C;</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">htmlFor</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">user</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>message (optional) &#x3C;/</span><span style="color: #5DE4C7">label</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">input</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">type</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">value</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{message}</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{event </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">setMessage</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">value</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">id</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">message</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">        /></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">br</span><span style="color: #E4F0FB"> /></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;</span><span style="color: #5DE4C7">input</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">multiple</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">type</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">file</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #91B4D5">onChange</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{e </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">let</span><span style="color: #E4F0FB"> files </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> e</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">target</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">files</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #A6ACCD">if</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">files </span><span style="color: #91B4D5">&#x26;&#x26;</span><span style="color: #E4F0FB"> files</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">length</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">              </span><span style="color: #E4F0FBD0">setImages</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">files</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">        /> {error </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">className</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{classes</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">error}>{</span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">error</span><span style="color: #A6ACCD">}`</span><span style="color: #E4F0FB">}&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> loading </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">Uploading...</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">completed</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">total</span><span style="color: #A6ACCD">}`</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> completed </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">h2</span><span style="color: #E4F0FB">>Uploaded &#x3C;/</span><span style="color: #5DE4C7">h2</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> </span><span style="color: #D0679D">null</span><span style="color: #E4F0FB">} &#x3C;</span><span style="color: #5DE4C7">DialogActions</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">Button</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">textTransform</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">none</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">onClick</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #5DE4C7">async</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">()</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">              </span><span style="color: #D0679D">try</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                </span><span style="color: #A6ACCD">if</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">images</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #E4F0FBD0">setLoading</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">true</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #D0679D">undefined</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #E4F0FBD0">setCompleted</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">0</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #E4F0FBD0">setTotal</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">images</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">length</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #5DE4C7C0">await</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">Promise</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">all</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">                    Array</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">from</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">images</span><span style="color: #A6ACCD">).</span><span style="color: #E4F0FBD0">map</span><span style="color: #A6ACCD">(</span><span style="color: #5DE4C7">async</span><span style="color: #E4F0FB"> image </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #91B4D5">const</span><span style="color: #E4F0FB"> data </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">new</span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">FormData</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #E4F0FB">                      data</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">append</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">message</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> message</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                      data</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">append</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">user</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> user</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                      data</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">append</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">date</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">new</span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">Date</span><span style="color: #A6ACCD">().</span><span style="color: #E4F0FBD0">toLocaleString</span><span style="color: #A6ACCD">())</span></span>
<span class="line"><span style="color: #E4F0FB">                      data</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">append</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">filename</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> image</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                      data</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">append</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">contentType</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> image</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">type</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #91B4D5">const</span><span style="color: #E4F0FB"> res </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7C0">await</span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">API_ENDPOINT </span><span style="color: #91B4D5">+</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">/postFile</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                        </span><span style="color: #ADD7FF">method</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">POST</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">                        </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">data</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #5DE4C7C0">await</span><span style="color: #E4F0FB"> </span><span style="color: #E4F0FBD0">myfetch</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">res</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FB">uploadURL</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                        </span><span style="color: #ADD7FF">method</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">PUT</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">                        </span><span style="color: #ADD7FF">body</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">image</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #A6ACCD">})</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">                      </span><span style="color: #E4F0FBD0">setCompleted</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">completed </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> completed </span><span style="color: #91B4D5">+</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">1</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                    </span><span style="color: #A6ACCD">}),</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #E4F0FBD0">setTimeout</span><span style="color: #A6ACCD">(()</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">=></span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                    </span><span style="color: #E4F0FBD0">handleClose</span><span style="color: #A6ACCD">()</span></span>
<span class="line"><span style="color: #E4F0FB">                  </span><span style="color: #A6ACCD">},</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">500</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">                </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #E4F0FB">              </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB"> </span><span style="color: #D0679D">catch</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">                </span><span style="color: #E4F0FBD0">setError</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">e</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">              </span><span style="color: #A6ACCD">}</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">color</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">primary</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">          ></span></span>
<span class="line"><span style="color: #E4F0FB">            upload</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;/</span><span style="color: #5DE4C7">Button</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">Button</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">onClick</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{handleClose}</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">color</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">primary</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">            </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">textTransform</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">none</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">          ></span></span>
<span class="line"><span style="color: #E4F0FB">            cancel</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;/</span><span style="color: #5DE4C7">Button</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        &#x3C;/</span><span style="color: #5DE4C7">DialogActions</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;/</span><span style="color: #5DE4C7">DialogContent</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">Dialog</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>template.yaml for AWS</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">AWSTemplateFormatVersion</span><span style="color: #A6ACCD">: 2010-09-09</span></span>
<span class="line"><span style="color: #5DE4C7">Transform</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::Serverless-2016-10-31</span></span>
<span class="line"><span style="color: #5DE4C7">Description</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">S3 Uploader</span></span>
<span class="line"></span>
<span class="line"><span style="color: #5DE4C7">Resources</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">filesDynamoDBTable</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::DynamoDB::Table</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">AttributeDefinitions</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #5DE4C7">AttributeName</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">timestamp</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">AttributeType</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">N</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">KeySchema</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #5DE4C7">AttributeName</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">timestamp</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">KeyType</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">HASH</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">ProvisionedThroughput</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">ReadCapacityUnits</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">5</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">WriteCapacityUnits</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">5</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">TableName</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">files</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0"># HTTP API</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">MyApi</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::Serverless::HttpApi</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0"># CORS configuration - this is open for development only and should be restricted in prod.</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #767C9DB0"># See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-httpapicorsconfiguration.html</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">CorsConfiguration</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">AllowMethods</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #ADD7FF">GET</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #ADD7FF">POST</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #ADD7FF">DELETE</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #ADD7FF">OPTIONS</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">AllowHeaders</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">*</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">AllowOrigins</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">*</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">UploadRequestFunction</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::Serverless::Function</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">CodeUri</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">lambdas/postFile/</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Handler</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">app.handler</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Runtime</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">nodejs12.x</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Timeout</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">3</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">MemorySize</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">128</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Environment</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">Variables</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">UploadBucket</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Ref</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">S3UploadBucket</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Policies</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #ADD7FF">AmazonDynamoDBFullAccess</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #5DE4C7">S3WritePolicy</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">BucketName</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Ref</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">S3UploadBucket</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #5DE4C7">Statement</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">            - </span><span style="color: #5DE4C7">Effect</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">Allow</span></span>
<span class="line"><span style="color: #A6ACCD">              </span><span style="color: #5DE4C7">Resource</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Sub</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">arn:aws:s3:::${S3UploadBucket}/</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">              </span><span style="color: #5DE4C7">Action</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">                - </span><span style="color: #ADD7FF">s3:putObjectAcl</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Events</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">UploadAssetAPI</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">HttpApi</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">Path</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">/postFile</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">Method</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">post</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">ApiId</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Ref</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">MyApi</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">FileReadFunction</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::Serverless::Function</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">CodeUri</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">lambdas/getFiles/</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Handler</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">app.handler</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Runtime</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">nodejs12.x</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Timeout</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">3</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">MemorySize</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">128</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Policies</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        - </span><span style="color: #ADD7FF">AmazonDynamoDBFullAccess</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">Events</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">UploadAssetAPI</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">HttpApi</span></span>
<span class="line"><span style="color: #A6ACCD">          </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">Path</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">/getFiles</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">Method</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">get</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">ApiId</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Ref</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">MyApi</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #767C9DB0">## S3 bucket</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">S3UploadBucket</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Type</span><span style="color: #A6ACCD">: </span><span style="color: #ADD7FF">AWS::S3::Bucket</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Properties</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      </span><span style="color: #5DE4C7">CorsConfiguration</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #5DE4C7">CorsRules</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">          - </span><span style="color: #5DE4C7">AllowedHeaders</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">              - </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">*</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">AllowedMethods</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">              - </span><span style="color: #ADD7FF">GET</span></span>
<span class="line"><span style="color: #A6ACCD">              - </span><span style="color: #ADD7FF">PUT</span></span>
<span class="line"><span style="color: #A6ACCD">              - </span><span style="color: #ADD7FF">HEAD</span></span>
<span class="line"><span style="color: #A6ACCD">            </span><span style="color: #5DE4C7">AllowedOrigins</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">              - </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">*</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0">## Take a note of the outputs for deploying the workflow templates in this sample application</span></span>
<span class="line"><span style="color: #5DE4C7">Outputs</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">APIendpoint</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Description</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">HTTP API endpoint URL</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Value</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Sub</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">S3UploadBucketName</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Description</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">S3 bucket for application uploads</span><span style="color: #A6ACCD">'</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">Value</span><span style="color: #A6ACCD">: </span><span style="color: #91B4D5">!Ref</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">S3UploadBucket</span><span style="color: #A6ACCD">'</span></span></code></pre>
<p>To display all the pictures I use a switch from video or img tag based
on contentType.startsWith('video'). I also use the "figcaption" HTML tag
to have a little caption on the pics/videos</p>
<p>./frontend/src/App.tsx</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">Media</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">file</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">style</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">onClick</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">children</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">}</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> {</span></span>
<span class="line"><span style="color: #A6ACCD">  file</span><span style="color: #91B4D5">:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">File</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #ADD7FF">onClick</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">Function</span></span>
<span class="line"><span style="color: #A6ACCD">  style</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">React</span><span style="color: #A6ACCD">.</span><span style="color: #A6ACCDC0">CSSProperties</span></span>
<span class="line"><span style="color: #A6ACCD">  children</span><span style="color: #91B4D5">?:</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCDC0">React</span><span style="color: #A6ACCD">.</span><span style="color: #A6ACCDC0">ReactNode</span></span>
<span class="line"><span style="color: #A6ACCD">}) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> { </span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">contentType</span><span style="color: #A6ACCD"> } </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">file</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #91B4D5">const</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">src</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD"> </span><span style="color: #A6ACCD">`${</span><span style="color: #E4F0FB">BUCKET</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">filename</span><span style="color: #A6ACCD">}`</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">figure</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{</span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">display</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">inline-block</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">}</span><span style="color: #E4F0FB">}></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">picture</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">        {contentType</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">startsWith</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">video</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">?</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">video</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{style} </span><span style="color: #91B4D5">src</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{src} </span><span style="color: #91B4D5">controls</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">onClick</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{onClick </span><span style="color: #A6ACCDC0">as</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCDC0">any</span><span style="color: #E4F0FB">} /></span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">:</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #E4F0FB">          &#x3C;</span><span style="color: #5DE4C7">img</span><span style="color: #E4F0FB"> </span><span style="color: #91B4D5">style</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{style} </span><span style="color: #91B4D5">src</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{src} </span><span style="color: #91B4D5">onClick</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB">{onClick </span><span style="color: #A6ACCDC0">as</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCDC0">any</span><span style="color: #E4F0FB">} /></span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">)</span><span style="color: #E4F0FB">}</span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;/</span><span style="color: #5DE4C7">picture</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">      &#x3C;</span><span style="color: #5DE4C7">figcaption</span><span style="color: #E4F0FB">>{children}&#x3C;/</span><span style="color: #5DE4C7">figcaption</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">    &#x3C;/</span><span style="color: #5DE4C7">figure</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Now the really fun part: if you get an image of a picture frame
like <a href="https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T">https://www.amazon.com/Paintings-Frames-Antique-Shatterproof-Osafs2-Gld-A3/dp/B06XNQ8W9T</a></p>
<p>You can make it a border for any image or video using border-image CSS</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FB">style</span><span style="color: #A6ACCD"> </span><span style="color: #91B4D5">=</span><span style="color: #E4F0FB"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">border</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">30px solid</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #ADD7FF">borderImage</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">`</span><span style="color: #5DE4C7">url(borders/</span><span style="color: #A6ACCD">${</span><span style="color: #E4F0FB">border</span><span style="color: #A6ACCD">}</span><span style="color: #5DE4C7">) 30 round</span><span style="color: #A6ACCD">`</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p><img src="/media/638602799897329664_0.png" alt=""></p>
<h2 id="summary"><a aria-hidden="true" tabindex="-1" href="#summary"><a href="#summary" style="margin-right: 10px">#</a></a>Summary</h2>
<p>The template.yaml automatically deploys the lambdas for postFile/getFile
and the files table in dynamoDB</p>
<p>The React app uses postFile for each file in an <code>&#x3C;input type="file"/></code>,
the code uses React hooks and functional components but is hopefully not
too complex</p>
<p>I also added commenting on photos. The code is not shown here but you
can look in the source code for details</p>
<p><img src="/media/638602799897329664_1.png" alt=""></p>
<p>Overall this has been a good experience learning to develop this app and
learning to automate the cloud deployment is really good for ensuring
reliability and fast iteration.</p>
<p>Also quick note on serverless CLI vs aws-sam. I had tried a serverless
CLI tutorial from another user but it didn't click with me, while the
aws-sam tutorial from
<a href="https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1">https://searchvoidstar.tumblr.com/post/638408397901987840/making-a-serverless-website-for-photo-upload-pt-1</a> was
a great kick start for me. I am sure the serverless CLI is great too and
it ensures a bit less vendor lock in, but then is also a little bit
removed from the native aws config schemas. Probably fine though</p>
<h2 id="source-code"><a aria-hidden="true" tabindex="-1" href="#source-code"><a href="#source-code" style="margin-right: 10px">#</a></a>Source code</h2>
<p><a href="https://github.com/cmdcolin/aws_photo_gallery/">https://github.com/cmdcolin/aws_photo_gallery/</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Making a serverless website for photo upload pt. 1]]></title>
            <link>https://cmdcolin.github.io/posts/2020-12-24</link>
            <guid>https://cmdcolin.github.io/posts/2020-12-24</guid>
            <pubDate>Thu, 24 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I set out to make a serverless website for photo uploads. Our dearly
departed dixie dog needed a place to have photo uploads.</p>
<p>I didn't want to get charged dollars per month for a running ec2
instance, so I wanted something that was lightweight e.g. serverless,
and easy</p>
<p>I decided to follow this tutorial</p>
<p><a href="https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/">https://aws.amazon.com/blogs/compute/uploading-to-amazon-s3-directly-from-a-web-or-mobile-application/</a></p>
<p>I really liked the command line deployment (aws-sam) because fiddling
around with the AWS web based control panel is ridiculously complicated</p>
<p>For example I also tried following this tutorial which uses the web
based UI (<a href="https://www.youtube.com/watch?v=mw_-0iCVpUc">https://www.youtube.com/watch?v=mw_-0iCVpUc</a>) and it just did
not work for me....I couldn't stay focused (blame ADHD or just my CLI
obsession?) and certain things like "Execution role" that they say to
modify are not there in the web UI anymore, so I just gave up (I did try
though!)</p>
<p>To install aws-sam I used homebrew</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">brew tap aws/tap</span></span>
<span class="line"><span style="color: #A6ACCD">brew install aws-sam-cli</span></span>
<span class="line"><span style="color: #A6ACCD">brew install aws-sam-cli </span><span style="color: #767C9DB0"># I had to run the install command twice ref https://github.com/aws/aws-sam-cli/issues/2320#issuecomment-721414971</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">git clone https://github.com/aws-samples/amazon-s3-presigned-urls-aws-sam</span></span>
<span class="line"><span style="color: #A6ACCD">cd amazon-s3-presigned-urls-aws-sam</span></span>
<span class="line"><span style="color: #A6ACCD">sam deploy --guided</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0"># proceeeds with a guided installation, I used all defaults except I</span></span>
<span class="line"><span style="color: #767C9DB0"># made "UploadRequestFunction may not have authorization definedIs</span></span>
<span class="line"><span style="color: #A6ACCD">Is this okay</span><span style="color: #91B4D5">?</span><span style="color: #A6ACCD"> [y/N]: y</span><span style="color: #A6ACCD">"</span></span></code></pre>
<p><img src="/media/638408397901987840_0.png" alt=""></p>
<p>They then in the tutorial describe trying to use postman to test</p>
<p>I test with <code>curl</code> instead</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">curl </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">https://fjgbqj5436.execute-api.us-east-2.amazonaws.com/uploads</span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span></code></pre>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">uploadURL</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">Key</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">112162.jpg</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The premise of this is you make a request, and then the response from
the API is a pre-signed URL that then allows you to upload directly to
S3. You can use <code>curl &#x3C;url> --upload-file yourfile.jpg</code>. This
automatically does a PUT request to the s3 bucket (yes, this is talking
directly to s3 now, not the lambda! the lambda is just for generating
the "pre-signed URL" to let you upload). Careful to copy it exactly as
is</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">curl </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">https://sam-app-s3uploadbucket-1653634.s3.us-east-2.amazonaws.com/112162.jpg?Content-Type=image%2Fjpeg&#x26;X-Amz-Algorithm=AWS4-HMAC-SHA256&#x26;X-Amz-Credential=xxx&#x26;X-Amz-Date=20201224T174804Z&#x26;X-Amz-Expires=300&#x26;X-Amz-Security-Token=yyy&#x26;X-Amz-SignedHeaders=host</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> --upload-file test.jpg</span></span></code></pre>
<p>There is no response, but I can then check the s3 console and see the
file upload is successful (all files are renamed)</p>
<p><img src="/media/638408397901987840_1.png" alt=""></p>
<p>Figure shows that the file upload is successful :)</p>
<p>Then we can edit the file frontend/index.html from the repo we cloned to
contain the lambda with the /uploads/ suffix</p>
<p>Then we manually upload this file to another s3 bucket or test it
locally</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">aws s3 cp index.html s3://mybucket/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0"># then ...visit that in the browser</span></span></code></pre>
<p>At this point the files are getting uploaded but not publically
accessible. To make them publically accessible we uncomment the
ACL: 'public-read' in the getSignedURL/app.js folder in the github repo</p>
<p><img src="/media/638408397901987840_3.png" alt=""></p>
<p>Figure showing the public-read uncommented</p>
<p><img src="/media/638408397901987840_4.png" alt=""></p>
<p>Figure showing the lines that need uncommenting in template.yaml in the
root of the github repo that allows putObject in s3 with the public-read
ACL</p>
<p>Re-run <code>sam deploy --guided</code>, same thing as at the start</p>
<p>Now the objects are publicly accessible!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Challenges I have faced learning React]]></title>
            <link>https://cmdcolin.github.io/posts/2020-07-04</link>
            <guid>https://cmdcolin.github.io/posts/2020-07-04</guid>
            <pubDate>Sat, 04 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Learning React was a big challenge for me. I started learning React in earnest
in 2019. It was a difficult experience overall, but I wanted to go over my
learning experience. I tried to review commit logs to get an accurate timeline,
instead of relying solely on my memory of the timeline.</p>
<p>TLDR: If I were to take away anything from this</p>
<ul>
<li>"pairing" (not strictly pair programming, just meeting with other people at
structured times during the week) was useful especially as a remote worker.
My coworkers may not have truly known how many misunderstandings I had, but
it still helped me feel less aliented.</li>
<li>reading the book "Learning React" was very helpful, it helped provide some
mental structure that reading blog posts on the internet could not.</li>
</ul>
<p>Also stay patient, stay thankful, and try to focus while you learn</p>
<h2 id="introduction-to-me"><a aria-hidden="true" tabindex="-1" href="#introduction-to-me"><a href="#introduction-to-me" style="margin-right: 10px">#</a></a>Introduction to me</h2>
<p>I am maybe what you'd call a front-end engineer. I have done web development
for about 7 years now. I worked on a variety of front end and back end
projects, including with Ruby on Rails, PHP, Perl CGI, Java servlets, and
jquery/dojo client side JS. I am pretty steeped in the "jquery spaghetti" /
mutable DOM everywhere era of things in my work on the frontend.</p>
<h2 id="my-new-job"><a aria-hidden="true" tabindex="-1" href="#my-new-job"><a href="#my-new-job" style="margin-right: 10px">#</a></a>My new job!</h2>
<p>When I got a call about a new job in 2018, I was really happy and started in
June 2018. They decided they are going to do "the big rewrite" and are going to
use React. I start out as a remote worker. I fly into Berkeley for a single day
to sign HR paperwork!</p>
<p>Soon, my coworker starts building the new React app prototype. He keeps asking
me what state management library should we use, but I had no idea about React
still, much less what state management even is, and basically just was like "I
dunno!". I had no way to form an opinion.</p>
<p>I was also working on some stuff unrelated to the rewrite as the rest of the
team started prototyping in React, and I remained pretty out of the loop. We
would have weekly meetings but I just wouldn't really understand the goings
ons. I saw PropTypes, and mobx-state-tree model types, and class-based React
components, but nothing sunk in.</p>
<p>Sidenote: I had actually tried out React in 2016 and was very confused at that
time too, I had a bad taste in my mouth about React entirely! See Footnote 1.</p>
<h2 id="i-am-flounderingnot-understanding-whats-going-on-with-the-rewrite"><a aria-hidden="true" tabindex="-1" href="#i-am-flounderingnot-understanding-whats-going-on-with-the-rewrite"><a href="#i-am-flounderingnot-understanding-whats-going-on-with-the-rewrite" style="margin-right: 10px">#</a></a>I am floundering...not understanding what's going on with the rewrite</h2>
<p>It's December 2018, I go home for Christmas and I have an honest talk with my
parents and tell them "I don't get what is happening in the new codebase, I'm
honestly unhappy, and it just does all this 'React' stuff" but I can't explain
React to them I just say the code is automatically reacting to other things.</p>
<p>My parents say "well if you are unhappy, you might have to leave your job!".
They were not cheering for me to leave, but they understood that this wasn't
really sustainable. At this point, it really hit me that I do like this job and
I decided to try to focus on work.</p>
<h2 id="i-try-and-make-an-honest-attempt-to-get-involved-in-the-project"><a aria-hidden="true" tabindex="-1" href="#i-try-and-make-an-honest-attempt-to-get-involved-in-the-project"><a href="#i-try-and-make-an-honest-attempt-to-get-involved-in-the-project" style="margin-right: 10px">#</a></a>I try and make an honest attempt to get involved in the project</h2>
<p>On January 10th 2019, I make my first commit to the rewrite by doing some
monkey-see monkey-do type coding. I copy a bunch of files and just put them in
the right place, tweak some lines, and start to figure out how to make things
run. By the end of January 2019 I get my first code change merged.</p>
<p>I also suggested that we start doing <strong>pair-programming sessions</strong>. Once I
started doing this, meeting weekly with my coworkers, it made a huge difference
for me in learning how to code. The things we discussed in these sessions often
still went way over my head due to how my coworkers presented stuff or how much
they assumed I understood. Nevertheless, these were extremely helpful for me to
help get caught up.</p>
<h2 id="reading-learning-react"><a aria-hidden="true" tabindex="-1" href="#reading-learning-react"><a href="#reading-learning-react" style="margin-right: 10px">#</a></a>Reading "Learning React"</h2>
<p>In March 2019, I got the book "Learning React" (O'Reilly2017
<a href="https://www.oreilly.com/library/view/learning-react/9781491954614/">https://www.oreilly.com/library/view/learning-react/9781491954614/</a>) for my
kindle. Reading this book was a big help I felt, and provided a needed "brain
reset" for me. The book worked well for me, I read it each night on my kindle.
The book was good at showing how things like ES6 syntax like destructuring,
arrow functions, etc help fit into the React ecosystem (I was still steeped in
ES5). Also, with the book, I could focus, not have distractions, etc. My eyes
would just glaze over every time I clicked on internet tutorials. I did not try
to live code any of the examples of "Learning React", I just read it as is
before bed.</p>
<h2 id="applying-lessons-to-work-is-still-a-slow-going-process"><a aria-hidden="true" tabindex="-1" href="#applying-lessons-to-work-is-still-a-slow-going-process"><a href="#applying-lessons-to-work-is-still-a-slow-going-process" style="margin-right: 10px">#</a></a>Applying lessons to work is still a slow going process</h2>
<p>So anyways, work goes on, and I'm learning, but our codebase still feels pretty
complicated and alien. React is one thing, but mobx is another. I tried
downloading the mobx-state-tree book but it goes over my head
(<a href="https://subscription.packtpub.com/book/web-development/9781789344837/8/ch08lvl1sec47/an-opinionated-mobx-with-mobx-state-tree">https://subscription.packtpub.com/book/web-development/9781789344837/8/ch08lvl1sec47/an-opinionated-mobx-with-mobx-state-tree</a>)
and the way mobx is glued to React via mobx-react doesn't really click. I
remember asking my coworkers why my component was not updating and they
eventually find out it's because I keep not using the observer() wrapper around
my components, which is obvious when you understand the system but it stumped
me as a learner.</p>
<h2 id="trying-out-typescript"><a aria-hidden="true" tabindex="-1" href="#trying-out-typescript"><a href="#trying-out-typescript" style="margin-right: 10px">#</a></a>Trying out Typescript</h2>
<p>In April 2019, I start to experiment with Typescript and release a Typescript
version of some data parsing code. I start by explicity specifying a lot of
types but I eventually start getting into the zen of "type inference".</p>
<h2 id="using-react-hooks"><a aria-hidden="true" tabindex="-1" href="#using-react-hooks"><a href="#using-react-hooks" style="margin-right: 10px">#</a></a>Using React hooks</h2>
<p>In May 2019, I try out my first React hook, a useState. It worked well. I
couldn't really figure out why I would use it instead of using mobx for state
management we used elsewhere, but the example was that it was a click-and-drag
and it made sense to keep that click-and-drag mouse position state local to the
component rather than the "app".</p>
<p>The book "Learning React" also helped me to understand hooks but only
indirectly. The book had examples of pure function components, but was written
pre-hooks. With hooks added in React 16.8, it took a little brain exercising,
but I understood how hooks can be applied to function components.</p>
<h2 id="using-react-testing-library"><a aria-hidden="true" tabindex="-1" href="#using-react-testing-library"><a href="#using-react-testing-library" style="margin-right: 10px">#</a></a>Using <code>react-testing-library</code></h2>
<p>In June 2019, I create "integration test" level tests for our app. I had used
<code>react-testing-library</code> for some components before this, but this was using
<code>react-testing-library</code> to render the entire "app level" component. I was happy
to pioneer this and was happy to try this out instead of doing true browser
tests, and I think this has worked out well.</p>
<p>Some caveats: I got very caught up with trying to do canvas tests initially. I
really wanted to use <code>jest-mock-canvas</code> but we were using <code>OffscreenCanvas</code> via
a pretty complicated string of things, so I don't make progress here, and I
also got confused about the relationship between <code>node-canvas</code> and
<code>jest-mock-canvas</code> (they are basically totally different approaches). Later on, I
find using <code>jest-image-snapsho</code>t of the canvas contents works nice (ref
<a href="https://stackoverflow.com/questions/33269093/how-to-add-canvas-support-to-my-tests-in-jest">https://stackoverflow.com/questions/33269093/how-to-add-canvas-support-to-my-tests-in-jest</a>)</p>
<p>Other random note: when building out the integration tests, we got a lot
of "act warnings" which were confusing. These were fixed in React 16.9
(released August 2019), but we had to ignore them and they basically just
confused me a lot and made it feel like I was battling a very complex system
rather than a nice simple one.</p>
<h2 id="conclusions"><a aria-hidden="true" tabindex="-1" href="#conclusions"><a href="#conclusions" style="margin-right: 10px">#</a></a>Conclusions</h2>
<p>Overall, I just wanted to write up my whole experience. It felt really
difficult for me to make these changes. I also went through a breakup during
this time, had a bad living situation, etc. so things were a struggle. If
anyone else has had struggles learning React, tell your story, and let me know.
I'd like to also thank everyone who helped me along the way. I feel like a much
better coder now, yet, I should always keep growing. The feeling of
uncomfortableness could be a growing experience.</p>
<h2 id="footnote-1"><a aria-hidden="true" tabindex="-1" href="#footnote-1"><a href="#footnote-1" style="margin-right: 10px">#</a></a>Footnote 1</h2>
<p>I also had tried using React in 2016... but it was unsuccessful, but maybe for
interesting reasons?</p>
<p>I was tasked with making a normal form with text input elements, and I wanted
to code and wanted to try using React. I tried importing React via a CDN and
gave it a shot, and it seemed simple enough, but I kept getting really confused
about how to even read and initialize the value of a textbox for example
properly. TLDR: I was not aware of what a <em>controlled component</em> was.</p>
<p>The idea of controlled components (not a word in my vocabulary at the time) was
quite unintuitive and instead, I kept googling weird things like "two way data
binding react" and variants of this. I had never used Angular but I heard of
two-way data binding from Angular, and I just felt like it was what I needed. I
even posted about my frustrations about this on the React subreddit and was
downvoted. Felt bad. I was just really confused. I abandoned the project in
React and just used our normal jqueryish thing.</p>
<h2 id="footnote-2"><a aria-hidden="true" tabindex="-1" href="#footnote-2"><a href="#footnote-2" style="margin-right: 10px">#</a></a>Footnote 2</h2>
<p>Why did I have such a poor grasp on React? I can't exactly say. I feel like I
was a competant developer, but I had some severer mental barriers to
understanding the way React worked. I wish someone would have just told me
something like "React is basically like functions that can return HTML" e.g.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">HelloWorld</span><span style="color: #A6ACCD">() {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">>Hello world&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>Certainly there is more to it than that, but boiling it down to just that core
idea I think would have helped me, and then walking me through some of the
stuff slowly after I had that base understanding.</p>
<h2 id="footnote-3"><a aria-hidden="true" tabindex="-1" href="#footnote-3"><a href="#footnote-3" style="margin-right: 10px">#</a></a>Footnote 3</h2>
<p>I am not sure if I would recommend Learning React to all learners. I think it
helped me, but there may be other options that work better for you. Look around
and find what what looks right.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Misconceptions your team might have during The Big Rewrite]]></title>
            <link>https://cmdcolin.github.io/posts/2020-06-03</link>
            <guid>https://cmdcolin.github.io/posts/2020-06-03</guid>
            <pubDate>Wed, 03 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Disclaimer: I enjoy the project I am working on and this is still a work
in progress. I just had to rant about the stuff I go through in my job
here, but it does not reflect the opinions of my emplorer, and my
personal opinion is despite these troubles we are coming along nicely</p>
<p>I joined a team that was doing the big rewrite in 2018. I was involved
in the project before then and knew it's ins and outs, and frankly think
it's still a great system. In order to break it's "limitations" a grand
v2 gets started. I think my team has been good. My tech lead is really
good at architecture. Where I really resist kind of "writing new
architecture that is not already there", he can pull up entirely new
concepts and abstractions that are all pretty good. Myself, I don't much
enjoy writing "new architecture" if there is something already there
that I can use, and I'll try to refer to the existence of an existing
thing instead of creating new exotic stuff.</p>
<p>Now, what happened during the big rewrite so far. 4 people on the team,
2 years in</p>
<p>Persistent confusion about sources of slowness in our app</p>
<ul>
<li>it's only slow because devtools is open (maybe it is! but this is
definitely a red herring. the code should work with devtools open.
reason that's been stated: devtools adds a "bunch of instrumentation to
the promises that slows it down"...stated without any evidence during a
3 hour long planning call...)
<ul>
<li>it's only slow because we're using a development build of react, try
a production build (the production build makes some stuff faster, but it
is NOT going to save your butt if you are constantly rerending all your
components unnecessarily every millisecond during user scroll, which is
something we suffered from, and it creeps back in if you are not careful
because you can't write tests against this so often one day I'll be
looking at my devtools and suddenly things are rendering twice per frame
(signature of calling an unnecessary setState), tons of unnecessary
components rendering in every frame (signature of
componentShouldUpdate/bad functional react memoizing, etc))</li>
<li>it's slow because we are hogging the main thread all the time, our
killer new feature in v2 is an intense webworker framework. now main
thread contention is a concern, but really our app needs to just be
performant all around, webworkers just offloads that cpu spinning to
another core. what we have done in v2 is we went whole hog and made our
code rely on OffscreenCanvas which 0 browsers support. also, our
webworker bundles (worker-loader webpack build) are huge webpack things
that pretty much contain all the code that is on the main thread so it's
just massive. that makes it slow at loading time, and makes it harder to
think about our worker threads in a lighter-weight way, and the worker
concept is now very deeply entrenched in a lot of the code (all code has
to think of things in terms of rpc calls)</li>
<li>it's slow because there are processes that haven't been aborted
spinning in the background, so we must build out an intensive
AbortController thing that touches the entirety of all our code
including sending abort signals across the RPC boundary in hopes that a
locked up webworker will respond to this (note: our first version of the
software had zero aborting, did not from my perspective suffer.
arguments with the team have gotten accusatory where I just claim that
there is no evidence that the aborting is helping us, pointing to the
fact that our old code works fine, and that if our new code suffers
without aborting, that means something else is wrong. I have not really
been given a proper response for this, and so the curse of passing
AbortSignals onto every function via an extra function parameter drags
on</li>
<li>it's slow because we are not multithreading..., so we put two views
of the same data into different webworkers (but now each webworker
separately downloads the same data, which leads to more resource spent,
more network IO, more slowness)</li>
</ul>
</li>
</ul>
<p>confusion about what our old users needs are</p>
<ul>
<li>
<p>tracks not having per-track scroll (problem: leads to many scrolls
within-scrolls, still unresolved problem)</p>
</li>
<li>
<p>the name indexing was always a big problem (yes it is slow but is it
really THE critical problem we face? likely not: bioinformatics people
run a data pipeline, it takes a couple days, so what). use elasticsearch
if it sucks so bad</p>
</li>
<li>
<p>our users are "stupid" so they need to have every single thing GUI
editable (interesting endeavor, but our design for this has been
difficult, and has not yet delivered on simplifying the system for
users)</p>
</li>
<li>
<p>our users "do not like modal popups" so we design everything into a
tiny sidedrawer that barely can contain the relevant data that they want
to see</p>
</li>
<li>
<p>having interest in catering to obscure or not very clear "user
stories" like displaying the same exact region twice on the screen at
once saying "someone will want to do this", but causing a ton of extra
logical weirdness from this</p>
</li>
<li>
<p>not catering to emerging areas of user needs such as breaking our
large app into components that can be re-used, and instead just going
full hog on a large monolith project and treating our monolith as a
giant hammer that will solve everyones problems, when in reality, our
users are also programmers that could benefit from using smaller
componentized versions of our code</p>
</li>
<li>
<p>confusion about "what our competitors have". sometimes my team one day
was like "alright we just do that and then we have everything product X
has?" and I just had to be clear and be like, no! the competitor has a
reall pretty intricate complex system that we could never hope to
replicate. but does that matter? probably not, but even still, we likely
don't have even 20% of the full set of functions of a competitor.
luckily we have our own strengths that make us compelling besides that
20%</p>
</li>
<li>
<p>making it so our product requires a server side component to run,
where our first version was much more amenable to running as a static
site</p>
</li>
<li>
<p>etc...</p>
</li>
</ul>
<p>but what does all this imply?</p>
<p>there are persistent confusion about what the challenges we face are,
what the architectural needs are, what our user stores are, what our new
v2 design goals are, and more. It's really crazy</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Behind the release - the story of the bugs and features in JBrowse 1.16.0]]></title>
            <link>https://cmdcolin.github.io/posts/2018-12-17</link>
            <guid>https://cmdcolin.github.io/posts/2018-12-17</guid>
            <pubDate>Mon, 17 Dec 2018 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Every once in awhile, you might see that your favorite program, JBrowse, has a
new release. There are a ton of little snippets in the release notes, you might
as well just go ahead and upgrade, but what went into all those little fixes?
Going to the blog post has links to the github
issues, <a href="http://jbrowse.org/blog/2018/12/13/jbrowse-1-16-0.html">http://jbrowse.org/blog/2018/12/13/jbrowse-1-16-0.html</a> but I felt like
maybe I'd add a little more context for some of them:</p>
<p>PS This is sort of motivated by @zcbenz blog on Electron
(<a href="https://twitter.com/zcbenz">https://twitter.com/zcbenz</a> <a href="http://cheng.guru/">http://cheng.guru/</a>) which tells the software in
terms of actual commit messages and such.</p>
<ul>
<li>
<p>The <code>webpack</code> build doing a production build by default. This seems pretty
straightforward, but was also difficult because I use WSL and the UglifyJs
plugin had trouble on WSL using the parallel: 4 option to use multiple
processors. This was really annoying and resulted in the webpack build just
hanging for no reason and only careful google-fu really uncovered other
people having this issue. I removed the parallelism as the speed gain wasn't
even really justifiable <a href="https://github.com/gmod/jbrowse/pull/1223">https://github.com/gmod/jbrowse/pull/1223</a></p>
</li>
<li>
<p>The incorporation of the <code>@gmod/bam</code> module. This was an almost 2 months
process after my first module, <code>@gmod/indexedfasta</code>. It required really
getting down to the binary level for BAM and was pretty tough. The module has
already itself had 12 releases
<a href="https://github.com/GMOD/bam-js/blob/master/CHANGELOG.md">here</a></p>
</li>
<li>
<p>Added support for indexing arbitrary fields from GFF3Tabix files. This was
fairly straightforward but required making design decisions about this.
Previously flatfile-to-json.pl files would have a command line flag to index
arbitrary fields. Since gff3tabix files are specified via config, I allowed
specifying arbitrary fields via config.</p>
</li>
<li>
<p>Added ability to render non-coding transcript types to the default Gene
glyph. This one was a nice feature and enables you to see non-coding types, but
required some weird design decisions because I could not override
the <code>box->style->color</code> from a higher level type simply using the
<code>_defaultConfig</code> function, so I needed to override the <code>getStyle</code> callback that
was passed down to the lower levels, so that it was able to use the default
lower level style and also our non-coding transcript style. See this part of
the code for
details <a href="https://github.com/GMOD/jbrowse/commit/ec638ea1cc62c8727#diff-a14e88322d8f4e8e940f995417277878R22">https://github.com/GMOD/jbrowse/commit/ec638ea1cc62c8727#diff-a14e88322d8f4e8e940f995417277878R22</a></p>
</li>
<li>
<p>Added <code>hideImproperPairs</code> filter. This was fairly straightforward but it is
one of these bugs that went unnoticed for years...the <code>hideMissingMatepairs</code>
flag would hide things didn't have the sam 0x02 flag for "read mapped in proper
pair", but reads with this flag could still be paired. Doing the 1.16 release
that focused on paired reads helped focus on this issue and now
hideMissingMatepairs filters on "mate unmapped" and <code>hideImproperPairs</code> is
the "read mapped in proper pair"</p>
</li>
<li>
<p>Added <code>useTS</code> flag. This one is fairly straightforward, it is similar to
<code>useXS</code> which colors reads based on their alignment in canonical splice site
orientations. I figured I could just copy the <code>useXS</code> to the <code>useTS</code> since I
figured they are the same, but I went ahead and manually generated RNA-seq
alignments with minimap2 and found that the useTS is actually flipped the
opposite of <code>useXS</code>, so it was valuable to get actual test data here.</p>
</li>
<li>
<p>Fixed issue where some <code>generate-names</code> setups would fail to index features.
This was a bad bug that was brought to light by a user. I was kind of mind
boggled when I saw it. In JBrowse 1.13-JBrowse 1.15 a change was introduced to
name indexing with a memory leak. In JBrowse 1.15 that was removed. But, there
was another change where refseqs could return empty name records, because they
were handled separately. But if the initial fill up of the name buffer of 50000
was exceeded by the reference sequence, then there would be empty name records
after this point and cause the name indexing to stop. Therefore this bug would
only happen when the reference sequence indexing buffer exceeded 50000 items
which could happen even when there are less than 50000 refseqs due to
autocompletions</p>
</li>
<li>
<p>Fixed issue with getting feature density from BAM files via the index stats
estimation. This involved parsing the "dummy bin" from index files, and I found
it was failing on certain 1000 genomes files. I actually don't really know what
the story behind this was, but our tabix code was better at parsing the dummy
bins than my bam code, and it was the same concept, so I took a note from their
codebase to use it in bam-js code. Commit
here <a href="https://github.com/GMOD/bam-js/commit/d5796dfc8750378ac8b875615ae0a7e81371af76">https://github.com/GMOD/bam-js/commit/d5796dfc8750378ac8b875615ae0a7e81371af76</a></p>
</li>
<li>
<p>Fixed issue with some GFF3Tabix tracks having some inconsistent layout of
features. This is a persistently annoying fact in tabix files where we cannot
really get a unique ID of a feature based on it's file offset. Therefore this
takes the full crc32 of a line as it's unique ID.</p>
</li>
<li>
<p>Fixed CRAM store not renaming reference sequences in the same way as other
stores. This one was interesting because rbuels made a fix but it caused
features from one chromosome to show up on the wrong ones, so chr1 reads
where showing up on chrMT. This happened because it was falling back to the
refseq index if it chrMT wasn't in the embedded "sam header" in the CRAM
file, but it should only fallback to refseq index if there is not any
embedded "sam header" in the CRAM file.</p>
</li>
<li>
<p>Fixed bug where older browsers e.g. IE11 were not being properly supported
via babel. This was a absolutely terrible bug that I found over thanksgiving
break. It was a regression from 1.15 branch of JBrowse. Previous versions from
1.13 when webpack was up until 1.15 used <code>@babel/env</code>. It was changed to
babel-preset-2015 but it was not being run correctly. Then I found that even if
I did get it running correctly, it was unable to properly babel-ify the
lru-cache module because it used something called
<code>Object.defineProperty('length', ...)</code> to change how the length property was
intepreted which was illegal in IE11. The 'util.promisify' NPM module also did
this in some contexts. I found that I could use the quick-lru module and the
es6-promisify module instead of lru-cache and util.promisify as a workaround.
Then I had to update all <code>@gmod/tabix</code>, <code>@gmod/vcf</code>, <code>@gmod/bgzf-filehandle</code>,
<code>@gmod/indexedfasta</code>, <code>@gmod/tribble-index</code>, <code>@gmod/bam</code>, and JBrowse proper to
use these modules instead, and make the bable chain, which typically does not
parse node_modules, to build these modules specifically (I didn't want to setup
babel toolchains for every single one of these modules, just one in the jbrowse
main codebase...). This was really a lot of work to support IE11 but now that
works so ...ya</p>
</li>
<li>
<p>Fixed bug where some files were not being fetched properly when changing
refseqs. This was actually fixed when I changed out lru-cache for quick-lru and
fixed a bug where the cache size was set to 0 due to a erroneous comment that
said <code>50*1024 // 50MB</code>...of course it should have said <code>50*1024*1024 // 50MB</code> <a href="https://github.com/GMOD/jbrowse/commit/2025dc0aa0091b70">https://github.com/GMOD/jbrowse/commit/2025dc0aa0091b70</a></p>
</li>
<li>
<p>Fixed issue where JBrowse would load the wrong area of the refseq on startup
resulting in bad layouts and excessive data fetches. This was actually a
heinous bug where jbrowse upon loading would just navigateTo the start of the
reference sequence automatically and then to wherever was specified by the
user. This resulted in track data to start downloading immediately from the
start of the chromosome and resulted in for example 350 kilobases of
reference sequence from all tracks to start downloading, which when I was
implementing view as pairs, was causing me to download over 100MB routinely.
This was terrible, and after fixing I only download about 10MB over even
large regions for most BAM files. Additionally, this bug was causing the
track heights to be calculated incorrectly because the track heights would
actually be calculated based on distorted canvas
bitmaps. <a href="https://github.com/gmod/jbrowse/issues/1187">https://github.com/gmod/jbrowse/issues/1187</a></p>
</li>
<li>
<p>JBrowse Desktop was not fetching remote files. This was a weird issue where
remote file requests were considered a CORS requests to any external remote.
This was solved by changing the usage of the fetch API in JBrowse for
node-fetch which does not obey CORS. Note that electron-fetch was also
considered, which uses Chromiums network stack instead of node's, but that
had specific assumptions about the context in which it was called.</p>
</li>
<li>
<p>Fixed issue where some parts of a CRAM file would not be displayed in
JBrowse due to a CRAM index parsing issue. This was based on a sort of binary
search that was implemented in JBrowse where the elements of the lists were
non-overlapping regions, and the query was a region, and the output should be a
list of the non-overlapping regions that overlap the query. Most algorithms for
binary search don't really tell you how to do searches on ranges so needed to
roll up my sleeves and write a little custom code. An interval tree could have
been used but this is too heavy-weight for non-overlapping regions from the
index <a href="https://github.com/GMOD/cram-js/pull/10">https://github.com/GMOD/cram-js/pull/10</a></p>
</li>
<li>
<p>Fixed an issue where BAM features were not lazily evaluating their tags.
When a function <code>feature.get('blahblah')</code> is called on a BAM feature, it checks
to see if it's part of a default list of things that are parsed like feature
start, end, id, but if not, it has to parse all the BAM tags to see if it is a
tag. Since they are called "lazy features" the tag processing is deferred until
it is absolutely needed. As it turned out, the incorporation of CRAM in 1.15
was calling a function to try to get the CRAM's version of CIGAR/MD on the BAM
features unnecessarily invoking the tag parsing on every feature up front and
therefore making the feature not really lazy anymore. This restored
the "lazyness" aspect of BAM.</p>
</li>
<li>
<p>Fixed issue where CRAM layout and mouseover would be glitchy due to ID
collisions on features. In the 1.15 releases, CRAM was introduced, and we
thought that the concept of taking CRC32 of the entire feature data days were
over because there is the concept of a "unique ID" on the features. However,
this ID was only unique within the slices, so around the slice boundaries there
were a lot of bad feature layouts and mouseovers would fail because they would
map to multiple features, etc. I found a way to unique-ify this by giving it
the sliceHeader file offset. <a href="https://github.com/GMOD/cram-js/pull/10">https://github.com/GMOD/cram-js/pull/10</a></p>
</li>
<li>
<p>We also had behind the scenes work by igv.js team member jrobinso who helped
on the CRAM codebase to incorporate a feature where for lossy read names, so
that a read and it's mate pair would consistently be assigned the same read
name based on the unique ID mentioned above. There was also a rare issue
where sometimes the mate pair's orientation was incorrectly reported based on
the CRAM flags, but the embedded BAM flags correctly reported it.</p>
</li>
<li>
<p>Finally the paired reads feature. This was a feature that I really wanted to
get right. It started when garrett and rbuels were going to san diego for the
CIVIC hackathon, and we talked about doing something that matched a "variant
review system" that they had done for the IGV codebase, which involved
detailed inspection of reads. I thought it would probably be feasible for
jbrowse to do this, but I thought essentially at some point that enhancing
jbrowse's read visualizations with paired reads would be a big win. I had
thought about this at the JBrowse hackathon also and my discussions then were
that this was very hard. Overall, I invented a compromise that I thought was
reasonable which was that there can be a "maxInsertSize" for the pileup view
beyond which the pairing wouldn't be resolved. This allowed (a) a significant
reduction in data fetches because I implemented a "read redispatcher" that
would actually literally resolve the read pairs in the separate chunks and
(b) a cleaner view because the layout wouldn't be polluted by very long read
inserts all the time and also, for example, if you scrolled to the right, and
suddenly a read was paired to the left side of your view, it would result in
a bad layout (but with max insert size, the window of all reads within
maxinsertsize are always resolved so this does not happen) and finally ( c)
the paired arc view was incorporated which does not use read redispatching
and which can do very long reads. All of these things took time to think
through and resolve, but it is now I think a pretty solid system and I look
forward to user feedback!</p>
</li>
</ul>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Problems that I experienced with the HPCC]]></title>
            <link>https://cmdcolin.github.io/posts/2017-04-21</link>
            <guid>https://cmdcolin.github.io/posts/2017-04-21</guid>
            <pubDate>Fri, 21 Apr 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Many of these issues may be due to me being stubborn with a weird build system.
Nonetheless, they were baffling, and I had very little interest in debugging
these issues. I just wanted to get my science done after all!</p>
<h1 id="module-load-completely-barfs-with-incomprehensible-error"><a aria-hidden="true" tabindex="-1" href="#module-load-completely-barfs-with-incomprehensible-error"><a href="#module-load-completely-barfs-with-incomprehensible-error" style="margin-right: 10px">#</a></a>Module load completely barfs with incomprehensible error</h1>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ module spider bedtools</span></span>
<span class="line"><span style="color: #A6ACCD">    Using system spider cache file</span></span>
<span class="line"><span style="color: #A6ACCD">    /opt/software/lmod/bin/lua: /opt/software/lmod/4.1.4icer5/libexec/Spider.lua:662: attempt to perform arithmetic on a nil value</span></span>
<span class="line"><span style="color: #A6ACCD">    stack traceback:</span></span>
<span class="line"><span style="color: #A6ACCD">        /opt/software/lmod/4.1.4icer5/libexec/Spider.lua:662: in </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">'Level1'</span></span>
<span class="line"><span style="color: #A6ACCD">        /opt/software/lmod/4.1.4icer5/libexec/Spider.lua:640: in </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">'spiderSearch'</span></span>
<span class="line"><span style="color: #A6ACCD">        /opt/software/lmod/4.1.4icer5/libexec/lmod:967: in </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">'cmd'</span></span>
<span class="line"><span style="color: #A6ACCD">        /opt/software/lmod/4.1.4icer5/libexec/lmod:1195: in </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> </span><span style="color: #ADD7FF">'main'</span></span>
<span class="line"><span style="color: #A6ACCD">        /opt/software/lmod/4.1.4icer5/libexec/lmod:1222: in main chunk</span></span>
<span class="line"><span style="color: #A6ACCD">        [C]: </span><span style="color: #91B4D5">?</span></span></code></pre>
<h1 id="linuxbrew-is-terribly-confused-by-things-that-depend-on-gcc"><a aria-hidden="true" tabindex="-1" href="#linuxbrew-is-terribly-confused-by-things-that-depend-on-gcc"><a href="#linuxbrew-is-terribly-confused-by-things-that-depend-on-gcc" style="margin-right: 10px">#</a></a>Linuxbrew is terribly confused by things that depend on gcc</h1>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    brew install hello</span></span>
<span class="line"><span style="color: #A6ACCD">    ==</span><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> Installing dependencies for hello: glibc, xz, gmp, mpfr, libmpc, isl, gcc</span></span>
<span class="line"><span style="color: #A6ACCD">    ==</span><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> Installing hello dependency: glibc</span></span>
<span class="line"><span style="color: #A6ACCD">    Error: glibc cannot be built with any available compilers.</span></span>
<span class="line"><span style="color: #A6ACCD">    Install Clang or brew install gcc</span></span></code></pre>
<p>Using module load Clang does not fix problem >_&#x3C;</p>
<h1 id="compiling-things-manually-on-software-machine-does-not-work-on-interactive-machine"><a aria-hidden="true" tabindex="-1" href="#compiling-things-manually-on-software-machine-does-not-work-on-interactive-machine"><a href="#compiling-things-manually-on-software-machine-does-not-work-on-interactive-machine" style="margin-right: 10px">#</a></a>Compiling things manually on software machine does not work on interactive machine</h1>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ mummer</span></span>
<span class="line"><span style="color: #A6ACCD">    Illegal instruction (core dumped)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #767C9DB0"># Many modules have a secret dependency on loading other modules</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    $ module load LASTZ</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    Lmod Warning: Did not find: LASTZ</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    Try: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">module spider LASTZ</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">    $ module load GNU</span></span>
<span class="line"><span style="color: #A6ACCD">    $ module load LASTZ</span></span>
<span class="line"><span style="color: #A6ACCD">    $ lastz</span></span>
<span class="line"><span style="color: #A6ACCD">    You must specify a target file</span></span>
<span class="line"><span style="color: #A6ACCD">    lastz-- Local Alignment Search Tool, blastZ-like</span></span>
<span class="line"><span style="color: #A6ACCD">      (version 1.03.02 released 20110719)</span></span>
<span class="line"><span style="color: #A6ACCD">    ...</span></span></code></pre>
<p>Etc etc.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[How I learned to hate ORM (especially for data import scripts)]]></title>
            <link>https://cmdcolin.github.io/posts/2017-03-12</link>
            <guid>https://cmdcolin.github.io/posts/2017-03-12</guid>
            <pubDate>Sun, 12 Mar 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When I was tasked with making a new application for our websites, I was given
several CSV files with some expectation that these files could basically be
just loaded into a database and jumped into production really quickly. If you
are using R and Shiny to make a data visualization dashboard, especially if it
is read only, this can actually be a reality for you: load those CSVs and just
pretend you're a full featured database. I had to actually create some read
write functionality though. This was sort of experimental for me and I'm not
that well versed in databases, but I wanted to share my experience</p>
<p>When I started, I chose grails/groovy/hibernate/GORM as a platform to use. This
quickly turned into pain when I tried to make a data importer using grails
also.</p>
<p>Each CSV row from the source file would have to be turned into many different
rows in the database because it represented multiple relationships, example:</p>
<p><img src="/media/158300473458_0.png" alt=""></p>
<p>Initially I made my data importer in grails, and was hardcoding column names
knowing full well this was really inflexible. At the same time I was also
trying to "iterate" on my database schema, and I'd want to re-import my data to
test it out, but it was really really slow. I tried many different approaches
to try to speed this up such as cleanUpGorm, StatelessSessions, and other
tricks, but it would take 10-20 minutes for imports on a 100KB input file.</p>
<p>What I basically realised is that for bulk data import</p>
<ol>
<li>
<p>Using the ORM is really painful for bulk import.</p>
</li>
<li>
<p>If you can pre-process your data so that it is already in the format the
database expects, then you can use the CSV COPY command which is very fast</p>
</li>
<li>
<p>If you can then abandon the ORM mentality and even ignore it as a
convenience factor, then you can embrace my database system itself</p>
</li>
</ol>
<p>Overall, after all this work, it just seemed like ORM treats the database as a
danger and something to be heavily abstracted over, but I actually found joy in
learning how to treat my database as a first class citizen. Soon I started
gaining appreciation of</p>
<ul>
<li>using plain SQL queries</li>
<li>learning about full text search in postgres with ts_query</li>
<li>learning about triggers to make a "last updated" field get updated
automatically</li>
</ul>
<p>I am pretty happy this way, and although I miss some things like criteria
queries which are very powerful, I am happy that I can interact with my
database as a friend</p>
<p>At the very least, due to the fact that I now pre-process the data before
database loading, I can now import large amounts of data super fast with the
CSV COPY command</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Plotting a coordinate on the screen]]></title>
            <link>https://cmdcolin.github.io/posts/2017-02-16</link>
            <guid>https://cmdcolin.github.io/posts/2017-02-16</guid>
            <pubDate>Thu, 16 Feb 2017 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I always end up having to remember the math for plotting a coordinate on the
screen, for example an HTML5 canvas and end up stitching it together manually</p>
<p>If you step through the math it becomes very simple though</p>
<p>Say you have a coordinate range of 1000 to 2000 that you want to plot in a
HTML5 canvas of size 100px</p>
<p>Let's do a quick example and then generalize. Let's say you want to plot the
value 1500, and put it into screen coordinates, so you take that and subtract
the minimum of the range</p>
<pre><code>1500-1000
</code></pre>
<p>Second, you know your point is going to be halfway in the range, and in
general, to get this position, you divide now by the size of the interval you
are plotting in, e.g. 2000-1000</p>
<pre><code>(1500-1000)/(2000-1000) = 0.5
</code></pre>
<p>We get 0.5 as expected. Then you multiply this proportion times the width of
box you are rendering in, e.g. 100 pixels wide, and get that you put your pixel
at position 50px</p>
<p>To summarize, the general formula for plotting a point x in a range (x1,x2) on
a screen of width w is</p>
<pre><code>w*(x -  x1) / (x2 - x1)
</code></pre>
<p>Of course same thing applies for y</p>
<pre><code>h*(y - y1) / (y2 - y1)
</code></pre>
<p>This does not take into account small possible adjustments for closed vs open
ranges, which could be important to avoid subpixel rendering on a canvas, but
that can be a further exercise</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Creating a JBrowse plugin]]></title>
            <link>https://cmdcolin.github.io/posts/2016-11-10</link>
            <guid>https://cmdcolin.github.io/posts/2016-11-10</guid>
            <pubDate>Thu, 10 Nov 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have been very impressed with peoples creativity and willingness to
dig into all the details of JBrowse to customize it's features. One
great way to do this in a modular way is to create a "JBrowse plugin".
This concept sounds hard but you can set up a simple couple of files and
refresh your browser and it will "just work"!</p>
<h2 id="introduction-to-the-plugin-mindset"><a aria-hidden="true" tabindex="-1" href="#introduction-to-the-plugin-mindset"><a href="#introduction-to-the-plugin-mindset" style="margin-right: 10px">#</a></a>Introduction to the plugin mindset</h2>
<p>In a plugin, you can define new things like custom track types, custom
adaptors to new file types, new track selectors, or something really
different. A key insight about the custom types of tracks and things
though is that you can put the name of your new custom class in the
jbrowse config file which will then find the code in your plugin and run
it. Plugins can do other things, but the ability to just swap out track
types or other components in the config file is a great benefit.</p>
<h2 id="a-scenario"><a aria-hidden="true" tabindex="-1" href="#a-scenario"><a href="#a-scenario" style="margin-right: 10px">#</a></a>A scenario</h2>
<p>One example that was talked about on the mailing list might involve
adding new menu items for a given track. We might consider a plugin that
defines a custom track type to add that functionality.</p>
<p>Basically, we can use object- oriented principles to "inherit" from some
existing track type like CanvasFeatures and then extend its
functionality by overriding the functions.</p>
<p>If you are not familiar with object-oriented javascript, dojo makes it
pretty easy (but, especially get a background on this if you need to,
see footnotes below).</p>
<p>We can inherit a new track type by using the "define" function to
include the dependencies needed in a file, and they are listed in an
array at the top of your file.</p>
<p>Then the "declare" function creates a new class. The first argument to
declare is the is your parent class, like CanvasFeatures, and we type
"return declare" because we are returning our new track class from the
module.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">define</span><span style="color: #A6ACCD">([</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dojo/_base/declare</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">JBrowse/View/Track/CanvasFeatures</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">], </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">declare</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">CanvasFeatures</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">declare</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">CanvasFeatures</span><span style="color: #A6ACCD">, {</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">_trackMenuOptions</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">function</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">()</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #91B4D5">var</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">opts</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">=</span><span style="color: #ADD7FF"> </span><span style="color: #5DE4C7">this</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">inherited</span><span style="color: #A6ACCD">(</span><span style="color: #ADD7FF">arguments</span><span style="color: #A6ACCD">)</span><span style="color: #ADD7FF"> </span><span style="color: #767C9DB0">//call the parent classes function</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #E4F0FB">opts</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">push</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #767C9DB0">// add an extra menu item to the array returned from parent class function</span></span>
<span class="line"><span style="color: #ADD7FF">        </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #ADD7FF">label</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Custom item</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #ADD7FF">type</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dijit/CheckedMenuItem</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #ADD7FF">onClick</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">function</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">event</span><span style="color: #A6ACCD">)</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #ADD7FF">            </span><span style="color: #E4F0FB">console</span><span style="color: #A6ACCD">.</span><span style="color: #E4F0FBD0">log</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">Clicked</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">          </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">          </span><span style="color: #ADD7FF">iconClass</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dijitIconPackage</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">        </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #5DE4C7C0">return</span><span style="color: #ADD7FF"> </span><span style="color: #E4F0FB">opts</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>Code listing 1. an example custom track type, MyTrack.js, that adds an
extra track menu item</p>
<h2 id="now-how-do-we-make-this-a-plugin"><a aria-hidden="true" tabindex="-1" href="#now-how-do-we-make-this-a-plugin"><a href="#now-how-do-we-make-this-a-plugin" style="margin-right: 10px">#</a></a>Now how do we make this a plugin?</h2>
<p>In the above section, we created a new track subclass with a custom menu
option. How do we use this track? We want to turn it into part of afine
the boilerplate code from the <a href="http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse_Plugins">Writing
plugins</a>
guide.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">define</span><span style="color: #A6ACCD">([</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dojo/_base/declare</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">JBrowse/Plugin</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">], </span><span style="color: #91B4D5">function</span><span style="color: #A6ACCD"> (</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">declare</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FB">JBrowsePlugin</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">) {</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7C0">return</span><span style="color: #A6ACCD"> </span><span style="color: #E4F0FBD0">declare</span><span style="color: #A6ACCD">(</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #E4F0FB">JBrowsePlugin</span><span style="color: #A6ACCD">, </span><span style="color: #767C9DB0">// this line says our plugin's main.js derives from the "JBrowse/Plugin" base class</span></span>
<span class="line"><span style="color: #A6ACCD">    {</span></span>
<span class="line"><span style="color: #E4F0FB">      </span><span style="color: #ADD7FF">constructor</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #91B4D5">function</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">args</span><span style="color: #A6ACCD">)</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #767C9DB0">//don't necessarily have to do any initializing here, but you</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #767C9DB0">//can get a handle to various jbrowse components if any initialization</span></span>
<span class="line"><span style="color: #A6ACCD">        </span><span style="color: #767C9DB0">//is needed from the args.browser variable</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #A6ACCD">  )</span></span>
<span class="line"><span style="color: #A6ACCD">})</span></span></code></pre>
<p>Code listing 2. Our plugin's main.js</p>
<p>After this, we create the plugin directory structure</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin/js</p>
<blockquote>
<p>jbrowse/plugins/MyPlugin/js/main.js</p>
<p>jbrowse/plugins/MyPlugin/js/MyTrack.js</p>
</blockquote>
</blockquote>
</blockquote>
<p>Then we can add our new plugin to a config file like <code>jbrowse_conf.json</code>
as <code>"plugins": ["MyPlugin"]</code> and then make a track in <code>trackList.json</code>
have <code>"type": "MyPlugin/MyTrack"</code> instead of for
example <code>"type": "CanvasFeatures"</code>. That will tell jbrowse to load the
<code>MyTrack</code> class from your plugin instead of the normal <code>CanvasFeatures</code>
class.</p>
<p>That's about it!</p>
<p>Note that the <code>bin/new-plugin.pl</code> script can automatically initialize some
of this directory structure too. Try running <code>bin/new-plugin.pl MyPlugin</code> and see what happens.</p>
<h3 id="footnotes"><a aria-hidden="true" tabindex="-1" href="#footnotes"><a href="#footnotes" style="margin-right: 10px">#</a></a>Footnotes:</h3>
<p>It is important to understand the module format (AMD) which is what the
"define" function is about and the dojo way of definining classes using
the "declare" function. Together, this allows the dojo to create
object-oriented programs that are modular in javascript. See
<a href="http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html">http://dojotoolkit.org/reference-guide/1.10/dojo/_base/declare.html</a>
and <a href="http://dojotoolkit.org/documentation/tutorials/1.9/modules/">http://dojotoolkit.org/documentation/tutorials/1.9/modules/</a>
(understanding this helps you understand the "preamble" for declaring a
jbrowse plugin)</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Installing clamav on OSX]]></title>
            <link>https://cmdcolin.github.io/posts/2016-06-20</link>
            <guid>https://cmdcolin.github.io/posts/2016-06-20</guid>
            <pubDate>Mon, 20 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>It is a common trope that OSX doesn't need anti-virus because everyone targets
windows. That is maybe comforting to some but I think it's pretty naive. It
would be better to have a system on your machine to tell you about viruses,
trojan horses, malware, or spying. I have decided to employ a free open source
scanner called clamAV <a href="https://www.clamav.net/">https://www.clamav.net/</a>. I don't really know if it has
any good features for Mac scanning but thought it could be fun to install</p>
<p>ClamAV is the top choice for linux based OSs being free and open source (GPL)
virus scanner.</p>
<p>To install we can use homebrew</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ brew install clamav</span></span></code></pre>
<p>Then there is s config file to setup. This is located
in /usr/local/etc/clamav/freshclam.conf</p>
<p>To setup, edit this file and delete the line that says "Example" and
then uncheck the desired settings. I would chose to enable logging to
/var/log/clamav.log and also database directories in /var/lib/clamav</p>
<p>Then run the "freshclam" program</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ freshclam</span></span></code></pre>
<p>This will download the virus scanner database (main) and daily scanning
updates</p>
<p>Then you can run clamscan on a given directory (recursively, only print
infected files)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ clamscan -ri </span><span style="color: #91B4D5">~</span><span style="color: #A6ACCD">/</span></span></code></pre>
<p>Or add this to a cronjob</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ crontab -</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">    @hourly clamscan -ri </span><span style="color: #91B4D5">~</span><span style="color: #A6ACCD">/ </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD"> mail -v -s </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">clamscan results</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD"> your.email@gmail.com  </span><span style="color: #91B4D5">></span><span style="color: #A6ACCD">/dev/null </span><span style="color: #91B4D5">2>&#x26;1</span></span>
<span class="line"></span></code></pre>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Querying InterMine databases using R]]></title>
            <link>https://cmdcolin.github.io/posts/2016-06-17</link>
            <guid>https://cmdcolin.github.io/posts/2016-06-17</guid>
            <pubDate>Fri, 17 Jun 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>In the past, I had found some ways to do simple queries on InterMine web
services using basic HTTP commands with R (see
<a href="https://gist.github.com/cmdcolin/4758167bdd89e6c9c055">https://gist.github.com/cmdcolin/4758167bdd89e6c9c055</a>)</p>
<p>However, the InterMineR (<a href="https://github.com/intermine/intermineR">https://github.com/intermine/intermineR</a>)
package automates some of these features and makes it easier to load the
data in R.</p>
<h2 id="installation"><a aria-hidden="true" tabindex="-1" href="#installation"><a href="#installation" style="margin-right: 10px">#</a></a>Installation</h2>
<p>One way to install InterMineR is to install from github with
hadley/devtools</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">install.packages(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">devtools</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">devtools</span><span style="color: #5DE4C7">::</span><span style="color: #E4F0FBD0">install_github</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">hadley/devtools</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #A6ACCD">devtools</span><span style="color: #5DE4C7">::</span><span style="color: #E4F0FBD0">install_github</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">intermine/intermineR</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span></code></pre>
<h2 id="usage"><a aria-hidden="true" tabindex="-1" href="#usage"><a href="#usage" style="margin-right: 10px">#</a></a>Usage</h2>
<p>Basic usage includes loading the "intermine URL" using the initInterMine
function. Then various functions can be called on this result.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">library(</span><span style="color: #E4F0FB">InterMineR</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FB">mine</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FBD0">initInterMine</span><span style="color: #A6ACCD">(</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">http://bovinegenome.org/bovinemine/</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">)</span></span>
<span class="line"><span style="color: #E4F0FBD0">getVersion</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0">#18, intermine API version</span></span>
<span class="line"><span style="color: #E4F0FBD0">getRelease</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0">#1.0, our data release version</span></span>
<span class="line"><span style="color: #E4F0FBD0">getTemplates</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0"># lists all templates on interminer</span></span></code></pre>
<h2 id="run-a-template-query"><a aria-hidden="true" tabindex="-1" href="#run-a-template-query"><a href="#run-a-template-query" style="margin-right: 10px">#</a></a>Run a template query</h2>
<p>From the getTemplates function, if you see a template query that you
want to run, you can use the getTemplateQuery function with it's name,
and run it with the runQuery function</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FBD0">getTemplateQuery</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">,</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">TQ_protein_to_gene</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0"># see what template looks like</span></span>
<span class="line"><span style="color: #E4F0FB">template</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FBD0">getTemplateQuery</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">,</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">TQ_protein_to_gene</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0"># save template</span></span>
<span class="line"><span style="color: #E4F0FBD0">runQuery</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB">template</span><span style="color: #A6ACCD">) </span><span style="color: #767C9DB0"># run the template query with default params, receive data.frame</span></span></code></pre>
<p>This method is good, but some improvement could be added to change
default parameters in the template query, etc.</p>
<h2 id="run-query-xml"><a aria-hidden="true" tabindex="-1" href="#run-query-xml"><a href="#run-query-xml" style="margin-right: 10px">#</a></a>Run query XML</h2>
<p>Another option for running queries is to use the query XML that you can
download from the InterMine query result pages.</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #767C9DB0"># get all Ensembl genes on chr28 from bovinemine</span></span>
<span class="line"><span style="color: #E4F0FB">query</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">&#x3C;query model="genomic" view="Gene.primaryIdentifier</span></span>
<span class="line"><span style="color: #5DE4C7">Gene.secondaryIdentifier Gene.symbol Gene.name Gene.source</span></span>
<span class="line"><span style="color: #5DE4C7">Gene.organism.shortName Gene.chromosome.primaryIdentifier"</span></span>
<span class="line"><span style="color: #5DE4C7">sortOrder="Gene.primaryIdentifier ASC" >&#x3C;constraint</span></span>
<span class="line"><span style="color: #5DE4C7">path="Gene.organism.shortName" op="=" value="B. taurus"</span></span>
<span class="line"><span style="color: #5DE4C7">/>&#x3C;constraint path="Gene.chromosome.primaryIdentifier" op="="</span></span>
<span class="line"><span style="color: #5DE4C7">value="GK000028.2" />&#x3C;/query></span><span style="color: #A6ACCD">'</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">results</span><span style="color: #91B4D5">=</span><span style="color: #E4F0FBD0">runQuery</span><span style="color: #A6ACCD">(</span><span style="color: #E4F0FB">mine</span><span style="color: #A6ACCD">, </span><span style="color: #E4F0FB">query</span><span style="color: #A6ACCD">)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #A6ACCD">head(</span><span style="color: #E4F0FB">results</span><span style="color: #A6ACCD">)</span></span></code></pre>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>The InterMineR package has a couple of nice features for getting
InterMine data with a couple of functions for looking at templates. For
many use cases, copying the Query XML from a InterMine webpage and
pasting that into the runQuery function is sufficient and produces a
data frame that can be analyzed.</p>
<p>PS it is not easy to post XML on tumblr after editing the post in
markdown mode. You have to add the lt and gt shortcuts and even after
that it gets filtered?!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[How to make your resume.json or resume-cli look great]]></title>
            <link>https://cmdcolin.github.io/posts/2016-04-23</link>
            <guid>https://cmdcolin.github.io/posts/2016-04-23</guid>
            <pubDate>Sat, 23 Apr 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>There are a ton of themes for resume-cli that are not immediately
obvious to find</p>
<p>To see all the great themes on the command line, check out</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    curl http://themes.jsonresume.org/themes.json </span><span style="color: #91B4D5">|</span><span style="color: #A6ACCD">jq .</span></span></code></pre>
<p>I tried a bunch of them</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">   4679  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t modern-freeland</span></span>
<span class="line"><span style="color: #A6ACCD">   4680  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t modern-freelance</span></span>
<span class="line"><span style="color: #A6ACCD">   4682  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t modern-with-projects-section</span></span>
<span class="line"><span style="color: #A6ACCD">   4683  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t dangerflat</span></span>
<span class="line"><span style="color: #A6ACCD">   4684  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t striking</span></span>
<span class="line"><span style="color: #A6ACCD">   4685  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t crisp</span></span>
<span class="line"><span style="color: #A6ACCD">   4686  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t semantic-ui</span></span>
<span class="line"><span style="color: #A6ACCD">   4687  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t material</span></span>
<span class="line"><span style="color: #A6ACCD">   4688  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t modern-extended</span></span>
<span class="line"><span style="color: #A6ACCD">   4689  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t paper</span></span>
<span class="line"><span style="color: #A6ACCD">   4690  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t smart</span></span>
<span class="line"><span style="color: #A6ACCD">   4691  resume </span><span style="color: #5DE4C7">export</span><span style="color: #A6ACCD"> site/resume/index.html -t flat</span></span>
<span class="line"></span></code></pre>
<p>Note: resume.json is setup to use HTML themes, so even though it has a
PDF output option, it is inherently converting HTML first and then to
PDF. The PDF conversion is done by a automated cloud service, which
currently can fail sometimes. It is probably better to just choose HTML
and convert to PDF if you need to.
See <a href="https://github.com/jsonresume/resume-cli/issues/94">https://github.com/jsonresume/resume-cli/issues/94</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Creating a testing framework for JBrowse plugins]]></title>
            <link>https://cmdcolin.github.io/posts/2016-04-19</link>
            <guid>https://cmdcolin.github.io/posts/2016-04-19</guid>
            <pubDate>Tue, 19 Apr 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Testing client side apps requires a couple of tedious steps: Organizing
the git clone, the dependencies, wrangling up a web server, the test
framework, etc.</p>
<p>When testing a plugin for jbrowse, the dependency tree is interesting
because the plugin "depends" on JBrowse to run, but we will use
travis-CI and bower inside the git repo for our plugin to accomplish
this.</p>
<p>In this scenario, we will</p>
<ol>
<li>
<p>Use bower to install jasmine and JBrowse (our platform that we write
the plugin for)</p>
</li>
<li>
<p>Use nginx to launch a webserver on travis-CI</p>
</li>
<li>
<p>Use the phantomjs run-jasmine.js script to check jasmine test
results</p>
</li>
</ol>
<p>Without further ado</p>
<p>Here is the .travis.yml</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">sudo</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">false</span></span>
<span class="line"><span style="color: #5DE4C7">addons</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">apt</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">packages</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #ADD7FF">nginx</span></span>
<span class="line"><span style="color: #5DE4C7">cache</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">apt</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">true</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">directories</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    - </span><span style="color: #ADD7FF">$HOME/.cache/bower</span></span>
<span class="line"><span style="color: #5DE4C7">before_install</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">npm install -g jshint bower</span></span>
<span class="line"><span style="color: #5DE4C7">install</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">bower install</span></span>
<span class="line"><span style="color: #5DE4C7">before_script</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">cat test/travis.conf | envsubst > test/travis-envsubst.conf</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">nginx -c `pwd`/test/travis-envsubst.conf</span></span>
<span class="line"><span style="color: #5DE4C7">script</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">phantomjs test/run-jasmine.js http://localhost:9000/test/</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">jshint js</span></span></code></pre>
<p>Refer to
<a href="http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2">http://searchvoidstar.tumblr.com/post/141858047213/running-nginx-on-containerised-travis-ci-pt-2</a>
for details on the nginx setup</p>
<p>Here is the bower.json</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">name</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">sashimiplot</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">homepage</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">https://github.com/cmdcolin/sashimiplot</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">description</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">Sashimi track type for jbrowse</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">main</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">js/main.js</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">keywords</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">bioinformatics</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">, </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">jbrowse</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">license</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">MIT</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">ignore</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: [</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">**/.*</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">node_modules</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">bower_components</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">src</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">test</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">tests</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  ],</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">devDependencies</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: {</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">jasmine-core</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">jasmine#^2.4.1</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #A6ACCD">"</span><span style="color: #ADD7FF">jbrowse</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">git://github.com/GMOD/jbrowse.git#master</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">  }</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>The key thing here is that it installs jasmine and JBrowse. I set
.bowerrc to install both jasmine and JBrowse to the "test" directory</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">{</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">directory</span><span style="color: #A6ACCD">"</span><span style="color: #A6ACCD">: </span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">test</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #A6ACCD">}</span></span></code></pre>
<p>With this setup, bower will make a "flat dependency tree" in the test
directory, so it will look like this</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    $ ls -1 test</span></span>
<span class="line"><span style="color: #A6ACCD">    FileSaver</span></span>
<span class="line"><span style="color: #A6ACCD">    dbind</span></span>
<span class="line"><span style="color: #A6ACCD">    dgrid</span></span>
<span class="line"><span style="color: #A6ACCD">    dijit</span></span>
<span class="line"><span style="color: #A6ACCD">    dojo</span></span>
<span class="line"><span style="color: #A6ACCD">    dojox</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">*</span><span style="color: #A6ACCD">index.html</span><span style="color: #91B4D5">*</span></span>
<span class="line"><span style="color: #A6ACCD">    jDataView</span></span>
<span class="line"><span style="color: #A6ACCD">    jasmine-core</span></span>
<span class="line"><span style="color: #A6ACCD">    jbrowse</span></span>
<span class="line"><span style="color: #A6ACCD">    json-schema</span></span>
<span class="line"><span style="color: #A6ACCD">    jszlib</span></span>
<span class="line"><span style="color: #A6ACCD">    lazyload</span></span>
<span class="line"><span style="color: #A6ACCD">    put-selector</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">*</span><span style="color: #A6ACCD">run-jasmine.js</span><span style="color: #91B4D5">*</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">*</span><span style="color: #A6ACCD">spec</span><span style="color: #91B4D5">*</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #91B4D5">*</span><span style="color: #A6ACCD">travis.conf</span><span style="color: #91B4D5">*</span></span>
<span class="line"><span style="color: #A6ACCD">    util</span></span>
<span class="line"><span style="color: #A6ACCD">    xstyle</span></span></code></pre>
<p>Here the asterisks indicate things that are part of our app, other's are
automatically installed by bower (jbrowse, jasmine-core, the dojo
dependencies, and other things)</p>
<p>Then we can create the jasmine test/index.html to be something like this</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #E4F0FB">&#x3C;!</span><span style="color: #5DE4C7">DOCTYPE</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">html</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">PUBLIC</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">"-//W3C//DTD HTML 4.01 Transitional//EN"</span><span style="color: #E4F0FB"> </span><span style="color: #5DE4C7">"http://www.w3.org/TR/html4/loose.dtd"</span><span style="color: #E4F0FB">></span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">meta</span><span style="color: #E4F0FB"> /></span></span>
<span class="line"><span style="color: #A6ACCD">Jasmine Spec Runner</span></span>
<span class="line"></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">link</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">rel</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">stylesheet</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">href</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">jasmine-core/lib/jasmine-core/jasmine.css</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> /></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">src</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">jasmine-core/lib/jasmine-core/jasmine.js</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">src</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">jasmine-core/lib/jasmine-core/boot.js</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">script</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #5FB3A1">type</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text/javascript</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #5FB3A1">src</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">dojo/dojo.js</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #5FB3A1">data-dojo-config</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">async: 1</span><span style="color: #A6ACCD">"</span></span>
<span class="line"><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">type</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text/javascript</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #E4F0FBD0">require</span><span style="color: #A6ACCD">({</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">baseUrl</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">.</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #E4F0FB">    </span><span style="color: #ADD7FF">packages</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">[</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dojo</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dijit</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dojox</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">jszlib</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">name</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">lazyload</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">location</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">lazyload</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">main</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">lazyload</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">dgrid</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">xstyle</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">put-selector</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">FileSaver</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">name</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">jDataView</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">location</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">jDataView/src</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">main</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">jdataview</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">name</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">JBrowse</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">location</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">jbrowse/src/JBrowse</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #ADD7FF">      </span><span style="color: #A6ACCD">{</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">name</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">SashimiPlot</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD">,</span><span style="color: #E4F0FB"> </span><span style="color: #ADD7FF">location</span><span style="color: #A6ACCD">:</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">../js</span><span style="color: #A6ACCD">'</span><span style="color: #ADD7FF"> </span><span style="color: #A6ACCD">},</span></span>
<span class="line"><span style="color: #ADD7FF">    </span><span style="color: #A6ACCD">],</span></span>
<span class="line"><span style="color: #E4F0FB">  </span><span style="color: #A6ACCD">})</span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;/</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">type</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">text/javascript</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">src</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">spec/SashimiPlot.spec.js</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">script</span><span style="color: #E4F0FB">></span></span>
<span class="line"><span style="color: #E4F0FB">&#x3C;</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">id</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">sandbox</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB"> </span><span style="color: #5FB3A1">style</span><span style="color: #A6ACCD">=</span><span style="color: #A6ACCD">"</span><span style="color: #5DE4C7">overflow:hidden; height:1px;</span><span style="color: #A6ACCD">"</span><span style="color: #E4F0FB">>&#x3C;/</span><span style="color: #5DE4C7">div</span><span style="color: #E4F0FB">></span></span></code></pre>
<p>The "packages" in the require statement puts all these packages in the
right "namespace" for the AMD includes, and the "specs" are defined like
<code>&#x3C;script type="text/javascript" src="spec/Projection.spec.js">&#x3C;/script></code></p>
<p>Finally, run-jasmine.js is used to check the results of the jasmine tests (it
is run via phantomjs in the travis-CI script). It is a special version for the
most recent version of jasmine (2.4)
<a href="https://gist.github.com/vmeln/b6cbb319d9a0efc816be">https://gist.github.com/vmeln/b6cbb319d9a0efc816be</a></p>
<p>For an example of the project using this, see
<a href="https://github.com/cmdcolin/sashimiplot">https://github.com/cmdcolin/sashimiplot</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Creating a docker image]]></title>
            <link>https://cmdcolin.github.io/posts/2016-04-17</link>
            <guid>https://cmdcolin.github.io/posts/2016-04-17</guid>
            <pubDate>Sun, 17 Apr 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Example</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">    brew install docker boot2docker docker-machine</span></span>
<span class="line"><span style="color: #A6ACCD">    docker-machine create --driver virtualbox default</span></span>
<span class="line"><span style="color: #A6ACCD">    docker-machine env default </span><span style="color: #767C9DB0"># will output some variables</span></span>
<span class="line"><span style="color: #A6ACCD">    eval </span><span style="color: #A6ACCD">"$(</span><span style="color: #5DE4C7">docker-machine env default</span><span style="color: #A6ACCD">)"</span><span style="color: #A6ACCD"> </span><span style="color: #767C9DB0"># use those variables</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #767C9DB0"># make dockerfile</span></span>
<span class="line"><span style="color: #A6ACCD">    docker build -t nameof-yourimage .</span></span></code></pre>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Basic command line productivity tricks and learning experiences]]></title>
            <link>https://cmdcolin.github.io/posts/2016-04-06</link>
            <guid>https://cmdcolin.github.io/posts/2016-04-06</guid>
            <pubDate>Wed, 06 Apr 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<ul>
<li>dd deletes line in vim</li>
<li>Ctrl+d scrolls down in vim</li>
<li>Learn to love your package manager. Homebrew, NPM, gem, cpanm, gvm/sdkman,
etc. these all do amazing things</li>
<li>Once you learn bash, try zsh and oh-my-zsh, they have things like
case-insensitive tab completion</li>
<li>Don't make scripts that hardcode paths, make reusable command line scripts.
Use bash as your "REPL", not R.</li>
<li>git log -p helps analyze your log files in full details (make sure
autocoloring is turned on in your terminal)</li>
<li>There are keys to jump forward and backwards on the command line text editor,
learn them...don't scroll one char at a time</li>
<li>Learn how "PATH" works. Generally it is just a set of directories connected
by ":" separators. You can add things to the path by saying "export
PATH=$PATH:/new/directory/to/add" and you can add this to ~/.bashrc for
example</li>
<li>When your install process for a command line tool seems like nonsense, try
homebrew instead. barring that, learn PATH, and how to run "make install",
etc. Most of your headbashing from installing programs is 90% can be
explained by not understanding how the developer is intending it to be used,
10% of the tool's install process being wrong</li>
<li>Get a static analyzer and basic tests going on your codebase and run it on
travis-ci. Getting started with travis-ci is kind of a learning curve, but it
is worth it</li>
<li>Use cpanm instead of cpan for package management</li>
<li>Vocabulary learning curve: catalina is the same thing as tomcat.
CATALINA_HOME is the same thing as the tomcat folder</li>
<li>alias ll="ls -l", because I type "ll" hundreds of times a day.</li>
<li>For irc productivity, run irssi on a server in a "screen" e.g. "screen irssi"
and then you can come back to conversations later by just logging into the
server with ssh</li>
<li>Edit ~/.ssh/config to include your hostnames so you don't have to type out
long ssh commands
<a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/">http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/</a></li>
<li>Use spaces instead of tabs in your source code (>:( yes I think this is the
one true way)</li>
<li>Try out nodejs and browserify in your spare time to make a "npm" based app in
the browser. it's fun.</li>
<li>Similarly, try making a simple "api" endpoint on the server side with
express.js or similar. can get started very quickly.</li>
<li>Learn how to get a mindset of writing tests. You can write tests proactively
(i.e. Test driven development), but you can also write them "reactively" too
(i.e. if have a bug that you fix, you can make a test to make sure this
doesn't happen anymore)</li>
<li>Similar to above, tests in this sense are more "sanity checks" than they are
formal proofs. Take "assert" logic and "debugging" code out of main codebase
and put them in tests</li>
<li>Minimize comments in your code, and also don't comment out code and leave it
present. Find a way to delete it and move on!</li>
<li>When you have a bunch of .orig files after doing a git merge, just use git
clean -f to get rid of them. Similarly, to get rid of everythng, including
things in your gitignore file (i.e. a super clean) use git clean -fdx. It has
a --exclude argument too</li>
</ul>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Running nginx on containerised travis-CI pt 2]]></title>
            <link>https://cmdcolin.github.io/posts/2016-03-28</link>
            <guid>https://cmdcolin.github.io/posts/2016-03-28</guid>
            <pubDate>Mon, 28 Mar 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>There are several guides out there about how to setup nginx on travis-CI
but I still found it to be a challenge, especially finding a modern one
that works with the containerized builds. I was frustrated that things
like <code>SimpleHTTPServer</code> from python and http-server from npm did not have
fully enough features to run our app either (a complex "static-site
generator" type thing you might say), and I was also too lazy to setup
"sauce labs" (which I have not used, but presume has some better ability
to run functional/browser tests).</p>
<p>Essentially, the problem with running nginx under the containerized
build is that it "likes to be sudo", with many logfiles by default going
to different places that only sudo has access to.</p>
<p>This link is probably the most similar to the technique I use here, but
it is now gone (?) and must be accessed through the internet archive!</p>
<p><a href="https://web.archive.org/web/20150919050719/http://www.doublesignal.com/running-nginx-on-containerised-travis-ci">http://www.doublesignal.com/running-nginx-on-containerised-travis-ci</a></p>
<p>My technique is very similar, however I use an extra trick to set the
file root to the current directory (instead of /tmp/nowhere as in the
link) by using "envsubst" to replace variables in the nginx config file.</p>
<p>Without further ado, the .travis.yml can look like this</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">sudo</span><span style="color: #A6ACCD">: </span><span style="color: #5DE4C7">false</span></span>
<span class="line"><span style="color: #5DE4C7">addons</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  </span><span style="color: #5DE4C7">apt</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">    </span><span style="color: #5DE4C7">packages</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">      - </span><span style="color: #ADD7FF">nginx</span></span>
<span class="line"><span style="color: #5DE4C7">install</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">cat tests/travis.conf | envsubst > tests/travis-envsubst.conf</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">nginx -c `pwd`/tests/travis-envsubst.conf</span></span>
<span class="line"><span style="color: #5DE4C7">script</span><span style="color: #A6ACCD">:</span></span>
<span class="line"><span style="color: #A6ACCD">  - </span><span style="color: #ADD7FF">wget http://localhost:9000/yourfiles</span></span></code></pre>
<p>Then your nginx config file can look like this</p>
<pre><code>    worker_processes 10;
    pid /tmp/nginx.pid;

    error_log /tmp/error.log;

    events {
        worker_connections 768;
    }

    http {
        client_body_temp_path /tmp/nginx_client_body;
        fastcgi_temp_path     /tmp/nginx_fastcgi_temp;
        proxy_temp_path       /tmp/nginx_proxy_temp;
        scgi_temp_path        /tmp/nginx_scgi_temp;
        uwsgi_temp_path       /tmp/nginx_uwsgi_temp;

        server {
            listen 9000 default_server;

            server_name localhost;
            location / {
                root $TRAVIS_BUILD_DIR;
                index  index.html index.htm;
            }
            error_log /tmp/error.log;
            access_log /tmp/access.log;
        }
    }

</code></pre>
<p>Then, when travis-CI is run, it uses envsubst to replace
<code>$TRAVIS_BUILD_DIR</code> in the <code>tests/travis.conf</code> file, and then boots up
nginx</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[On over-reproducibility]]></title>
            <link>https://cmdcolin.github.io/posts/2016-03-05</link>
            <guid>https://cmdcolin.github.io/posts/2016-03-05</guid>
            <pubDate>Sat, 05 Mar 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Recently, some posts were made by <a href="https://twitter.com/arjunrajlab">https://twitter.com/arjunrajlab</a> about how
perhaps we are aiming at "over-reproducibility". I think this is interesting,
and would generally agree that not everyone needs to achieve total automation
of their whole pipeline, but I think the post does a lot of "blaming your
tools" and disparaging good development practices with regards to version
control and figure generation.</p>
<p>I think that the complaint that version control and automated figures are not
for everyone is probably true, but it is overgeneralizing a different problem.
For example, students are not "trained" to work with Git, and they are not
"trained" to do software engineering. In fact, even computer science students
are not generally "trained" to do any of those things (computer science !=
software engineering). But that doesn't mean that your lab needs to forego
using all those tools. Software development can be incredibly complex and
sophisticated, but it's important to make sure things are "done right"!
High-quality and easy-to-reproduce software is really about process, and
engineering. But that is also why there is no one-true-way for
reproducibility. Maybe Arjun doesn't have a reproducible workflow right now,
but what about 5 years down the road, where he suddenly has a great framework
for such things? This happens all the time in software development (for
example, how long ago was it that "push to deploy" did not exist? how often
would you just edit your files live on your site? now that is seen as bad
practice!), but that said, processes for software quality can evolve pretty
organically, so even though some best practices exist, people can grow their
own quality environment.</p>
<p>Even if we agree that software development+version control=good, there are
still a lot of complaints about it in the blogpost. For example, the complaint
that git is too hard is pretty silly, and the xkcd comic about calling over
graph theorist doesn't really help. As a software developer at work, I think
that version control simply helps define a disciplined way of working. Version
control makes you analyze your progress, summarize it as a commit message,
format the code properly, make sure it passes tests, and then talk to your
collaborators about accepting it. Dropbox might accomplish some of those
things, but I would really doubt that it is covering that full scope. Arjun
seems to agree with using version control for some of his labs software
development, so again, there is a spectrum of needs being met. Nevertheless,
there are some weird comments about whether commit messages are like a "lab
notebook", but hint: they are not, write documentation for your project or keep
a separate journal or blog or wiki. Commit messages in my opinion should be
about one line, and the changes should be very self explanatory. But another
big argument in the blogpost is whether version control works for something
like paper writing, and I believe that this underscores something else: that
paper writing is really a pretty messy procedure.</p>
<p>I think that perhaps the "google docs" mode of writing is probably pretty ok
for many things, but it still needs a gatekeeper to incorporate the comments
from coauthors and reviewers into the document in an organized way. In my
experience as a "gatekeeper" with writing my senior thesis, I organized my
paper using knitr, and I automated figures being generated by R wherever
possible, and then I would convert the paper to .docx to share with my
advisors. Then I would take their comments on the .docx and incorporate it back
into my paper. This could be seen as burdensome ("why not just use google
docs"), but I felt that it was a good way to incorporate review into a
reproducible workflow.</p>
<p>Now, my pipeline precludes your PI from having to learn git to make a pull
request on your paper. That's a good thing... and we still have
reproducibility. But what about the figures themselves? I said I had knitr for
reproducible figures, but what about everyone else? I think figures have high
value, and so people might want to have more reproducibility invested in them.
In the blog post, it was claimed that making "complex" pub-quality figures was
difficult (i.e. the plea for Adobe Illustrator), but look at the annotation
functions from ggplot2, and multifaceted images. I found these annotation
functions to be very easy to pick up. There is also the on-going debate about
ggplot2 vs base graphics on the simplystatistics blog, which covers making
publication quality figures, and last I checked, I think the ggplot2′ers were
winning. I don't know how it works in high profile journals like Nature,
because it looks like they just re-do all the figures to make them have some
consistent style, but that doesn't mean your original figure should be
irreproducible.</p>
<p>The debate about reproducible figures is pretty tangible too in things like
microscopy images. Simply look at the large amount of discussion from pubpeer
about image fraud and possible duplications. The pubpeer community obviously
has some pretty sophisticated tools for hunting out possibly manipulated
microscopy images. These types of things also lead to investigations, and you
can see in the high-profile retraction case over STAP cells that it looks like
the investigating committee were simply asking how some figures were made, and
upon finding that lab members don't know, a paper was retracted. The
RetractionWatch blog covers these
investigations <a href="http://retractionwatch.com/2016/02/26/stap-stem-cell-researcher-obokata-loses-another-paper/">http://retractionwatch.com/2016/02/26/stap-stem-cell-researcher-obokata-loses-another-paper/</a></p>
<p>You can't depend on other people to back your figure up, so you need to take
responsibility for making sure your papers and your work are reproducible (and,
there is a spectrum for reproducibility, but I believe that version control is
a great example of highly disciplined work). I also think that just having
folders on some hard drive is not a good way to do things either. There is a
saying in software development that is "if it's not in version control, it
doesn't exist". That's not to say that version control is for everything, big
data obviously has trouble with being stored in git. But that shouldn't block
you from creating reproducible analyses.</p>
<p>Another example from the over-reproducibility blogpost says that if you have
"analysis1" and "analysis2", then version control advocates would tell you to
delete analysis1 and just remember that it is in your history. I think that
this is just a different issue. If you actually care about both analyses, just
make them separate repositories, with basic README.md files explaining each
them, and stop worrying about it. Having one repository containing too many
miscellaneous scripts is actually an anti-pattern. Stop making repositories
called "bioinfo-scripts" that just contain a mish-mash of analysis scripts!
Make your work purpose driven and do tasks. Also, this is an argument against
REPL tools: your R REPL history is not a reproducible script. Make your code
into a script that generates well defined outputs. Windows users: you might not
understand this because the command line on windows is crippled, but you have
to make things run on the command line.</p>
<p>Now I wish I could say that I live by my words, but having been involved in
coauthoring several papers, I will just have to admit that it is really a messy
procedure despite my best intentions as an editor and coauthor. I wish things
would be better!</p>
<p>On over-reproducibility: there is no such thing! There are pretty good
arguments to really automate most of a process, especially if it is done
repeatedly, to remove human errors, because meat-machines genuinely do things
wrong all the time.</p>
<p>And, as my parents would say around the dinner table: "you can always have
more, but you can never have less"...so, you're not going to get to a point of
over-reproducibility. We shouldn't cargo cult it as the only way to do science
but it's not a bad thing to have.</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Cheating in your computer science class by copying from stackoverflow]]></title>
            <link>https://cmdcolin.github.io/posts/2015-12-17</link>
            <guid>https://cmdcolin.github.io/posts/2015-12-17</guid>
            <pubDate>Thu, 17 Dec 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I would like to tell a story about how I provided some personal tutoring help
for a friend in a computer science class, and talk about a nagging feeling that
really felt wrong for me.</p>
<p>So, a long time ago, in a land far far away, a friend took an intermediate
class on C++. I was first updated on his progress when he emailed me to get
some help with some compiler errors. I was happy to help the young padawan.
Here was the error:</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #A6ACCD">         test.cpp:42:43: error: non-ASCII characters are not allowed outside of literals</span></span>
<span class="line"><span style="color: #A6ACCD">                and identifiers</span></span>
<span class="line"><span style="color: #A6ACCD">              for (startScan = 0</span><span style="color: #91B4D5">;</span><span style="color: #A6ACCD"> startScan </span><span style="color: #91B4D5">&#x3C;</span><span style="color: #A6ACCD"> (size − 1)</span><span style="color: #91B4D5">;</span><span style="color: #A6ACCD"> startScan++)</span></span>
<span class="line"><span style="color: #A6ACCD">                                                    ^~</span></span></code></pre>
<p>Now, what does this say to you? For me, it was actually very clear what the
error meant. It simply meant that this code was taken from somewhere, and
copied and pasted into the compiler. I know that because if they had typed it
themself, they definitely would not get this error, because it is the error
that implies something was automatically converted to a unicode dash, mostly
something done during copying and pasting. At this point, I just kind of
laughed, and helped him fix that. I showed how the compiler is actually pretty
smart and can help fix these errors and then I said "l8r dude".</p>
<p>The next week, I had another skype meeting with him, and this time I wanted to
help a little more. It was pretty clear when we started that he was using code
that was copied and pasted again. I said, "uh, ok,....I'm not sure we need that
now, but let's just keep going", and then I sat down and started helping. I
wanted to help get all the details of the program working, so I helped guide
the solution. Each time we needed to test the program, it required repeating
some input lines via <code>cin >></code>, which is really annoying (obviously, you should
test your code with unit tests, but universities don't teach that, a rant for
another day). Anyways, it took awhile, because coding really does just take
time, but in the end he finally got it fixed and I said great job, and he
turned it in!</p>
<p>Now, on my friends last assignment, I got another call for help, and when we
started skype, I found yet again that he had copied code from somewhere, which
included a C++ class and a main function for doing binary trees. I just simply
said "dude, delete that, we don't need it" and so he deleted it, but I think
maybe he had worked on this copied code for awhile, and maybe felt it was kind
of his, so was apprehensive. I insisted though. Then we walked through the
assignment again, very slowly. I spent probably 2-3 hours helping him out that
night. During those hours, I saw him continually making many programming
mistakes such as just not knowing how to declare variable or a function
properly, or just not knowing what to do next. This was kind of frustrating!!!
But I wanted to absolutely teach him how to make it right! I was patient
though, and I wanted to teach a fun lesson, so I showed how you can do some
"unit tests" which avoids having to constantly re-enter your data via <code>cin >> </code>....</p>
<p>Now, the padawan completed his C++ class, and then we all were happy ever
after....but a disturbance in the force was sensed...</p>
<p><img src="http://zelcs.com/wp-content/uploads/2013/02/stackoverflow-logo-dumpster.jpg" alt="image">
Image from <a href="http://zelcs.com/this-is-why-stackoverflow-sucks/">http://zelcs.com/this-is-why-stackoverflow-sucks/</a></p>
<p>I was reminded about all this due to seeing that <a href="http://meta.stackexchange.com/questions/271080/the-mit-license-clarity-on-using-code-on-stack-overflow-and-on-the-stack-excha">StackOverflow is now changing
their "license" over all the little snippets of
code</a>
that are posted on their site. It just makes me reflect on literally HOW OFTEN
PEOPLE JUST COPY AND PASTE FROM THERE. They might understand what they are
doing, or they seriously might not!!! I think it is a real problem that people
sometimes do not understand, but I cannot deny that it can be helpful too.</p>
<p>If I reflect on education in general, I recall when I took a University level
physics class... it was really hard! We had to enter our validated solutions
for the math problems into a computerized website homework portal, and that
involved being 100% correct about things. Now, what if there was just a
physicsoverflow, where they not only had Q&#x26;A, but they had "programs" that gave
you all the right answers to your homework problems that you could just copy
and paste and use as solutions to your homework? This isn't even in the realm
of asking for "homework help" anymore, this is just pure cheating if you can
copy your answers from somewhere. It is disappointing though because this is
what people are doing in computer science!! These students are missing out on
basic understanding of code. !!thisIsNotOk();</p>
<p>Now, at least when I was being a tutor for my friend, I felt like my advice
helped my friend learn some things, not just give answers. But what if I was
not there? I guess there is a certain "impersonal quality" that makes asking
Google/StackOverflow for answers less like conventional "cheating", but that is
still wrong. I think it would be good if more expert knowledge was available
for all people, and not just copy and paste snippets. As a start, I thought
that <a href="http://cacm.acm.org/magazines/2015/10/192385-life-after-moocs/fulltext">this post by Philip Compeau and Pavel
Pevzner</a>
(who teach a Bioinformatics Algorithms MOOC on Coursera) was very interesting,
and I really liked their quote:</p>
<p>"Online education should move toward replicating the experience of receiving
one-on-one tutoring."</p>
<p>That sounds great, but how can this be acheived? And how can it be done right?
I think it really requires the student to "learn how to learn"</p>
<p>If I think back to a long time ago, I remember being in 4th or 5th grade and I
did a book report on World War 1, and I went to the library. I remember
desperately flipping through pages of a 100 page book to try to find some
snippets of information to support some basic idea that I wanted to talk about.
Maybe I wanted to know something specific, but the problem was that I wasn't
REALLY READING THE BOOK! I probably could have had a better understanding of
the topic if I had just read it, or even a part of it, and asked for help, but
instead I just picked and chose snippets from the book to "sound smart". I am
very guilty of this type of error in many instances throughout my school
career, so I am no saint! I even have a phrase to describe this style of
learning...I call it "predatory learning" and it is probably the worst kind of
learning style. Predatory learners often pick and choose from scraps of info,
but they never get a full meal!</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Killing postgres the hard way]]></title>
            <link>https://cmdcolin.github.io/posts/2015-10-22</link>
            <guid>https://cmdcolin.github.io/posts/2015-10-22</guid>
            <pubDate>Thu, 22 Oct 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>So today, I finally decided to do something about a query that we saw
had been running for 25 DAYS on our server</p>
<p>Note: If you find this post and you need to follow the hard way, backup
your data first if possible.</p>
<p>First I could obviously see the culprit: each postgress query runs it's
own process so I could see in "htop" that there was this process that
had been running for 600 hours, or about 25 days</p>
<p>Next, I opened a psql console and ran this query:</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #5DE4C7">SELECT</span><span style="color: #A6ACCD"> datname,procpid,current_query </span><span style="color: #5DE4C7">FROM</span><span style="color: #A6ACCD"> pg_stat_activity </span><span style="color: #5DE4C7">WHERE</span><span style="color: #A6ACCD"> datname</span><span style="color: #91B4D5">=</span><span style="color: #A6ACCD">'</span><span style="color: #5DE4C7">database_name</span><span style="color: #A6ACCD">'</span><span style="color: #A6ACCD"> </span><span style="color: #5DE4C7">ORDER BY</span><span style="color: #A6ACCD"> procpid ;</span></span></code></pre>
<p>This returns which actual queries are being run on the database at any
given time. I could easily see the one problematic query being run,
which was a badly constructed intermine template query that resulted in
a weird "recursion" essentially.</p>
<p>I wanted to try just terminating this query itself, so I ran this</p>
<pre><code>SELECT pg_cancel_backend(29033);
</code></pre>
<p>Each time I ran it, it would say it returned one result but it did
nothing.</p>
<p>I also read that you can try to nicely "kill" it from the command line
(no kill -9) so I ran</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> kill 29033</span></span></code></pre>
<p>This also did not work!</p>
<p>I thought perhaps all these problems were because tomcat was still
active, so we shut down tomcat, and retried killing the specific query,
but to no avail</p>
<p>At this point, I just wanted to restart the whole database server. Kind
of a risky move... but I am sort of a risky kind of guy...(that is not a
good thing with databases). If you are doing this, make backups! I
didn't. Luckily I suffered no data loss but what follows is kind of
intense.</p>
<p>So first, I try and stop the database service</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> service postgresql-9.1 stop</span></span></code></pre>
<p>Unfortunately, this <code>[FAILED]</code> ! And of course, even though it failed,
the database is now unusable. No logging into it anymore, we have to go
with the hard way now...</p>
<p>Looking at /etc/init.d/postgres-9.1 told me that the service stop
command was effectively using something like this:</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> pg_ctl -D /db/postgres/data -m fast stop</span></span></code></pre>
<p>After some reading, I learned that you can try using a slightly
different flag to restart it</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> pg_ctl -D /db/postgres/data -m immediate  stop</span></span></code></pre>
<p>I ran this and to my horror/surprise, it actually worked! At this point
I decided to start postgresql back up again!</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> service postgresql-9.1 start</span></span></code></pre>
<p>The service start quickly returned a SUCCESS, which was great, but then
I tried to start a psql console and the console froze on me! I could not
even ctrl+c it!</p>
<p>I got really worried at this point and I looked at the process manager,
and saw that there was one postmaster process running but it was not
clear what it was doing. I actually tried to shutdown the server again
in a panic mode but at this point it said</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> /usr/pgsql-9.1/bin/pg_ctl stop -D /db/postgres/data/ -m immediate</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> waiting for server to shut</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> down...............................................................</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> failed</span></span></code></pre>
<p>It was probably good that it didn't shut down, because I would quickly
find out that it was in recovery mode. I looked at the postgresql logs
and I saw this, reproduced here for full detail (from before the
shutdown to the restart)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  pgstat wait timeout</span></span>
<span class="line"><span style="color: #91B4D5">></span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> ERROR:  canceling statement due to user request</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> STATEMENT:  CREATE TABLE precomp_90519 AS SELECT DISTINCT a1_.id AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_id, a2_.id AS a2_id, a3_.id AS a3_id, a4_.id AS a4_id,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a5_.id AS a5_id, a6_.id AS a6_id, a12_.id AS a12_id, a10_.id AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a10_id, a1_.id AS a13_, a1_.primaryIdentifier AS a14_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.secondaryIdentifier AS a15_, a2_.type AS a16_, a3_.name AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a17_, a4_.primaryIdentifier AS a18_, a5_.primaryIdentifier AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a19_, a6_.shortName AS a20_, a12_.identifier AS a21_, a10_.code</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS a22_ FROM Gene AS a1_, Homologue AS a2_, Organism AS a3_, Gene</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS a4_, Gene AS a5_, Organism AS a6_, GOAnnotation AS a7_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> GOEvidence AS a8_, OntologyTerm AS a9_, GOEvidenceCode AS a10_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> OntologyAnnotation AS a11_, OntologyTerm AS a12_, GeneGoAnnotation</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS indirect0, EvidenceGOAnnotation AS indirect1 WHERE a1_.id =</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a2_.geneId AND a1_.organismId = a3_.id AND a2_.geneId = a4_.id</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AND a2_.homologueId = a5_.id AND a5_.organismId = a6_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.id = indirect0.Gene AND indirect0.GoAnnotation = a7_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a7_.id = indirect1.GOAnnotation AND indirect1.Evidence = a8_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a7_.ontologyTermId = a9_.id AND a8_.codeId = a10_.id AND a9_.id =</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a11_.ontologyTermId AND a11_.ontologyTermId = a12_.id ORDER BY</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.primaryIdentifier, a1_.secondaryIdentifier, a2_.type,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a3_.name, a4_.primaryIdentifier, a5_.primaryIdentifier,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a6_.shortName, a12_.identifier, a10_.code, a1_.id, a2_.id,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a3_.id, a4_.id, a5_.id, a6_.id, a12_.id, a10_.id</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  could not send data to client: Broken pipe</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> STATEMENT:  CREATE TABLE precomp_90519 AS SELECT DISTINCT a1_.id AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_id, a2_.id AS a2_id, a3_.id AS a3_id, a4_.id AS a4_id,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a5_.id AS a5_id, a6_.id AS a6_id, a12_.id AS a12_id, a10_.id AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a10_id, a1_.id AS a13_, a1_.primaryIdentifier AS a14_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.secondaryIdentifier AS a15_, a2_.type AS a16_, a3_.name AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a17_, a4_.primaryIdentifier AS a18_, a5_.primaryIdentifier AS</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a19_, a6_.shortName AS a20_, a12_.identifier AS a21_, a10_.code</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS a22_ FROM Gene AS a1_, Homologue AS a2_, Organism AS a3_, Gene</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS a4_, Gene AS a5_, Organism AS a6_, GOAnnotation AS a7_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> GOEvidence AS a8_, OntologyTerm AS a9_, GOEvidenceCode AS a10_,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> OntologyAnnotation AS a11_, OntologyTerm AS a12_, GeneGoAnnotation</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AS indirect0, EvidenceGOAnnotation AS indirect1 WHERE a1_.id =</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a2_.geneId AND a1_.organismId = a3_.id AND a2_.geneId = a4_.id</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> AND a2_.homologueId = a5_.id AND a5_.organismId = a6_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.id = indirect0.Gene AND indirect0.GoAnnotation = a7_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a7_.id = indirect1.GOAnnotation AND indirect1.Evidence = a8_.id AND</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a7_.ontologyTermId = a9_.id AND a8_.codeId = a10_.id AND a9_.id =</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a11_.ontologyTermId AND a11_.ontologyTermId = a12_.id ORDER BY</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a1_.primaryIdentifier, a1_.secondaryIdentifier, a2_.type,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a3_.name, a4_.primaryIdentifier, a5_.primaryIdentifier,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a6_.shortName, a12_.identifier, a10_.code, a1_.id, a2_.id,</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> a3_.id, a4_.id, a5_.id, a6_.id, a12_.id, a10_.id</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  unexpected EOF on client connection</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  unexpected EOF on client connection</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  unexpected EOF on client connection</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  unexpected EOF on client connection</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  received fast shutdown request</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  aborting any active transactions</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  autovacuum launcher shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> FATAL:  the database system is shutting down</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  received immediate shutdown request</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> WARNING:  terminating connection because of crash of another server</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> process</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> DETAIL:  The postmaster has commanded this server process to roll back</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> the current transaction and exit, because another server process</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> exited abnormally and possibly corrupted shared memory.</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> HINT:  In a moment you should be able to reconnect to the database and</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> repeat your command.</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  received fast shutdown request</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  database system was interrupted</span><span style="color: #91B4D5">;</span><span style="color: #A6ACCD"> last known up at 2015-10-22</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> 15:47:43 CDT</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  received immediate shutdown request</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  database system was interrupted</span><span style="color: #91B4D5">;</span><span style="color: #A6ACCD"> last known up at 2015-10-22</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> 15:47:43 CDT</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  database system was not properly shut down</span><span style="color: #91B4D5">;</span><span style="color: #A6ACCD"> automatic recovery</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> in progress</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  record with zero length at BBD/1CC2F0C0</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> ...</span></span></code></pre>
<p>You can see all the weird activity that was done here</p>
<ul>
<li>first the attempt to "canceling statement due to user request" did not work</li>
<li>then the database stop using -m fast</li>
<li>then the database stop using -m immediate</li>
<li>the restart (with the HINT, should be ready soon)</li>
<li>the panic mode where i tried to shut it again anyways</li>
</ul>
<p>During the recovery period, I was still very concerned about the
database was doing, so I used "strace" to look at the main postmaster
process.</p>
<p>I was pleasantly surprised to see that the postmaster process was just
cleaning up files in /db/postgres/data/base/pgsql_tmp/, I could see the
file system "unlink" command with successful status codes.</p>
<p>There were about 150 large files in /db/postgres/data/base/pgsql_tmp/,
and I waited about an hour for them to be deleted, and after that, the
postgresql log file said it was ready, and indeed, it was perfect :)</p>
<pre class="shiki" style="background-color: #1b1e28"><code><span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  redo is not required</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  database system is ready to accept connections</span></span>
<span class="line"><span style="color: #91B4D5">></span><span style="color: #A6ACCD"> LOG:  autovacuum launcher started</span></span></code></pre>
<p>What a relief!</p>
<p>I hope this might help any wayward stragglers to see how the postgresql
restart process works. Sometimes things don't shut down cleanly, but I
think it is still good to know some alternative steps to kill -9</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Tomcat memory debugging]]></title>
            <link>https://cmdcolin.github.io/posts/2015-10-15</link>
            <guid>https://cmdcolin.github.io/posts/2015-10-15</guid>
            <pubDate>Thu, 15 Oct 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>In my previous posts, I speculated about the issues that were causing
server lag and CPU usage spiking with
tomcat: <a href="https://cmdcolin.github.io/posts/2015-09-16">https://cmdcolin.github.io/posts/2015-09-16</a></p>
<p>Unfortunately, I was completely wrong in my speculations, but we
increased tomcat memory limits so that the entire Lucene search index
could fit in memory, which was able to fix the spiky CPU problems.</p>
<p>Luckily, fixing the memory issues had very good implications for our
webapp:</p>
<p>I have a cron job uses a simple curl command to grab different pages on
the website, and then it logs the time taken to a output file. I charted
these output times, before and after we increased the memory limits of
tomcat, and it turned out that the response time of the webapp was
dramatically improved by this change.</p>
<p><img src="/media/131229569383_0.png" alt=""></p>
<p>Figure 1. The webapp response time was extremely variable before the
redeploy on Oct 2nd where we increased tomcat's memory allocation, which
thereafter dramatically improved the response time.</p>
<p>Clearly, the webapp response time was being severely compromised by the
memory issues.</p>
<p>In response to all of these issues, I also added GC logging to the
tomcat configuration so that I can see if the GC is correlated with
these webapp response time. Figure 2 shows how high GC activity is
correlated with longer webapp response times, but note that this figure
was made after the other memory allocation problems were fixed, so it is
still much better than the problems we had in the past.</p>
<p><img src="/media/131229569383_1.png" alt=""></p>
<p>Figure 2. After increasing the memory, you can see webapp response time
is much better, except if the GC activity becomes very high, and then
this increases the response time.</p>
<p>Edit: Bonus screenshot, seemingly each friday we get a majoy activity
burst that triggers GC activity!</p>
<p><img src="/media/131229569383_2.png" alt=""></p>
<p>Figure 3. Crazy Java GC activity on a friday night, but the app seems to
recover from it</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>Increasing the memory allocation to java and tomcat allows the entire
system to perform much better. If you can afford to get more memory to
allocate to tomcat, then it's probably a good idea.</p>
<p>Also, tracking your webapp response times will help you see if your
changes are having a good effect. I made this a script for graphing log
outputs here <a href="https://github.com/cmdcolin/loggraph">https://github.com/cmdcolin/loggraph</a></p>
<p>PS:</p>
<p>If your tomcat is running as the tomcat user, then it can be difficult
to debug the memory problems simply with the "get heap dump" from
jvisualvm, because the permissions will be wrong. To fix this, try using
a privileged user to run the jmap command:</p>
<pre><code>runuser -l tomcat -c "/usr/java/latest/bin/jmap-dump:format=b,file=/db/tomcat/tomcat.dump 25543"
</code></pre>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Fixing spiky CPU issues and unresponsiveness with Tomcat]]></title>
            <link>https://cmdcolin.github.io/posts/2015-09-16</link>
            <guid>https://cmdcolin.github.io/posts/2015-09-16</guid>
            <pubDate>Wed, 16 Sep 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The symptoms of spiking and the server was lagging after light usage of the
applications, the CPU usage would start spiking and rapidly cycle from many CPU
cores (e.g. 2000% CPU usage) back to 0% CPU for no apparent reason.</p>
<p>We now know this was due to memory issues and garbage collection, but it was
confusing because it wasn't strictly showing up as GC usage in JVisualVm (the
GC usage, blue spikes on the left in fig 1, are small, but the orange spikes
are large, even though the memory issues are the problem)</p>
<p>Here is what it looked like during spiking (obviously, pushing the memory
limits here, a linked in article suggests having 6GB of "newgen" memory, so on
top of the old gen, tomcat needs a bunch more for the newgen to make things
happy.</p>
<p><img src="/media/129241954103_0.png" alt=""></p>
<p>Here is what it looks like when it is not spiking</p>
<p><img src="/media/129241954103_1.png" alt=""></p>
<p>Edit: See this follow up post for showing that increasing memory helps
<a href="https://cmdcolin.github.io/posts/2015-10-15">https://cmdcolin.github.io/posts/2015-10-15</a></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Weekend project - graphing tumblr reblogs using cytoscape.js]]></title>
            <link>https://cmdcolin.github.io/posts/2015-08-30</link>
            <guid>https://cmdcolin.github.io/posts/2015-08-30</guid>
            <pubDate>Sun, 30 Aug 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>In the past, I made an app that used RStudio's Shiny platform to plot
network graphs with RGraphviz. This worked, and gave some nice results,
but when I found out about cytoscape.js, I really wanted to try that
out.</p>
<p>The app is designed to plot tumblr reblogs, so it has a tree structure,
but simply plotting things as a tree is not very space efficient (as in,
the visualization takes up too much space). Therefore, using different
types of layouts can really help.</p>
<p>In my first app with graphviz
<a href="https://colindiesh.shinyapps.io/tumblrgraph">https://colindiesh.shinyapps.io/tumblrgraph</a>, there are several
built-in graph layouts including "neato" "twopi", "circo", and "dot"</p>
<p>I made all of these available for users to try in the Shiny app. The
names of the layouts don't lend much to their behavior, but they are
built-in functions in Graphviz. There are both "tree" and
"force-directed" style graph views. As I mentioned, the "tree" style
view make a lot of sense for the tumblr reblogs, but the force directed
graphs are also a lot more compact, so offering both styles is useful.</p>
<p><img src="../../media/128000908903_0.png" alt=""></p>
<p>Figure 1. My default example graph from graphviz using the twopi layout.</p>
<p>I wanted to replicate all the features that I had in the Graphviz app in
Cytoscape.js. Here is the breakdown of the basic components that needed
replicating:</p>
<ol>
<li>
<p>Build the "graph" representation of reblogs in memory</p>
</li>
<li>
<p>Add user forms and configurability</p>
</li>
<li>
<p>Add color for distance from root using a breadth first search</p>
</li>
<li>
<p>Draw the graph</p>
</li>
</ol>
<p>As I went along, I was happy to learn that the concepts mapped very
easily to javascript and cytoscape.js. The implementations are a little
different, but it worked out very nicely.</p>
<p><img src="../../media/128000908903_1.png" alt=""></p>
<p>Figure 2. Same data plotted in Cytoscape.js with the springy layout.</p>
<p>In the new app, we enabled several different layouts similar to the
Graphviz app too. In cytoscape.js, the layouts that are offered
include "arbor", "springy", "cola", "cose", and "dagre". I like "cola"
because it really looks like bubbles moving around in a soda. Others are
worth experimenting with too.</p>
<p><img src="../../media/128000908903_2.png" alt=""></p>
<p>Figure 3. A Cytoscape.js springy layout for a larger tumblr reblog graph</p>
<p>The new cytoscape.js app also has a nice animation feature. The old
graphviz app offered animation too (using Yihui's animation library for
R) but the new version can automatically encode HTML5 video on the
client side from individual picture frames in the browser using
<a href="https://github.com/antimatter15/whammy">"Whammy"</a>! This quite
impressive!</p>
<p>So to animate the graph, what is done is</p>
<ol>
<li>
<p>Add nodes/edges and layout the graph (the simulation time is
configurable, because allowing the user to interact with the graph while
the simulation is running is useful)</p>
</li>
<li>
<p>Once layout is complete, the user can save the graph as an
animation, which first hides all nodes by adding visibility: hidden to
the CSS.</p>
</li>
<li>
<p>Then the nodes are re-shown one-by-one, preserving the layout, and a
frame is saved by the renderer at each step (takes a snapshot of the
canvas).</p>
</li>
</ol>
<p>This strategy for the animation is actually better than the original
graphviz version that I had because the layout is only done once, which
is time saving and it is also more consistent (the layout changes a lot
if you re run it on different sets of nodes).</p>
<p>Check out the app here <a href="http://cmdcolin.github.io/tumblrgraph2/">http://cmdcolin.github.io/tumblrgraph2/</a></p>
<p>Future goals:</p>
<ul>
<li>Test out super large graphs (I have tested up to about 500 reblogs
but after this, around 1000 reblogs, it slows down a lot and produces
bad layouts. Needs fixing)</li>
<li>Test out ability to place importance on certain nodes by increasing
node size based on it's degree</li>
</ul>
<p>Check out an example of the HTML5 video here</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Creating high-resolution screenshots (of jbrowse) with phantomJS]]></title>
            <link>https://cmdcolin.github.io/posts/2015-03-02</link>
            <guid>https://cmdcolin.github.io/posts/2015-03-02</guid>
            <pubDate>Mon, 02 Mar 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Generating screenshots that are of high quality can be a great benefit
for things like science publications. PhantomJS is great for automating
this in a reproducible way. While many HTML pages can be rendered in
high resolution without modification, HTML5 canvas apps need special
considerations (see this <a href="http://searchvoidstar.tumblr.com/post/86542847038/high-dpi-rendering-on-html5-canvas-some-problems">previous post on the
topic</a>).</p>
<p>One of the key things that we noticed when we developed the high
resolution canvas rendering (see above link) is that the
"devicePixelRatio" can increase based on the browser's zoom level, and
it can also take fractional values. This was a difficult problem, to
make rendering 100% consistent under all devicePixelRatio values, so we
created a config parameter called highResolutionMode to accept arbitrary
resolutions.</p>
<p>Later, we learned about PhantomJS and how it can be used for creating
screenshots, it was clear that our design for the settings arbitrary
scaling factors for the HTML5 canvas was very helpful, as we can set
highResolutionMode=4 along with the phantomJS variable
page.zoomFactor=4, which matches the resolutions and creates high-res
canvas screenshots.</p>
<p>One of the reasons that this is important is that it doesn't look like
PhantomJS allows "devicePixelRatio" to be emulated, so the
page.zoomFactor doesn't necessarily set the devicePixelRatio to a higher
number, so being able to set the the arbitrary high resolution canvas
scalings ourselves is a good solution. Reference: issue open Jan 2013
<a href="https://github.com/ariya/phantomjs/issues/10964">https://github.com/ariya/phantomjs/issues/10964</a> and we are now in Aug
2015</p>
<p>Here are some examples of the rendering process.</p>
<h2 id="examples"><a aria-hidden="true" tabindex="-1" href="#examples"><a href="#examples" style="margin-right: 10px">#</a></a>Examples</h2>
<ol>
<li>
<p>Rendering screenshots to PNG</p>
<p>phantomjs rasterize.js
"<a href="http://localhost/jbrowse/?data=sample_data/json/volvox&#x26;tracklist=0">http://localhost/jbrowse/?data=sample_data/json/volvox&#x26;tracklist=0</a>"
output.png "3800px*1600px" 2</p>
<p><a href="http://i.imgur.com/ABLo6WJ.png"><img src="http://i.imgur.com/ABLo6WJ.png" alt=""></a></p>
<p>Figure 1. A basic image output from phantomJS. It uses a
zoomFactor=2 on the command line to match highResolutionMode=2 in
the config file. `</p>
</li>
<li>
<p>Rendering screenshots to PDF. In JBrowse, this requires PhantomJS
2.0. Also see footnote.</p>
<p>phantomjs rasterize.js
"<a href="http://localhost/jbrowse/?data=sample_data/json/volvox&#x26;tracklist=0">http://localhost/jbrowse/?data=sample_data/json/volvox&#x26;tracklist=0</a>"
output.pdf "16in*8in"</p>
<p><a href="https://www.dropbox.com/s/7pceo4o406dys8s/output.pdf?dl=0">Dropbox PDF
906kb</a></p>
<p>Figure 2. Outputted PDF from phantomJS. This still requires setting
the configuration such as highResolutionMode=2 too</p>
</li>
</ol>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>In the future, we want to consider adding highResolutionMode to be
specified via the URL so that it doesn't need to be changed
manually, although, setting highResolutionMode=2 by default is not a
bad strategy.</p>
<p><strong>Footnote</strong></p>
<p>I used the following patch for rasterize.js to help "fill out" the
page space in PDF renderings (otherwise, it is a square page, not
super pretty for a widescreen app). I guess rasterize.js is really
just a template and not meant to be super multi-purposed, so this
custom modification helps for our case.</p>
<pre><code>
        diff --git a/examples/rasterize.js b/examples/rasterize.js
        index b0e0f67..3b0b6e4 100644
        --- a/examples/rasterize.js
        +++ b/examples/rasterize.js
        _@@ -14,6 +14,7 @@ if (system.args.length &#x3C; 3 || system.args.length > 5) {
            page.viewportSize = { width: 600, height: 600 };
            if (system.args.length > 3 &#x26;&#x26; system.args[2].substr(-4) === ".pdf") {
                size = system.args[3].split('_');

        +       page.viewportSize.width *= parseInt(size[0])/parseInt(size[1]);
                page.paperSize = size.length === 2 ? { width: size[0], height: size[1], margin: '0px' }

</code></pre>
<p><strong>Reference</strong></p>
<p><a href="https://gmod.org/wiki/JBrowse_Configuration_Guide#Rendering_high_resolution_screenshots_using_PhantomJS">https://gmod.org/wiki/JBrowse_Configuration_Guide#Rendering_high_resolution_screenshots_using_PhantomJS</a></p>
<p><strong>Comparison</strong></p>
<p><img src="/media/112494997473_0.png" alt="image"></p>
<p>Big improvement on font rendering</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[Post graduation survey]]></title>
            <link>https://cmdcolin.github.io/posts/2015-02-01</link>
            <guid>https://cmdcolin.github.io/posts/2015-02-01</guid>
            <pubDate>Sun, 01 Feb 2015 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently received some post-graduation survey results from my class of
2013 about salaries, job satisfaction, and other things. I thought I'd
try to visualize the data using R and ggplot2 as an exercise.</p>
<p><a href="http://i.imgur.com/5rVnQHC.png"></a></p>
<p><img src="/media/109823235838_0.png" alt=""></p>
<p>Figure 1. The fancy ggplot2 graph of salaries with standard deviation
bars comparing salaries of BS/MS grads (red) with BS grads (blue).</p>
<p>As a CS grad, I suppose I'm happy to see that we have the a highest
average salary right out of the gate. CS also has a high standard
deviation which I thought was interesting. Perhaps CS majors work in a
myriad of fields that demand computational skills where other
engineering majors may be more focused on certain types of fields,
giving less deviation.</p>
<p>In the process of making this graph, I was looking for how to do the
side-by-side bar charts in ggplot and ended up supplying a "correction"
to a answer on crossvalidated, a stackexchange site. The correction
entailed how the syntax for using reshape2 vs reshape has changed
slightly, so hopefully that helps other people searching for the same
issue.</p>
<p>Here is the code for processing</p>
<pre><code class="language-R"> library(xlsx)
 library(ggplot2)
 library(reshape2)

 salaries=read.xlsx("workbook.xlsx",1)
 df=melt(salaries,measure.vars = c("BS.MS.annual.salary",
 "BS.annual.salary"))
 #awkward step to merge standard deviations
 df[df$variable=="BS.MS.annual.salary","stdev"]=df[df$variable=="BS.MS.annual.salary","stdev.1"]
 ggplot(df, aes(NA., value, fill=variable)) +
      geom_bar(position="dodge",stat="identity") +
      geom_errorbar(aes(ymin=value-stdev, ymax=value+stdev),
 position=position_dodge(width=0.9)) +
      ggtitle("Salary for 2013 class of Engineering (2014 survey)") +
      xlab("Major") +
      ylab("Salary w/ stddev")
</code></pre>
<p>Table pictured</p>
<p><img src="/media/109823235838_1.png" alt=""></p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
        <item>
            <title><![CDATA[High DPI rendering on HTML5 canvas - some problems and solutions]]></title>
            <link>https://cmdcolin.github.io/posts/2014-05-22</link>
            <guid>https://cmdcolin.github.io/posts/2014-05-22</guid>
            <pubDate>Thu, 22 May 2014 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Recently our code has been moving towards the use of HTML5 canvas, as it has
many benefits. I felt that if we were going to keep this going towards canvas,
the rendering needed to match the quality of regular HTML based tracks.
Unfortunately, the HTML5 canvas by default looks very "fuzzy" on a high
resolution display (Figure 1).</p>
<p><img src="/media/86542847038_0.jpg" alt=""></p>
<p><em>Figure 1.</em> An example of really bad font rendering before and after enabling
high resolution on the HTML5 canvas.</p>
<h2 id="background"><a aria-hidden="true" tabindex="-1" href="#background"><a href="#background" style="margin-right: 10px">#</a></a>Background</h2>
<p>Major credit goes to the tutorial at
<a href="http://www.html5rocks.com/en/tutorials/canvas/hidpi/">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a> for pioneering this!
The html5rocks tutorial, written in 2010 it still remains relevant. The major
thing it introduces is these browser variables called devicePixelRatio and
backingStoreRatio that can be used to adjust your canvas drawing. In my
interpretation, these two variables have the following purpose:</p>
<p><em>devicePixelRatio</em></p>
<p>On high DPI displays, screen pixels are actually abstracted away from the
physical pixels, so, when you create some HTML element with width 100, height
100, that element actually takes up a larger number of pixels than 100x100. The
actual ratio of the pixels that it takes up is 100<em>devicePixelRatio x
100</em>devicePixelRatio. On a high DPI platform like Retina, the devicePixelRatio
is normally 2 at 100% zoom.</p>
<p><em>backingStoreRatio</em></p>
<p>The backing store ratio doesn't seem to change as much from platform to
platform, but my interpretation of this value is that it essentially gives the
size of the memory buffer for the canvas. On my platform, the backingStoreRatio
is "1". I think this value had more historical use, but it may not really be
used anymore (update aug 7th, 2015 deprecated?
<a href="http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated">http://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated</a>)</p>
<p>So, what are the consequences of the backing store ratio and the device pixel
ratio? If the backing store ratio equals the device pixel ratio, then no
scaling takes place, but what we often see is that they are not equal, so the
image is up-scaled from the backing store to the screen, and then it is
stretched and blurred.</p>
<h2 id="so-how-do-you-enable-the-high-dpi-mode"><a aria-hidden="true" tabindex="-1" href="#so-how-do-you-enable-the-high-dpi-mode"><a href="#so-how-do-you-enable-the-high-dpi-mode" style="margin-right: 10px">#</a></a>So, how do you enable the high DPI mode?</h2>
<p>The solution to properly scale your HTML5 canvas content involves a couple of
steps that are described in the tutorial here
<a href="http://www.html5rocks.com/en/tutorials/canvas/hidpi/">http://www.html5rocks.com/en/tutorials/canvas/hidpi/</a>, but here is the
essence:</p>
<ol>
<li>
<p>Use the canvas.scale method, which tells the canvas's drawing area to become
bigger, but keeps drawing operations consistent.</p>
</li>
<li>
<p>The scaling factor for the canvas.scale method is
devicePixelRatio/backingStoreRatio. This will be 2 for instance on a Retina
screen at a typical 100% zoom level. The zoom level is relevant which will be
discussed later in this post...</p>
</li>
<li>
<p>Multiply the width and height attributes of the canvas by
devicePixelRatio/backingStoreRatio, so that the "canvas object" is as big as
the scaled size.</p>
</li>
<li>
<p>Here's the tricky part: set the CSS width and height attributes to be the
UNSCALED size that you want.</p>
</li>
</ol>
<p>Note: you can also set CSS width:100% or something and then the canvas will be
sized appropriately. Normally though, what you will have is something like
<code>&#x3C;canvas width=640 height=480 style="width:320px;height:240px"></code> so you can see
that the canvas size is larger than what the CSS actually resizes it to be.</p>
<h2 id="issues-browser-zoom-and-fractional-devicepixelratios"><a aria-hidden="true" tabindex="-1" href="#issues-browser-zoom-and-fractional-devicepixelratios"><a href="#issues-browser-zoom-and-fractional-devicepixelratios" style="margin-right: 10px">#</a></a>Issues: Browser zoom and fractional devicePixelRatios</h2>
<p>When I first started this project, the benefit of this high resolution
rendering seemed limited to the fancy people who had Retina or other High DPI
screens. However, what I didn't even realize is that the devicePixelRatio value
changes depending on browser zoom settings, so even people with a regular
screen can have improved rendering of the HTML5 canvas. (Update: we even saw
that if you have customized canvas renderings, then you an generate good
screenshots of the canvas with PhantomJS too. See <a href="http://searchvoidstar.tumblr.com/post/112494997473/creating-high-resolution-screenshots-of-jbrowse">my other more recent
article</a>)</p>
<p>The issue with these zoom settings though is that when you change the zoom
level, especially on chrome and firefox browsers, the devicePixelRatio can end
up being a fractional value e.g. 2.223277 which can result in sub-pixel
rendering problems.</p>
<p>Remember that when we scaled the canvas, it also scales the drawing functions
to be consistent, so that essentially if you draw a 1 pixel width line on a
scaled canvas, it might draw a 2.223277 pixel width line. Hence, we can get
fuzzy rendering issues.</p>
<p>This issue is very noticeable if you draw many 1px wide lines right next to
each other. In this case, there will be noticeable gaps between the lines due
to the imperfect rendering (see green box below).</p>
<p><img src="/media/86542847038_1.png" alt=""></p>
<p><em>Figure 2.</em> Examples of 1px wide lines rendered next to each other when there
is fractional devicePixelRatio.</p>
<p>Bottom Green box: 1px wide lines drawn 1px apart. (note: bad rendering! tiny
gaps) Middle Blue box: 1px wide line rendered every 2 px (intentional gaps for
demonstration). Top Red box: 1.3px wide lines (a fudge factor is used to make
eliminate the tiny gaps).</p>
<h2 id="my-solution-the-red-box----add-a-fudge-factor"><a aria-hidden="true" tabindex="-1" href="#my-solution-the-red-box----add-a-fudge-factor"><a href="#my-solution-the-red-box----add-a-fudge-factor" style="margin-right: 10px">#</a></a>My solution: The Red Box -- add a fudge factor</h2>
<p>As you can see in the above figure, my solution to the sub-pixel rendering is
to add a "fudge factor" to the line width to make it render lines that are
1.3px wide instead of 1px wide when the devicePixelRatio is not a whole number,
which effectively eliminates any gaps due to the sub-pixel rendering problem.</p>
<p>I heuristically determined the value 1.3px to be sufficient, as testing values
like 1.1px, 1.2px and even 1.25px were too small. I'd love to see a proof of
determining this value empirically, or even better, something that isn't this
big of a hack, but for now that's what I have.</p>
<p>You can see the effect of the fudge factor (red box) vs the bad rendering
(green box) in Figure 2. You can also try this out yourself here
<a href="http://jsfiddle.net/4xe4d/">http://jsfiddle.net/4xe4d/</a>, just zoom your browser and then refresh (zooming
and not refreshing doesn't modify device pixel ratio) to test out different
values of devicePixelRatio.</p>
<h2 id="conclusion"><a aria-hidden="true" tabindex="-1" href="#conclusion"><a href="#conclusion" style="margin-right: 10px">#</a></a>Conclusion</h2>
<p>In conclusion...we now have high resolution rendering on canvas! The solution
for drawing lots of lines right next to each other is sort of suboptimal, so
the question continues...what shall be done in this case?</p>
<p>Maybe someone could implement some sort of library that replaces the
canvas.scale method to do better layout and obtain more pixel perfect
rendering. Alternatively, you could force the scaling factor to always round to
a whole number. This is actually not a bad solution, because the canvas is
already being resized, and then you can control your rendering better.</p>
<p>Thanks for reading</p>]]></content:encoded>
            <author>colin.diesh@gmail.com (Colin Diesh)</author>
        </item>
    </channel>
</rss>